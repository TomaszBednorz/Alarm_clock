
Alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a9c  08002a9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a9c  08002a9c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a9c  08002a9c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a9c  08002a9c  00012a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  08002b14  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002b14  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab14  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001946  00000000  00000000  0002abac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  0002c4f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b0  00000000  00000000  0002cb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019b78  00000000  00000000  0002d130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007c79  00000000  00000000  00046ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d9e7  00000000  00000000  0004e921  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc308  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019e4  00000000  00000000  000dc384  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002a48 	.word	0x08002a48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002a48 	.word	0x08002a48

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c10      	adds	r0, r2, #0
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	1c19      	adds	r1, r3, #0
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f000 f8d3 	bl	80003ec <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f82b 	bl	80002ac <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f8c5 	bl	80003ec <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 f8bb 	bl	80003ec <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 f84d 	bl	8000324 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 f843 	bl	8000324 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__eqdf2>:
 80002ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ae:	464f      	mov	r7, r9
 80002b0:	4646      	mov	r6, r8
 80002b2:	46d6      	mov	lr, sl
 80002b4:	4684      	mov	ip, r0
 80002b6:	b5c0      	push	{r6, r7, lr}
 80002b8:	4680      	mov	r8, r0
 80002ba:	4e19      	ldr	r6, [pc, #100]	; (8000320 <__eqdf2+0x74>)
 80002bc:	0318      	lsls	r0, r3, #12
 80002be:	030f      	lsls	r7, r1, #12
 80002c0:	004d      	lsls	r5, r1, #1
 80002c2:	0b00      	lsrs	r0, r0, #12
 80002c4:	005c      	lsls	r4, r3, #1
 80002c6:	4682      	mov	sl, r0
 80002c8:	0b3f      	lsrs	r7, r7, #12
 80002ca:	0d6d      	lsrs	r5, r5, #21
 80002cc:	0fc9      	lsrs	r1, r1, #31
 80002ce:	4691      	mov	r9, r2
 80002d0:	0d64      	lsrs	r4, r4, #21
 80002d2:	0fdb      	lsrs	r3, r3, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	42b5      	cmp	r5, r6
 80002d8:	d00a      	beq.n	80002f0 <__eqdf2+0x44>
 80002da:	42b4      	cmp	r4, r6
 80002dc:	d003      	beq.n	80002e6 <__eqdf2+0x3a>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d101      	bne.n	80002e6 <__eqdf2+0x3a>
 80002e2:	4557      	cmp	r7, sl
 80002e4:	d00c      	beq.n	8000300 <__eqdf2+0x54>
 80002e6:	bc1c      	pop	{r2, r3, r4}
 80002e8:	4690      	mov	r8, r2
 80002ea:	4699      	mov	r9, r3
 80002ec:	46a2      	mov	sl, r4
 80002ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f0:	4666      	mov	r6, ip
 80002f2:	433e      	orrs	r6, r7
 80002f4:	d1f7      	bne.n	80002e6 <__eqdf2+0x3a>
 80002f6:	42ac      	cmp	r4, r5
 80002f8:	d1f5      	bne.n	80002e6 <__eqdf2+0x3a>
 80002fa:	4654      	mov	r4, sl
 80002fc:	4314      	orrs	r4, r2
 80002fe:	d1f2      	bne.n	80002e6 <__eqdf2+0x3a>
 8000300:	2001      	movs	r0, #1
 8000302:	45c8      	cmp	r8, r9
 8000304:	d1ef      	bne.n	80002e6 <__eqdf2+0x3a>
 8000306:	4299      	cmp	r1, r3
 8000308:	d007      	beq.n	800031a <__eqdf2+0x6e>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d1eb      	bne.n	80002e6 <__eqdf2+0x3a>
 800030e:	4663      	mov	r3, ip
 8000310:	431f      	orrs	r7, r3
 8000312:	0038      	movs	r0, r7
 8000314:	1e47      	subs	r7, r0, #1
 8000316:	41b8      	sbcs	r0, r7
 8000318:	e7e5      	b.n	80002e6 <__eqdf2+0x3a>
 800031a:	2000      	movs	r0, #0
 800031c:	e7e3      	b.n	80002e6 <__eqdf2+0x3a>
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	000007ff 	.word	0x000007ff

08000324 <__gedf2>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	464f      	mov	r7, r9
 8000328:	4646      	mov	r6, r8
 800032a:	46d6      	mov	lr, sl
 800032c:	004d      	lsls	r5, r1, #1
 800032e:	b5c0      	push	{r6, r7, lr}
 8000330:	030e      	lsls	r6, r1, #12
 8000332:	0fc9      	lsrs	r1, r1, #31
 8000334:	468a      	mov	sl, r1
 8000336:	492c      	ldr	r1, [pc, #176]	; (80003e8 <__gedf2+0xc4>)
 8000338:	031f      	lsls	r7, r3, #12
 800033a:	005c      	lsls	r4, r3, #1
 800033c:	4680      	mov	r8, r0
 800033e:	0b36      	lsrs	r6, r6, #12
 8000340:	0d6d      	lsrs	r5, r5, #21
 8000342:	4691      	mov	r9, r2
 8000344:	0b3f      	lsrs	r7, r7, #12
 8000346:	0d64      	lsrs	r4, r4, #21
 8000348:	0fdb      	lsrs	r3, r3, #31
 800034a:	428d      	cmp	r5, r1
 800034c:	d01e      	beq.n	800038c <__gedf2+0x68>
 800034e:	428c      	cmp	r4, r1
 8000350:	d016      	beq.n	8000380 <__gedf2+0x5c>
 8000352:	2d00      	cmp	r5, #0
 8000354:	d11e      	bne.n	8000394 <__gedf2+0x70>
 8000356:	4330      	orrs	r0, r6
 8000358:	4684      	mov	ip, r0
 800035a:	2c00      	cmp	r4, #0
 800035c:	d101      	bne.n	8000362 <__gedf2+0x3e>
 800035e:	433a      	orrs	r2, r7
 8000360:	d023      	beq.n	80003aa <__gedf2+0x86>
 8000362:	4662      	mov	r2, ip
 8000364:	2a00      	cmp	r2, #0
 8000366:	d01a      	beq.n	800039e <__gedf2+0x7a>
 8000368:	459a      	cmp	sl, r3
 800036a:	d029      	beq.n	80003c0 <__gedf2+0x9c>
 800036c:	4651      	mov	r1, sl
 800036e:	2002      	movs	r0, #2
 8000370:	3901      	subs	r1, #1
 8000372:	4008      	ands	r0, r1
 8000374:	3801      	subs	r0, #1
 8000376:	bc1c      	pop	{r2, r3, r4}
 8000378:	4690      	mov	r8, r2
 800037a:	4699      	mov	r9, r3
 800037c:	46a2      	mov	sl, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	0039      	movs	r1, r7
 8000382:	4311      	orrs	r1, r2
 8000384:	d0e5      	beq.n	8000352 <__gedf2+0x2e>
 8000386:	2002      	movs	r0, #2
 8000388:	4240      	negs	r0, r0
 800038a:	e7f4      	b.n	8000376 <__gedf2+0x52>
 800038c:	4330      	orrs	r0, r6
 800038e:	d1fa      	bne.n	8000386 <__gedf2+0x62>
 8000390:	42ac      	cmp	r4, r5
 8000392:	d00f      	beq.n	80003b4 <__gedf2+0x90>
 8000394:	2c00      	cmp	r4, #0
 8000396:	d10f      	bne.n	80003b8 <__gedf2+0x94>
 8000398:	433a      	orrs	r2, r7
 800039a:	d0e7      	beq.n	800036c <__gedf2+0x48>
 800039c:	e00c      	b.n	80003b8 <__gedf2+0x94>
 800039e:	2201      	movs	r2, #1
 80003a0:	3b01      	subs	r3, #1
 80003a2:	4393      	bics	r3, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	3001      	adds	r0, #1
 80003a8:	e7e5      	b.n	8000376 <__gedf2+0x52>
 80003aa:	4663      	mov	r3, ip
 80003ac:	2000      	movs	r0, #0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0e1      	beq.n	8000376 <__gedf2+0x52>
 80003b2:	e7db      	b.n	800036c <__gedf2+0x48>
 80003b4:	433a      	orrs	r2, r7
 80003b6:	d1e6      	bne.n	8000386 <__gedf2+0x62>
 80003b8:	459a      	cmp	sl, r3
 80003ba:	d1d7      	bne.n	800036c <__gedf2+0x48>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	dcd5      	bgt.n	800036c <__gedf2+0x48>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	db05      	blt.n	80003d0 <__gedf2+0xac>
 80003c4:	42be      	cmp	r6, r7
 80003c6:	d8d1      	bhi.n	800036c <__gedf2+0x48>
 80003c8:	d008      	beq.n	80003dc <__gedf2+0xb8>
 80003ca:	2000      	movs	r0, #0
 80003cc:	42be      	cmp	r6, r7
 80003ce:	d2d2      	bcs.n	8000376 <__gedf2+0x52>
 80003d0:	4650      	mov	r0, sl
 80003d2:	2301      	movs	r3, #1
 80003d4:	3801      	subs	r0, #1
 80003d6:	4398      	bics	r0, r3
 80003d8:	3001      	adds	r0, #1
 80003da:	e7cc      	b.n	8000376 <__gedf2+0x52>
 80003dc:	45c8      	cmp	r8, r9
 80003de:	d8c5      	bhi.n	800036c <__gedf2+0x48>
 80003e0:	2000      	movs	r0, #0
 80003e2:	45c8      	cmp	r8, r9
 80003e4:	d3f4      	bcc.n	80003d0 <__gedf2+0xac>
 80003e6:	e7c6      	b.n	8000376 <__gedf2+0x52>
 80003e8:	000007ff 	.word	0x000007ff

080003ec <__ledf2>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	464f      	mov	r7, r9
 80003f0:	4646      	mov	r6, r8
 80003f2:	46d6      	mov	lr, sl
 80003f4:	004d      	lsls	r5, r1, #1
 80003f6:	b5c0      	push	{r6, r7, lr}
 80003f8:	030e      	lsls	r6, r1, #12
 80003fa:	0fc9      	lsrs	r1, r1, #31
 80003fc:	468a      	mov	sl, r1
 80003fe:	492e      	ldr	r1, [pc, #184]	; (80004b8 <__ledf2+0xcc>)
 8000400:	031f      	lsls	r7, r3, #12
 8000402:	005c      	lsls	r4, r3, #1
 8000404:	4680      	mov	r8, r0
 8000406:	0b36      	lsrs	r6, r6, #12
 8000408:	0d6d      	lsrs	r5, r5, #21
 800040a:	4691      	mov	r9, r2
 800040c:	0b3f      	lsrs	r7, r7, #12
 800040e:	0d64      	lsrs	r4, r4, #21
 8000410:	0fdb      	lsrs	r3, r3, #31
 8000412:	428d      	cmp	r5, r1
 8000414:	d018      	beq.n	8000448 <__ledf2+0x5c>
 8000416:	428c      	cmp	r4, r1
 8000418:	d011      	beq.n	800043e <__ledf2+0x52>
 800041a:	2d00      	cmp	r5, #0
 800041c:	d118      	bne.n	8000450 <__ledf2+0x64>
 800041e:	4330      	orrs	r0, r6
 8000420:	4684      	mov	ip, r0
 8000422:	2c00      	cmp	r4, #0
 8000424:	d11e      	bne.n	8000464 <__ledf2+0x78>
 8000426:	433a      	orrs	r2, r7
 8000428:	d11c      	bne.n	8000464 <__ledf2+0x78>
 800042a:	4663      	mov	r3, ip
 800042c:	2000      	movs	r0, #0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d030      	beq.n	8000494 <__ledf2+0xa8>
 8000432:	4651      	mov	r1, sl
 8000434:	2002      	movs	r0, #2
 8000436:	3901      	subs	r1, #1
 8000438:	4008      	ands	r0, r1
 800043a:	3801      	subs	r0, #1
 800043c:	e02a      	b.n	8000494 <__ledf2+0xa8>
 800043e:	0039      	movs	r1, r7
 8000440:	4311      	orrs	r1, r2
 8000442:	d0ea      	beq.n	800041a <__ledf2+0x2e>
 8000444:	2002      	movs	r0, #2
 8000446:	e025      	b.n	8000494 <__ledf2+0xa8>
 8000448:	4330      	orrs	r0, r6
 800044a:	d1fb      	bne.n	8000444 <__ledf2+0x58>
 800044c:	42ac      	cmp	r4, r5
 800044e:	d026      	beq.n	800049e <__ledf2+0xb2>
 8000450:	2c00      	cmp	r4, #0
 8000452:	d126      	bne.n	80004a2 <__ledf2+0xb6>
 8000454:	433a      	orrs	r2, r7
 8000456:	d124      	bne.n	80004a2 <__ledf2+0xb6>
 8000458:	4651      	mov	r1, sl
 800045a:	2002      	movs	r0, #2
 800045c:	3901      	subs	r1, #1
 800045e:	4008      	ands	r0, r1
 8000460:	3801      	subs	r0, #1
 8000462:	e017      	b.n	8000494 <__ledf2+0xa8>
 8000464:	4662      	mov	r2, ip
 8000466:	2a00      	cmp	r2, #0
 8000468:	d00f      	beq.n	800048a <__ledf2+0x9e>
 800046a:	459a      	cmp	sl, r3
 800046c:	d1e1      	bne.n	8000432 <__ledf2+0x46>
 800046e:	42a5      	cmp	r5, r4
 8000470:	db05      	blt.n	800047e <__ledf2+0x92>
 8000472:	42be      	cmp	r6, r7
 8000474:	d8dd      	bhi.n	8000432 <__ledf2+0x46>
 8000476:	d019      	beq.n	80004ac <__ledf2+0xc0>
 8000478:	2000      	movs	r0, #0
 800047a:	42be      	cmp	r6, r7
 800047c:	d20a      	bcs.n	8000494 <__ledf2+0xa8>
 800047e:	4650      	mov	r0, sl
 8000480:	2301      	movs	r3, #1
 8000482:	3801      	subs	r0, #1
 8000484:	4398      	bics	r0, r3
 8000486:	3001      	adds	r0, #1
 8000488:	e004      	b.n	8000494 <__ledf2+0xa8>
 800048a:	2201      	movs	r2, #1
 800048c:	3b01      	subs	r3, #1
 800048e:	4393      	bics	r3, r2
 8000490:	0018      	movs	r0, r3
 8000492:	3001      	adds	r0, #1
 8000494:	bc1c      	pop	{r2, r3, r4}
 8000496:	4690      	mov	r8, r2
 8000498:	4699      	mov	r9, r3
 800049a:	46a2      	mov	sl, r4
 800049c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800049e:	433a      	orrs	r2, r7
 80004a0:	d1d0      	bne.n	8000444 <__ledf2+0x58>
 80004a2:	459a      	cmp	sl, r3
 80004a4:	d1c5      	bne.n	8000432 <__ledf2+0x46>
 80004a6:	42a5      	cmp	r5, r4
 80004a8:	dcc3      	bgt.n	8000432 <__ledf2+0x46>
 80004aa:	e7e0      	b.n	800046e <__ledf2+0x82>
 80004ac:	45c8      	cmp	r8, r9
 80004ae:	d8c0      	bhi.n	8000432 <__ledf2+0x46>
 80004b0:	2000      	movs	r0, #0
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d3e3      	bcc.n	800047e <__ledf2+0x92>
 80004b6:	e7ed      	b.n	8000494 <__ledf2+0xa8>
 80004b8:	000007ff 	.word	0x000007ff

080004bc <__aeabi_i2d>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2800      	cmp	r0, #0
 80004c0:	d02d      	beq.n	800051e <__aeabi_i2d+0x62>
 80004c2:	17c3      	asrs	r3, r0, #31
 80004c4:	18c5      	adds	r5, r0, r3
 80004c6:	405d      	eors	r5, r3
 80004c8:	0fc4      	lsrs	r4, r0, #31
 80004ca:	0028      	movs	r0, r5
 80004cc:	f000 f862 	bl	8000594 <__clzsi2>
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <__aeabi_i2d+0x6c>)
 80004d2:	1a1b      	subs	r3, r3, r0
 80004d4:	055b      	lsls	r3, r3, #21
 80004d6:	0d5b      	lsrs	r3, r3, #21
 80004d8:	280a      	cmp	r0, #10
 80004da:	dd15      	ble.n	8000508 <__aeabi_i2d+0x4c>
 80004dc:	380b      	subs	r0, #11
 80004de:	4085      	lsls	r5, r0
 80004e0:	2200      	movs	r2, #0
 80004e2:	032d      	lsls	r5, r5, #12
 80004e4:	0b2d      	lsrs	r5, r5, #12
 80004e6:	2100      	movs	r1, #0
 80004e8:	0010      	movs	r0, r2
 80004ea:	032d      	lsls	r5, r5, #12
 80004ec:	0d0a      	lsrs	r2, r1, #20
 80004ee:	0b2d      	lsrs	r5, r5, #12
 80004f0:	0512      	lsls	r2, r2, #20
 80004f2:	432a      	orrs	r2, r5
 80004f4:	4d0d      	ldr	r5, [pc, #52]	; (800052c <__aeabi_i2d+0x70>)
 80004f6:	051b      	lsls	r3, r3, #20
 80004f8:	402a      	ands	r2, r5
 80004fa:	4313      	orrs	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	07e4      	lsls	r4, r4, #31
 8000500:	085b      	lsrs	r3, r3, #1
 8000502:	4323      	orrs	r3, r4
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	0002      	movs	r2, r0
 800050a:	0029      	movs	r1, r5
 800050c:	3215      	adds	r2, #21
 800050e:	4091      	lsls	r1, r2
 8000510:	000a      	movs	r2, r1
 8000512:	210b      	movs	r1, #11
 8000514:	1a08      	subs	r0, r1, r0
 8000516:	40c5      	lsrs	r5, r0
 8000518:	032d      	lsls	r5, r5, #12
 800051a:	0b2d      	lsrs	r5, r5, #12
 800051c:	e7e3      	b.n	80004e6 <__aeabi_i2d+0x2a>
 800051e:	2400      	movs	r4, #0
 8000520:	2300      	movs	r3, #0
 8000522:	2500      	movs	r5, #0
 8000524:	2200      	movs	r2, #0
 8000526:	e7de      	b.n	80004e6 <__aeabi_i2d+0x2a>
 8000528:	0000041e 	.word	0x0000041e
 800052c:	800fffff 	.word	0x800fffff

08000530 <__aeabi_ui2d>:
 8000530:	b510      	push	{r4, lr}
 8000532:	1e04      	subs	r4, r0, #0
 8000534:	d025      	beq.n	8000582 <__aeabi_ui2d+0x52>
 8000536:	f000 f82d 	bl	8000594 <__clzsi2>
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <__aeabi_ui2d+0x5c>)
 800053c:	1a1b      	subs	r3, r3, r0
 800053e:	055b      	lsls	r3, r3, #21
 8000540:	0d5b      	lsrs	r3, r3, #21
 8000542:	280a      	cmp	r0, #10
 8000544:	dd12      	ble.n	800056c <__aeabi_ui2d+0x3c>
 8000546:	380b      	subs	r0, #11
 8000548:	4084      	lsls	r4, r0
 800054a:	2200      	movs	r2, #0
 800054c:	0324      	lsls	r4, r4, #12
 800054e:	0b24      	lsrs	r4, r4, #12
 8000550:	2100      	movs	r1, #0
 8000552:	0010      	movs	r0, r2
 8000554:	0324      	lsls	r4, r4, #12
 8000556:	0d0a      	lsrs	r2, r1, #20
 8000558:	0b24      	lsrs	r4, r4, #12
 800055a:	0512      	lsls	r2, r2, #20
 800055c:	4322      	orrs	r2, r4
 800055e:	4c0c      	ldr	r4, [pc, #48]	; (8000590 <__aeabi_ui2d+0x60>)
 8000560:	051b      	lsls	r3, r3, #20
 8000562:	4022      	ands	r2, r4
 8000564:	4313      	orrs	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	0859      	lsrs	r1, r3, #1
 800056a:	bd10      	pop	{r4, pc}
 800056c:	0002      	movs	r2, r0
 800056e:	0021      	movs	r1, r4
 8000570:	3215      	adds	r2, #21
 8000572:	4091      	lsls	r1, r2
 8000574:	000a      	movs	r2, r1
 8000576:	210b      	movs	r1, #11
 8000578:	1a08      	subs	r0, r1, r0
 800057a:	40c4      	lsrs	r4, r0
 800057c:	0324      	lsls	r4, r4, #12
 800057e:	0b24      	lsrs	r4, r4, #12
 8000580:	e7e6      	b.n	8000550 <__aeabi_ui2d+0x20>
 8000582:	2300      	movs	r3, #0
 8000584:	2400      	movs	r4, #0
 8000586:	2200      	movs	r2, #0
 8000588:	e7e2      	b.n	8000550 <__aeabi_ui2d+0x20>
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	0000041e 	.word	0x0000041e
 8000590:	800fffff 	.word	0x800fffff

08000594 <__clzsi2>:
 8000594:	211c      	movs	r1, #28
 8000596:	2301      	movs	r3, #1
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	4298      	cmp	r0, r3
 800059c:	d301      	bcc.n	80005a2 <__clzsi2+0xe>
 800059e:	0c00      	lsrs	r0, r0, #16
 80005a0:	3910      	subs	r1, #16
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	4298      	cmp	r0, r3
 80005a6:	d301      	bcc.n	80005ac <__clzsi2+0x18>
 80005a8:	0a00      	lsrs	r0, r0, #8
 80005aa:	3908      	subs	r1, #8
 80005ac:	091b      	lsrs	r3, r3, #4
 80005ae:	4298      	cmp	r0, r3
 80005b0:	d301      	bcc.n	80005b6 <__clzsi2+0x22>
 80005b2:	0900      	lsrs	r0, r0, #4
 80005b4:	3904      	subs	r1, #4
 80005b6:	a202      	add	r2, pc, #8	; (adr r2, 80005c0 <__clzsi2+0x2c>)
 80005b8:	5c10      	ldrb	r0, [r2, r0]
 80005ba:	1840      	adds	r0, r0, r1
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	02020304 	.word	0x02020304
 80005c4:	01010101 	.word	0x01010101
	...

080005d0 <i2c1_init>:

I2C_HandleTypeDef hi2c1, hi2c2;


void i2c1_init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <i2c1_init+0x64>)
 80005d6:	4a18      	ldr	r2, [pc, #96]	; (8000638 <i2c1_init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E; // I2C standard mode: 100kHz
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <i2c1_init+0x64>)
 80005dc:	4a17      	ldr	r2, [pc, #92]	; (800063c <i2c1_init+0x6c>)
 80005de:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80005e0:	4b14      	ldr	r3, [pc, #80]	; (8000634 <i2c1_init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <i2c1_init+0x64>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <i2c1_init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <i2c1_init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <i2c1_init+0x64>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <i2c1_init+0x64>)
 8000600:	2200      	movs	r2, #0
 8000602:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <i2c1_init+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]

	if(HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060a:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <i2c1_init+0x64>)
 800060c:	0018      	movs	r0, r3
 800060e:	f000 feff 	bl	8001410 <HAL_I2C_Init>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <i2c1_init+0x4a>
	{
		error_handler();
 8000616:	f000 fa07 	bl	8000a28 <error_handler>
	}

	// Configure Analogue filter
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <i2c1_init+0x64>)
 800061c:	2100      	movs	r1, #0
 800061e:	0018      	movs	r0, r3
 8000620:	f001 fd48 	bl	80020b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <i2c1_init+0x5c>
	{
		error_handler();
 8000628:	f000 f9fe 	bl	8000a28 <error_handler>
	}

}
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	20000098 	.word	0x20000098
 8000638:	40005400 	.word	0x40005400
 800063c:	2000090e 	.word	0x2000090e

08000640 <i2c2_init>:

void i2c2_init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 8000644:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <i2c2_init+0x64>)
 8000646:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <i2c2_init+0x68>)
 8000648:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x2000090E;
 800064a:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <i2c2_init+0x64>)
 800064c:	4a17      	ldr	r2, [pc, #92]	; (80006ac <i2c2_init+0x6c>)
 800064e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <i2c2_init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000656:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <i2c2_init+0x64>)
 8000658:	2201      	movs	r2, #1
 800065a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <i2c2_init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <i2c2_init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <i2c2_init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <i2c2_init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <i2c2_init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]

	if(HAL_I2C_Init(&hi2c2) != HAL_OK)
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <i2c2_init+0x64>)
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fec7 	bl	8001410 <HAL_I2C_Init>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d001      	beq.n	800068a <i2c2_init+0x4a>
	{
		error_handler();
 8000686:	f000 f9cf 	bl	8000a28 <error_handler>
	}

	// Configure Analogue filter
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <i2c2_init+0x64>)
 800068c:	2100      	movs	r1, #0
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fd10 	bl	80020b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000694:	1e03      	subs	r3, r0, #0
 8000696:	d001      	beq.n	800069c <i2c2_init+0x5c>
	{
		error_handler();
 8000698:	f000 f9c6 	bl	8000a28 <error_handler>
	}

}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	200000e4 	.word	0x200000e4
 80006a8:	40005800 	.word	0x40005800
 80006ac:	2000090e 	.word	0x2000090e

080006b0 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <NMI_Handler+0x4>

080006b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  while (1)
 80006ba:	e7fe      	b.n	80006ba <HardFault_Handler+0x4>

080006bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80006c0:	f000 fc3c 	bl	8000f3c <HAL_IncTick>
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <lcd_write>:
#include "lcd.h"

static void lcd_write(uint8_t data, uint8_t add_pins)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af02      	add	r7, sp, #8
 80006d2:	0002      	movs	r2, r0
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	701a      	strb	r2, [r3, #0]
 80006d8:	1dbb      	adds	r3, r7, #6
 80006da:	1c0a      	adds	r2, r1, #0
 80006dc:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | add_pins;
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	220f      	movs	r2, #15
 80006e4:	4393      	bics	r3, r2
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	1dbb      	adds	r3, r7, #6
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2204      	movs	r2, #4
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	210c      	movs	r1, #12
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (data & 0xF0) | add_pins;
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b25b      	sxtb	r3, r3
 8000702:	220f      	movs	r2, #15
 8000704:	4393      	bics	r3, r2
 8000706:	b25a      	sxtb	r2, r3
 8000708:	1dbb      	adds	r3, r7, #6
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b25b      	sxtb	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	187b      	adds	r3, r7, r1
 8000716:	705a      	strb	r2, [r3, #1]
	tx_data[2] = (data << 4) | EN_PIN | add_pins;
 8000718:	1dfb      	adds	r3, r7, #7
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	b2da      	uxtb	r2, r3
 8000720:	1dbb      	adds	r3, r7, #6
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4313      	orrs	r3, r2
 8000726:	b2db      	uxtb	r3, r3
 8000728:	2204      	movs	r2, #4
 800072a:	4313      	orrs	r3, r2
 800072c:	b2da      	uxtb	r2, r3
 800072e:	187b      	adds	r3, r7, r1
 8000730:	709a      	strb	r2, [r3, #2]
	tx_data[3] = (data << 4) | add_pins;
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	b25a      	sxtb	r2, r3
 800073a:	1dbb      	adds	r3, r7, #6
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b25b      	sxtb	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b25b      	sxtb	r3, r3
 8000744:	b2da      	uxtb	r2, r3
 8000746:	187b      	adds	r3, r7, r1
 8000748:	70da      	strb	r2, [r3, #3]

	if(HAL_I2C_Master_Transmit(&LCD_I2C_HANDLE, LCD_I2C_ADDR, tx_data, 4, 50))
 800074a:	187a      	adds	r2, r7, r1
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <lcd_write+0xa4>)
 800074e:	2332      	movs	r3, #50	; 0x32
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2304      	movs	r3, #4
 8000754:	214e      	movs	r1, #78	; 0x4e
 8000756:	f000 fef1 	bl	800153c <HAL_I2C_Master_Transmit>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <lcd_write+0x96>
	{
		error_handler();
 800075e:	f000 f963 	bl	8000a28 <error_handler>
	}
	HAL_Delay(5);
 8000762:	2005      	movs	r0, #5
 8000764:	f000 fc06 	bl	8000f74 <HAL_Delay>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000098 	.word	0x20000098

08000774 <lcd_init>:

/*
 * LCD initialization in 4 bit mode
 */
void lcd_init(lcd_display* lcd)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	uint8_t bl = 0;
 800077c:	230f      	movs	r3, #15
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
	if(lcd->backlight)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <lcd_init+0x20>
	{
		bl = BL_PIN;
 800078c:	230f      	movs	r3, #15
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	2208      	movs	r2, #8
 8000792:	701a      	strb	r2, [r3, #0]
	}

	// LCD initialization
	HAL_Delay(40);
 8000794:	2028      	movs	r0, #40	; 0x28
 8000796:	f000 fbed 	bl	8000f74 <HAL_Delay>
	lcd_write(CMD_8_BIT_INIT, bl);
 800079a:	240f      	movs	r4, #15
 800079c:	193b      	adds	r3, r7, r4
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	0019      	movs	r1, r3
 80007a2:	2030      	movs	r0, #48	; 0x30
 80007a4:	f7ff ff92 	bl	80006cc <lcd_write>
	HAL_Delay(5);
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 fbe3 	bl	8000f74 <HAL_Delay>
	lcd_write(CMD_8_BIT_INIT, bl);
 80007ae:	193b      	adds	r3, r7, r4
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	0019      	movs	r1, r3
 80007b4:	2030      	movs	r0, #48	; 0x30
 80007b6:	f7ff ff89 	bl	80006cc <lcd_write>
	HAL_Delay(1);
 80007ba:	2001      	movs	r0, #1
 80007bc:	f000 fbda 	bl	8000f74 <HAL_Delay>
	lcd_write(CMD_8_BIT_INIT, bl);
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	0019      	movs	r1, r3
 80007c6:	2030      	movs	r0, #48	; 0x30
 80007c8:	f7ff ff80 	bl	80006cc <lcd_write>

	lcd_write(CMD_4_BIT_INIT, bl);
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	0019      	movs	r1, r3
 80007d2:	2002      	movs	r0, #2
 80007d4:	f7ff ff7a 	bl	80006cc <lcd_write>
	lcd_write(CURSOR_OFF_BLINKING_OFF, bl);
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	0019      	movs	r1, r3
 80007de:	200c      	movs	r0, #12
 80007e0:	f7ff ff74 	bl	80006cc <lcd_write>
	lcd_write(CMD_LCD_CLEAR, bl);
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	0019      	movs	r1, r3
 80007ea:	2001      	movs	r0, #1
 80007ec:	f7ff ff6e 	bl	80006cc <lcd_write>
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b005      	add	sp, #20
 80007f6:	bd90      	pop	{r4, r7, pc}

080007f8 <lcd_clear>:

/*
 * Function which clears LCD display
 */
void lcd_clear(lcd_display* lcd)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	uint8_t bl = 0;
 8000800:	230f      	movs	r3, #15
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
	if(lcd->backlight)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d003      	beq.n	8000818 <lcd_clear+0x20>
	{
		bl = BL_PIN;
 8000810:	230f      	movs	r3, #15
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	2208      	movs	r2, #8
 8000816:	701a      	strb	r2, [r3, #0]
	}

	lcd_write(CMD_LCD_CLEAR, bl);
 8000818:	230f      	movs	r3, #15
 800081a:	18fb      	adds	r3, r7, r3
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	0019      	movs	r1, r3
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff ff53 	bl	80006cc <lcd_write>
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b004      	add	sp, #16
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <lcd_update>:

/*
 * Function which sends information contained in lcd_display struct to lcd display
 */
void lcd_update(lcd_display* lcd)
{
 8000830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000832:	b087      	sub	sp, #28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	uint8_t bl = 0;
 8000838:	2317      	movs	r3, #23
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
	if(lcd->backlight)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d003      	beq.n	8000850 <lcd_update+0x20>
	{
		bl = BL_PIN;
 8000848:	2317      	movs	r3, #23
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	2208      	movs	r2, #8
 800084e:	701a      	strb	r2, [r3, #0]
	}

	lcd_clear(lcd);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	0018      	movs	r0, r3
 8000854:	f7ff ffd0 	bl	80007f8 <lcd_clear>

	lcd_write(FIRST_LINE, bl);
 8000858:	2317      	movs	r3, #23
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	0019      	movs	r1, r3
 8000860:	2080      	movs	r0, #128	; 0x80
 8000862:	f7ff ff33 	bl	80006cc <lcd_write>
	for(int i = 0; i < fmin(strlen(lcd->line_1st), LINE_LEN); i++)
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	e010      	b.n	800088e <lcd_update+0x5e>
	{
		lcd_write(lcd->line_1st[i] , (bl | RS_PIN));
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	18d3      	adds	r3, r2, r3
 8000872:	3301      	adds	r3, #1
 8000874:	7818      	ldrb	r0, [r3, #0]
 8000876:	2317      	movs	r3, #23
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2201      	movs	r2, #1
 800087e:	4313      	orrs	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	0019      	movs	r1, r3
 8000884:	f7ff ff22 	bl	80006cc <lcd_write>
	for(int i = 0; i < fmin(strlen(lcd->line_1st), LINE_LEN); i++)
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	3301      	adds	r3, #1
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	6938      	ldr	r0, [r7, #16]
 8000890:	f7ff fe14 	bl	80004bc <__aeabi_i2d>
 8000894:	0005      	movs	r5, r0
 8000896:	000e      	movs	r6, r1
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff fc33 	bl	8000108 <strlen>
 80008a2:	0003      	movs	r3, r0
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff fe43 	bl	8000530 <__aeabi_ui2d>
 80008aa:	2300      	movs	r3, #0
 80008ac:	4c25      	ldr	r4, [pc, #148]	; (8000944 <lcd_update+0x114>)
 80008ae:	001a      	movs	r2, r3
 80008b0:	0023      	movs	r3, r4
 80008b2:	f002 f885 	bl	80029c0 <fmin>
 80008b6:	0003      	movs	r3, r0
 80008b8:	000c      	movs	r4, r1
 80008ba:	001a      	movs	r2, r3
 80008bc:	0023      	movs	r3, r4
 80008be:	0028      	movs	r0, r5
 80008c0:	0031      	movs	r1, r6
 80008c2:	f7ff fccb 	bl	800025c <__aeabi_dcmplt>
 80008c6:	1e03      	subs	r3, r0, #0
 80008c8:	d1d0      	bne.n	800086c <lcd_update+0x3c>
	}

	lcd_write(SECOND_LINE, bl);
 80008ca:	2317      	movs	r3, #23
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	0019      	movs	r1, r3
 80008d2:	20c0      	movs	r0, #192	; 0xc0
 80008d4:	f7ff fefa 	bl	80006cc <lcd_write>
	for(int i = 0; i < fmin(strlen(lcd->line_2nd), LINE_LEN); i++)
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	e010      	b.n	8000900 <lcd_update+0xd0>
	{
		lcd_write(lcd->line_2nd[i] , (bl | RS_PIN));
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	3312      	adds	r3, #18
 80008e6:	7818      	ldrb	r0, [r3, #0]
 80008e8:	2317      	movs	r3, #23
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2201      	movs	r2, #1
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	0019      	movs	r1, r3
 80008f6:	f7ff fee9 	bl	80006cc <lcd_write>
	for(int i = 0; i < fmin(strlen(lcd->line_2nd), LINE_LEN); i++)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f7ff fddb 	bl	80004bc <__aeabi_i2d>
 8000906:	0005      	movs	r5, r0
 8000908:	000e      	movs	r6, r1
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3312      	adds	r3, #18
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff fbfa 	bl	8000108 <strlen>
 8000914:	0003      	movs	r3, r0
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fe0a 	bl	8000530 <__aeabi_ui2d>
 800091c:	2300      	movs	r3, #0
 800091e:	4c09      	ldr	r4, [pc, #36]	; (8000944 <lcd_update+0x114>)
 8000920:	001a      	movs	r2, r3
 8000922:	0023      	movs	r3, r4
 8000924:	f002 f84c 	bl	80029c0 <fmin>
 8000928:	0003      	movs	r3, r0
 800092a:	000c      	movs	r4, r1
 800092c:	001a      	movs	r2, r3
 800092e:	0023      	movs	r3, r4
 8000930:	0028      	movs	r0, r5
 8000932:	0031      	movs	r1, r6
 8000934:	f7ff fc92 	bl	800025c <__aeabi_dcmplt>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d1d0      	bne.n	80008de <lcd_update+0xae>
	}
}
 800093c:	46c0      	nop			; (mov r8, r8)
 800093e:	46bd      	mov	sp, r7
 8000940:	b007      	add	sp, #28
 8000942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000944:	40300000 	.word	0x40300000

08000948 <main>:
	}
	return bcd_number;
}

int main(void)
{
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	b099      	sub	sp, #100	; 0x64
 800094c:	af02      	add	r7, sp, #8
	RTC_time time_write = {0};
 800094e:	2454      	movs	r4, #84	; 0x54
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2303      	movs	r3, #3
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f001 fc21 	bl	80021a0 <memset>
	RTC_time time_read = {0};
 800095e:	2550      	movs	r5, #80	; 0x50
 8000960:	197b      	adds	r3, r7, r5
 8000962:	0018      	movs	r0, r3
 8000964:	2303      	movs	r3, #3
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f001 fc19 	bl	80021a0 <memset>
	lcd_display disp;

	char buffer1[17];
	char buffer2[17];

	disp.backlight = 1;
 800096e:	262c      	movs	r6, #44	; 0x2c
 8000970:	19bb      	adds	r3, r7, r6
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
	time_write.hours = 5;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2205      	movs	r2, #5
 800097a:	709a      	strb	r2, [r3, #2]
	time_write.minutes = 6;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	2206      	movs	r2, #6
 8000980:	705a      	strb	r2, [r3, #1]
	time_write.seconds = 7;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2207      	movs	r2, #7
 8000986:	701a      	strb	r2, [r3, #0]

	HAL_Init();
 8000988:	f000 fa90 	bl	8000eac <HAL_Init>

	i2c1_init();
 800098c:	f7ff fe20 	bl	80005d0 <i2c1_init>
	i2c2_init();
 8000990:	f7ff fe56 	bl	8000640 <i2c2_init>

	lcd_init(&disp);
 8000994:	19bb      	adds	r3, r7, r6
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff feec 	bl	8000774 <lcd_init>

//	uint8_t num1 = bin_to_bcd(7);
//	uint8_t num2 = bin_to_bcd(17);
//	uint8_t num3 = bin_to_bcd(45);

	rtc_set_time(&time_write);
 800099c:	193b      	adds	r3, r7, r4
 800099e:	0018      	movs	r0, r3
 80009a0:	f000 f8fa 	bl	8000b98 <rtc_set_time>

	time_read = rtc_get_time();
 80009a4:	f000 f926 	bl	8000bf4 <rtc_get_time>
 80009a8:	0003      	movs	r3, r0
 80009aa:	001a      	movs	r2, r3
 80009ac:	197b      	adds	r3, r7, r5
 80009ae:	1c11      	adds	r1, r2, #0
 80009b0:	7019      	strb	r1, [r3, #0]
 80009b2:	0411      	lsls	r1, r2, #16
 80009b4:	0e09      	lsrs	r1, r1, #24
 80009b6:	7059      	strb	r1, [r3, #1]
 80009b8:	0212      	lsls	r2, r2, #8
 80009ba:	0e12      	lsrs	r2, r2, #24
 80009bc:	709a      	strb	r2, [r3, #2]

	sprintf(buffer1, "%d:%d:%d", time_write.hours, time_write.minutes, time_write.seconds);
 80009be:	0021      	movs	r1, r4
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	789b      	ldrb	r3, [r3, #2]
 80009c4:	001a      	movs	r2, r3
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	785b      	ldrb	r3, [r3, #1]
 80009ca:	001c      	movs	r4, r3
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4914      	ldr	r1, [pc, #80]	; (8000a24 <main+0xdc>)
 80009d2:	2018      	movs	r0, #24
 80009d4:	1838      	adds	r0, r7, r0
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	0023      	movs	r3, r4
 80009da:	f001 fbe9 	bl	80021b0 <siprintf>
	sprintf(buffer2, "%d:%d:%d", time_read.hours, time_read.minutes, time_read.seconds);
 80009de:	197b      	adds	r3, r7, r5
 80009e0:	789b      	ldrb	r3, [r3, #2]
 80009e2:	001a      	movs	r2, r3
 80009e4:	197b      	adds	r3, r7, r5
 80009e6:	785b      	ldrb	r3, [r3, #1]
 80009e8:	001c      	movs	r4, r3
 80009ea:	197b      	adds	r3, r7, r5
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	490d      	ldr	r1, [pc, #52]	; (8000a24 <main+0xdc>)
 80009f0:	1d38      	adds	r0, r7, #4
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	0023      	movs	r3, r4
 80009f6:	f001 fbdb 	bl	80021b0 <siprintf>
	//sprintf(buffer, "%d:%d:%d", bcd_to_bin(num1), bcd_to_bin(num2), bcd_to_bin(num3));

	sprintf(disp.line_1st, buffer1);
 80009fa:	2018      	movs	r0, #24
 80009fc:	183a      	adds	r2, r7, r0
 80009fe:	19bb      	adds	r3, r7, r6
 8000a00:	3301      	adds	r3, #1
 8000a02:	0011      	movs	r1, r2
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 fbd3 	bl	80021b0 <siprintf>
	sprintf(disp.line_2nd, buffer2);
 8000a0a:	1d3a      	adds	r2, r7, #4
 8000a0c:	19bb      	adds	r3, r7, r6
 8000a0e:	3312      	adds	r3, #18
 8000a10:	0011      	movs	r1, r2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 fbcc 	bl	80021b0 <siprintf>



	lcd_update(&disp);
 8000a18:	19bb      	adds	r3, r7, r6
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff ff08 	bl	8000830 <lcd_update>

  while (1)
 8000a20:	e7fe      	b.n	8000a20 <main+0xd8>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	08002a60 	.word	0x08002a60

08000a28 <error_handler>:
  }

}

void error_handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <error_handler+0x4>
	...

08000a30 <HAL_MspInit>:
#include "main.h"


void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_MspInit+0x44>)
 8000a38:	699a      	ldr	r2, [r3, #24]
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	619a      	str	r2, [r3, #24]
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_MspInit+0x44>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	2201      	movs	r2, #1
 8000a48:	4013      	ands	r3, r2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x44>)
 8000a50:	69da      	ldr	r2, [r3, #28]
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_MspInit+0x44>)
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	0549      	lsls	r1, r1, #21
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	61da      	str	r2, [r3, #28]
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_MspInit+0x44>)
 8000a5e:	69da      	ldr	r2, [r3, #28]
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	055b      	lsls	r3, r3, #21
 8000a64:	4013      	ands	r3, r2
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]
}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b090      	sub	sp, #64	; 0x40
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_i2c1 = {0};
 8000a80:	232c      	movs	r3, #44	; 0x2c
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f001 fb88 	bl	80021a0 <memset>
	GPIO_InitTypeDef GPIO_i2c2 = {0};
 8000a90:	2318      	movs	r3, #24
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	0018      	movs	r0, r3
 8000a96:	2314      	movs	r3, #20
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f001 fb80 	bl	80021a0 <memset>

	if(hi2c->Instance == I2C1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a38      	ldr	r2, [pc, #224]	; (8000b88 <HAL_I2C_MspInit+0x110>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d131      	bne.n	8000b0e <HAL_I2C_MspInit+0x96>
		/*
		 * PB6 --> I2C1_SCL
		 * PB7 --> I2C1_SDA
		 */

		__I2C1_CLK_ENABLE();
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000aac:	69da      	ldr	r2, [r3, #28]
 8000aae:	4b37      	ldr	r3, [pc, #220]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0389      	lsls	r1, r1, #14
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	61da      	str	r2, [r3, #28]
 8000ab8:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000aba:	69da      	ldr	r2, [r3, #28]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	039b      	lsls	r3, r3, #14
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
		__GPIOB_CLK_ENABLE();
 8000ac6:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000ac8:	695a      	ldr	r2, [r3, #20]
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	02c9      	lsls	r1, r1, #11
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	02db      	lsls	r3, r3, #11
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

		GPIO_i2c1.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000ae2:	212c      	movs	r1, #44	; 0x2c
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	22c0      	movs	r2, #192	; 0xc0
 8000ae8:	601a      	str	r2, [r3, #0]
		GPIO_i2c1.Pull = GPIO_NOPULL;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
		GPIO_i2c1.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2201      	movs	r2, #1
 8000af4:	60da      	str	r2, [r3, #12]
		GPIO_i2c1.Mode = GPIO_MODE_AF_OD;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2212      	movs	r2, #18
 8000afa:	605a      	str	r2, [r3, #4]
		GPIO_i2c1.Alternate = GPIO_AF1_I2C1;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2201      	movs	r2, #1
 8000b00:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_i2c1);
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <HAL_I2C_MspInit+0x118>)
 8000b06:	0019      	movs	r1, r3
 8000b08:	0010      	movs	r0, r2
 8000b0a:	f000 fb09 	bl	8001120 <HAL_GPIO_Init>
	}

	if(hi2c->Instance == I2C2)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a20      	ldr	r2, [pc, #128]	; (8000b94 <HAL_I2C_MspInit+0x11c>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d132      	bne.n	8000b7e <HAL_I2C_MspInit+0x106>
		/*
		 * PB13 --> I2C2_SCL
		 * PB14 --> I2C2_SDA
		 */

		__I2C2_CLK_ENABLE();
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000b1a:	69da      	ldr	r2, [r3, #28]
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000b1e:	2180      	movs	r1, #128	; 0x80
 8000b20:	03c9      	lsls	r1, r1, #15
 8000b22:	430a      	orrs	r2, r1
 8000b24:	61da      	str	r2, [r3, #28]
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000b28:	69da      	ldr	r2, [r3, #28]
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	03db      	lsls	r3, r3, #15
 8000b2e:	4013      	ands	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
		__GPIOB_CLK_ENABLE();
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000b36:	695a      	ldr	r2, [r3, #20]
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000b3a:	2180      	movs	r1, #128	; 0x80
 8000b3c:	02c9      	lsls	r1, r1, #11
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	615a      	str	r2, [r3, #20]
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_I2C_MspInit+0x114>)
 8000b44:	695a      	ldr	r2, [r3, #20]
 8000b46:	2380      	movs	r3, #128	; 0x80
 8000b48:	02db      	lsls	r3, r3, #11
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]

		GPIO_i2c2.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8000b50:	2118      	movs	r1, #24
 8000b52:	187b      	adds	r3, r7, r1
 8000b54:	22c0      	movs	r2, #192	; 0xc0
 8000b56:	01d2      	lsls	r2, r2, #7
 8000b58:	601a      	str	r2, [r3, #0]
		GPIO_i2c2.Pull = GPIO_PULLUP;
 8000b5a:	187b      	adds	r3, r7, r1
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	609a      	str	r2, [r3, #8]
		GPIO_i2c2.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	2201      	movs	r2, #1
 8000b64:	60da      	str	r2, [r3, #12]
		GPIO_i2c2.Mode = GPIO_MODE_AF_OD;
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2212      	movs	r2, #18
 8000b6a:	605a      	str	r2, [r3, #4]
		GPIO_i2c2.Alternate = GPIO_AF5_I2C2;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2205      	movs	r2, #5
 8000b70:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_i2c2);
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_I2C_MspInit+0x118>)
 8000b76:	0019      	movs	r1, r3
 8000b78:	0010      	movs	r0, r2
 8000b7a:	f000 fad1 	bl	8001120 <HAL_GPIO_Init>
	}
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b010      	add	sp, #64	; 0x40
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	48000400 	.word	0x48000400
 8000b94:	40005800 	.word	0x40005800

08000b98 <rtc_set_time>:
 * @return            - None
 *
 * @Note              - This function set time in the DS3231 RTC
 */
void rtc_set_time(RTC_time *time)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	rtc_write(DS3231_RTC_SECONDS, bin_to_bcd(time->seconds));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 f8dd 	bl	8000d64 <bin_to_bcd>
 8000baa:	0003      	movs	r3, r0
 8000bac:	0019      	movs	r1, r3
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f874 	bl	8000c9c <rtc_write>
	rtc_write(DS3231_RTC_MINUTES, bin_to_bcd(time->minutes));
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	785b      	ldrb	r3, [r3, #1]
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f000 f8d3 	bl	8000d64 <bin_to_bcd>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f000 f86a 	bl	8000c9c <rtc_write>

	uint8_t hours = DS3231_RTC_24_HOURS_FORMAT | ( bin_to_bcd(time->hours) & DS3231_RTC_HOURS_MASK );
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	789b      	ldrb	r3, [r3, #2]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 f8c9 	bl	8000d64 <bin_to_bcd>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	183b      	adds	r3, r7, r0
 8000bda:	223f      	movs	r2, #63	; 0x3f
 8000bdc:	400a      	ands	r2, r1
 8000bde:	701a      	strb	r2, [r3, #0]
	rtc_write(DS3231_RTC_HOURS, hours);
 8000be0:	183b      	adds	r3, r7, r0
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	0019      	movs	r1, r3
 8000be6:	2002      	movs	r0, #2
 8000be8:	f000 f858 	bl	8000c9c <rtc_write>
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b004      	add	sp, #16
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <rtc_get_time>:
 * @return            - RTC_time structure
 *
 * @Note              - This function return time from the DS3231 RTC
 */
RTC_time rtc_get_time(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	RTC_time time;

	time.seconds = bcd_to_bin(rtc_read(DS3231_RTC_SECONDS) & DS3231_RTC_SECONDS_MASK);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f86e 	bl	8000cdc <rtc_read>
 8000c00:	0003      	movs	r3, r0
 8000c02:	001a      	movs	r2, r3
 8000c04:	237f      	movs	r3, #127	; 0x7f
 8000c06:	4013      	ands	r3, r2
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 f888 	bl	8000d20 <bcd_to_bin>
 8000c10:	0003      	movs	r3, r0
 8000c12:	001a      	movs	r2, r3
 8000c14:	003b      	movs	r3, r7
 8000c16:	701a      	strb	r2, [r3, #0]
	time.minutes = bcd_to_bin(rtc_read(DS3231_RTC_MINUTES) & DS3231_RTC_MINUTES_MASK);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 f85f 	bl	8000cdc <rtc_read>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	001a      	movs	r2, r3
 8000c22:	237f      	movs	r3, #127	; 0x7f
 8000c24:	4013      	ands	r3, r2
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f000 f879 	bl	8000d20 <bcd_to_bin>
 8000c2e:	0003      	movs	r3, r0
 8000c30:	001a      	movs	r2, r3
 8000c32:	003b      	movs	r3, r7
 8000c34:	705a      	strb	r2, [r3, #1]
	time.hours = bcd_to_bin(rtc_read(DS3231_RTC_HOURS) & DS3231_RTC_HOURS_MASK);
 8000c36:	2002      	movs	r0, #2
 8000c38:	f000 f850 	bl	8000cdc <rtc_read>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	001a      	movs	r2, r3
 8000c40:	233f      	movs	r3, #63	; 0x3f
 8000c42:	4013      	ands	r3, r2
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f86a 	bl	8000d20 <bcd_to_bin>
 8000c4c:	0003      	movs	r3, r0
 8000c4e:	001a      	movs	r2, r3
 8000c50:	003b      	movs	r3, r7
 8000c52:	709a      	strb	r2, [r3, #2]

	return time;
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	003a      	movs	r2, r7
 8000c58:	8811      	ldrh	r1, [r2, #0]
 8000c5a:	8019      	strh	r1, [r3, #0]
 8000c5c:	7892      	ldrb	r2, [r2, #2]
 8000c5e:	709a      	strb	r2, [r3, #2]
 8000c60:	1d3a      	adds	r2, r7, #4
 8000c62:	2300      	movs	r3, #0
 8000c64:	7811      	ldrb	r1, [r2, #0]
 8000c66:	20ff      	movs	r0, #255	; 0xff
 8000c68:	4001      	ands	r1, r0
 8000c6a:	20ff      	movs	r0, #255	; 0xff
 8000c6c:	4383      	bics	r3, r0
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	7851      	ldrb	r1, [r2, #1]
 8000c72:	20ff      	movs	r0, #255	; 0xff
 8000c74:	4001      	ands	r1, r0
 8000c76:	0209      	lsls	r1, r1, #8
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <rtc_get_time+0xa0>)
 8000c7a:	4003      	ands	r3, r0
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	7892      	ldrb	r2, [r2, #2]
 8000c80:	21ff      	movs	r1, #255	; 0xff
 8000c82:	400a      	ands	r2, r1
 8000c84:	0412      	lsls	r2, r2, #16
 8000c86:	4904      	ldr	r1, [pc, #16]	; (8000c98 <rtc_get_time+0xa4>)
 8000c88:	400b      	ands	r3, r1
 8000c8a:	4313      	orrs	r3, r2
}
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	ffff00ff 	.word	0xffff00ff
 8000c98:	ff00ffff 	.word	0xff00ffff

08000c9c <rtc_write>:

}


static void rtc_write(uint8_t reg, uint8_t data)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af04      	add	r7, sp, #16
 8000ca2:	0002      	movs	r2, r0
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	1dbb      	adds	r3, r7, #6
 8000caa:	1c0a      	adds	r2, r1, #0
 8000cac:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Mem_Write(&DS3231_RTC_I2C_HANDLE, DS3231_RTC_I2C_ADDR, DS3231_RTC_SECONDS, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8000cae:	480a      	ldr	r0, [pc, #40]	; (8000cd8 <rtc_write+0x3c>)
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	9302      	str	r3, [sp, #8]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	9301      	str	r3, [sp, #4]
 8000cba:	1dbb      	adds	r3, r7, #6
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	21d0      	movs	r1, #208	; 0xd0
 8000cc4:	f000 fd42 	bl	800174c <HAL_I2C_Mem_Write>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <rtc_write+0x34>
	{
		error_handler();
 8000ccc:	f7ff feac 	bl	8000a28 <error_handler>
	}
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200000e4 	.word	0x200000e4

08000cdc <rtc_read>:


static uint8_t rtc_read(uint8_t reg)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af04      	add	r7, sp, #16
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	1dfb      	adds	r3, r7, #7
 8000ce6:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;

	if(HAL_I2C_Mem_Read(&DS3231_RTC_I2C_HANDLE, DS3231_RTC_I2C_ADDR, reg, 1, &rx_data, 1, 50) != HAL_OK)
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	480b      	ldr	r0, [pc, #44]	; (8000d1c <rtc_read+0x40>)
 8000cf0:	2332      	movs	r3, #50	; 0x32
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	21d0      	movs	r1, #208	; 0xd0
 8000d02:	f000 fe51 	bl	80019a8 <HAL_I2C_Mem_Read>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <rtc_read+0x32>
	{
		error_handler();
 8000d0a:	f7ff fe8d 	bl	8000a28 <error_handler>
	}

	return rx_data;
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	781b      	ldrb	r3, [r3, #0]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b004      	add	sp, #16
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000e4 	.word	0x200000e4

08000d20 <bcd_to_bin>:

static uint8_t bcd_to_bin(uint8_t bcd_number)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	701a      	strb	r2, [r3, #0]
	uint8_t unity = bcd_number & 0x0F;
 8000d2c:	200f      	movs	r0, #15
 8000d2e:	183b      	adds	r3, r7, r0
 8000d30:	1dfa      	adds	r2, r7, #7
 8000d32:	7812      	ldrb	r2, [r2, #0]
 8000d34:	210f      	movs	r1, #15
 8000d36:	400a      	ands	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
	uint8_t dozens = (bcd_number >> 4) * 10;
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	091b      	lsrs	r3, r3, #4
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	240e      	movs	r4, #14
 8000d44:	193a      	adds	r2, r7, r4
 8000d46:	1c19      	adds	r1, r3, #0
 8000d48:	0089      	lsls	r1, r1, #2
 8000d4a:	18cb      	adds	r3, r1, r3
 8000d4c:	18db      	adds	r3, r3, r3
 8000d4e:	7013      	strb	r3, [r2, #0]

	return dozens + unity;
 8000d50:	193a      	adds	r2, r7, r4
 8000d52:	183b      	adds	r3, r7, r0
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	18d3      	adds	r3, r2, r3
 8000d5a:	b2db      	uxtb	r3, r3
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b005      	add	sp, #20
 8000d62:	bd90      	pop	{r4, r7, pc}

08000d64 <bin_to_bcd>:

static uint8_t bin_to_bcd(uint8_t bin_number)
{
 8000d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	701a      	strb	r2, [r3, #0]
	uint8_t unity = 0;
 8000d70:	230e      	movs	r3, #14
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
	uint8_t dozens = 0;
 8000d78:	230d      	movs	r3, #13
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	701a      	strb	r2, [r3, #0]
	uint8_t bcd_number = bin_number;
 8000d80:	210f      	movs	r1, #15
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	1dfa      	adds	r2, r7, #7
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	701a      	strb	r2, [r3, #0]

	if(bcd_number >= 10)
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b09      	cmp	r3, #9
 8000d90:	d91f      	bls.n	8000dd2 <bin_to_bcd+0x6e>
	{
		unity = bin_number % 10;
 8000d92:	250e      	movs	r5, #14
 8000d94:	197c      	adds	r4, r7, r5
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	210a      	movs	r1, #10
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff fa41 	bl	8000224 <__aeabi_uidivmod>
 8000da2:	000b      	movs	r3, r1
 8000da4:	7023      	strb	r3, [r4, #0]
		dozens = bin_number / 10;
 8000da6:	260d      	movs	r6, #13
 8000da8:	19bc      	adds	r4, r7, r6
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	210a      	movs	r1, #10
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff f9b1 	bl	8000118 <__udivsi3>
 8000db6:	0003      	movs	r3, r0
 8000db8:	7023      	strb	r3, [r4, #0]
		bcd_number = unity | (dozens << 4);
 8000dba:	19bb      	adds	r3, r7, r6
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	197b      	adds	r3, r7, r5
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b25a      	sxtb	r2, r3
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	701a      	strb	r2, [r3, #0]
	}
	return bcd_number;
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	781b      	ldrb	r3, [r3, #0]
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b005      	add	sp, #20
 8000dde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <_sbrk+0x5c>)
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <_sbrk+0x60>)
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <_sbrk+0x64>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	; (8000e48 <_sbrk+0x68>)
 8000e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <_sbrk+0x64>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	18d3      	adds	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d207      	bcs.n	8000e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e10:	f001 f99c 	bl	800214c <__errno>
 8000e14:	0003      	movs	r3, r0
 8000e16:	220c      	movs	r2, #12
 8000e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	e009      	b.n	8000e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e26:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <_sbrk+0x64>)
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	18d2      	adds	r2, r2, r3
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <_sbrk+0x64>)
 8000e30:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e32:	68fb      	ldr	r3, [r7, #12]
}
 8000e34:	0018      	movs	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b006      	add	sp, #24
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20004000 	.word	0x20004000
 8000e40:	00000400 	.word	0x00000400
 8000e44:	2000008c 	.word	0x2000008c
 8000e48:	20000138 	.word	0x20000138

08000e4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5e:	490e      	ldr	r1, [pc, #56]	; (8000e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <LoopForever+0xe>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e74:	4c0b      	ldr	r4, [pc, #44]	; (8000ea4 <LoopForever+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e82:	f7ff ffe3 	bl	8000e4c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e86:	f001 f967 	bl	8002158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e8a:	f7ff fd5d 	bl	8000948 <main>

08000e8e <LoopForever>:

LoopForever:
    b LoopForever
 8000e8e:	e7fe      	b.n	8000e8e <LoopForever>
  ldr   r0, =_estack
 8000e90:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e9c:	08002aa4 	.word	0x08002aa4
  ldr r2, =_sbss
 8000ea0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ea4:	20000138 	.word	0x20000138

08000ea8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC1_COMP_IRQHandler>
	...

08000eac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <HAL_Init+0x24>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_Init+0x24>)
 8000eb6:	2110      	movs	r1, #16
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 f809 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec2:	f7ff fdb5 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	0018      	movs	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40022000 	.word	0x40022000

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_InitTick+0x5c>)
 8000ede:	681c      	ldr	r4, [r3, #0]
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_InitTick+0x60>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	0019      	movs	r1, r3
 8000ee6:	23fa      	movs	r3, #250	; 0xfa
 8000ee8:	0098      	lsls	r0, r3, #2
 8000eea:	f7ff f915 	bl	8000118 <__udivsi3>
 8000eee:	0003      	movs	r3, r0
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	0020      	movs	r0, r4
 8000ef4:	f7ff f910 	bl	8000118 <__udivsi3>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 f903 	bl	8001106 <HAL_SYSTICK_Config>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e00f      	b.n	8000f28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d80b      	bhi.n	8000f26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	2301      	movs	r3, #1
 8000f12:	425b      	negs	r3, r3
 8000f14:	2200      	movs	r2, #0
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 f8e0 	bl	80010dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_InitTick+0x64>)
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b003      	add	sp, #12
 8000f2e:	bd90      	pop	{r4, r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	001a      	movs	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	18d2      	adds	r2, r2, r3
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	601a      	str	r2, [r3, #0]
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000130 	.word	0x20000130

08000f60 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	20000130 	.word	0x20000130

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fff0 	bl	8000f60 <HAL_GetTick>
 8000f80:	0003      	movs	r3, r0
 8000f82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_Delay+0x40>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	001a      	movs	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	189b      	adds	r3, r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	f7ff ffe0 	bl	8000f60 <HAL_GetTick>
 8000fa0:	0002      	movs	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b004      	add	sp, #16
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b590      	push	{r4, r7, lr}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	0002      	movs	r2, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b7f      	cmp	r3, #127	; 0x7f
 8000fcc:	d828      	bhi.n	8001020 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <__NVIC_SetPriority+0xd4>)
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b25b      	sxtb	r3, r3
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	33c0      	adds	r3, #192	; 0xc0
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	589b      	ldr	r3, [r3, r2]
 8000fde:	1dfa      	adds	r2, r7, #7
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	00d2      	lsls	r2, r2, #3
 8000fea:	21ff      	movs	r1, #255	; 0xff
 8000fec:	4091      	lsls	r1, r2
 8000fee:	000a      	movs	r2, r1
 8000ff0:	43d2      	mvns	r2, r2
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	22ff      	movs	r2, #255	; 0xff
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	0018      	movs	r0, r3
 8001004:	2303      	movs	r3, #3
 8001006:	4003      	ands	r3, r0
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800100c:	481f      	ldr	r0, [pc, #124]	; (800108c <__NVIC_SetPriority+0xd4>)
 800100e:	1dfb      	adds	r3, r7, #7
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	430a      	orrs	r2, r1
 8001018:	33c0      	adds	r3, #192	; 0xc0
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800101e:	e031      	b.n	8001084 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001020:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <__NVIC_SetPriority+0xd8>)
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	0019      	movs	r1, r3
 8001028:	230f      	movs	r3, #15
 800102a:	400b      	ands	r3, r1
 800102c:	3b08      	subs	r3, #8
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3306      	adds	r3, #6
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	18d3      	adds	r3, r2, r3
 8001036:	3304      	adds	r3, #4
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	1dfa      	adds	r2, r7, #7
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	0011      	movs	r1, r2
 8001040:	2203      	movs	r2, #3
 8001042:	400a      	ands	r2, r1
 8001044:	00d2      	lsls	r2, r2, #3
 8001046:	21ff      	movs	r1, #255	; 0xff
 8001048:	4091      	lsls	r1, r2
 800104a:	000a      	movs	r2, r1
 800104c:	43d2      	mvns	r2, r2
 800104e:	401a      	ands	r2, r3
 8001050:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	019b      	lsls	r3, r3, #6
 8001056:	22ff      	movs	r2, #255	; 0xff
 8001058:	401a      	ands	r2, r3
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	0018      	movs	r0, r3
 8001060:	2303      	movs	r3, #3
 8001062:	4003      	ands	r3, r0
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <__NVIC_SetPriority+0xd8>)
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	001c      	movs	r4, r3
 8001070:	230f      	movs	r3, #15
 8001072:	4023      	ands	r3, r4
 8001074:	3b08      	subs	r3, #8
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	430a      	orrs	r2, r1
 800107a:	3306      	adds	r3, #6
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	18c3      	adds	r3, r0, r3
 8001080:	3304      	adds	r3, #4
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b003      	add	sp, #12
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <SysTick_Config+0x40>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d901      	bls.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e010      	b.n	80010cc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <SysTick_Config+0x44>)
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	3a01      	subs	r2, #1
 80010b0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	2301      	movs	r3, #1
 80010b4:	425b      	negs	r3, r3
 80010b6:	2103      	movs	r1, #3
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff ff7d 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SysTick_Config+0x44>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x44>)
 80010c6:	2207      	movs	r2, #7
 80010c8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b002      	add	sp, #8
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	00ffffff 	.word	0x00ffffff
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	210f      	movs	r1, #15
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	1c02      	adds	r2, r0, #0
 80010ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	0011      	movs	r1, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ff5d 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	46bd      	mov	sp, r7
 8001102:	b004      	add	sp, #16
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff ffbf 	bl	8001094 <SysTick_Config>
 8001116:	0003      	movs	r3, r0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	e155      	b.n	80013dc <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2101      	movs	r1, #1
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <HAL_GPIO_Init+0x28>
 8001146:	e146      	b.n	80013d6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	4013      	ands	r3, r2
 8001150:	2b01      	cmp	r3, #1
 8001152:	d005      	beq.n	8001160 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2203      	movs	r2, #3
 800115a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800115c:	2b02      	cmp	r3, #2
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	43da      	mvns	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	409a      	lsls	r2, r3
 8001182:	0013      	movs	r3, r2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	43da      	mvns	r2, r3
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	2201      	movs	r2, #1
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
 80011b4:	0013      	movs	r3, r2
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d017      	beq.n	80011fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	409a      	lsls	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2203      	movs	r2, #3
 8001204:	4013      	ands	r3, r2
 8001206:	2b02      	cmp	r3, #2
 8001208:	d123      	bne.n	8001252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	08da      	lsrs	r2, r3, #3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3208      	adds	r2, #8
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	58d3      	ldr	r3, [r2, r3]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2207      	movs	r2, #7
 800121c:	4013      	ands	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691a      	ldr	r2, [r3, #16]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2107      	movs	r1, #7
 8001236:	400b      	ands	r3, r1
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	6939      	ldr	r1, [r7, #16]
 8001250:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	43da      	mvns	r2, r3
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2203      	movs	r2, #3
 8001270:	401a      	ands	r2, r3
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	23c0      	movs	r3, #192	; 0xc0
 800128c:	029b      	lsls	r3, r3, #10
 800128e:	4013      	ands	r3, r2
 8001290:	d100      	bne.n	8001294 <HAL_GPIO_Init+0x174>
 8001292:	e0a0      	b.n	80013d6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	4b57      	ldr	r3, [pc, #348]	; (80013f4 <HAL_GPIO_Init+0x2d4>)
 8001296:	699a      	ldr	r2, [r3, #24]
 8001298:	4b56      	ldr	r3, [pc, #344]	; (80013f4 <HAL_GPIO_Init+0x2d4>)
 800129a:	2101      	movs	r1, #1
 800129c:	430a      	orrs	r2, r1
 800129e:	619a      	str	r2, [r3, #24]
 80012a0:	4b54      	ldr	r3, [pc, #336]	; (80013f4 <HAL_GPIO_Init+0x2d4>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4013      	ands	r3, r2
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ac:	4a52      	ldr	r2, [pc, #328]	; (80013f8 <HAL_GPIO_Init+0x2d8>)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	589b      	ldr	r3, [r3, r2]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2203      	movs	r2, #3
 80012be:	4013      	ands	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	220f      	movs	r2, #15
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	2390      	movs	r3, #144	; 0x90
 80012d4:	05db      	lsls	r3, r3, #23
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x1ee>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a47      	ldr	r2, [pc, #284]	; (80013fc <HAL_GPIO_Init+0x2dc>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x1ea>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a46      	ldr	r2, [pc, #280]	; (8001400 <HAL_GPIO_Init+0x2e0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x1e6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <HAL_GPIO_Init+0x2e4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x1e2>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a44      	ldr	r2, [pc, #272]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x1de>
 80012fa:	2304      	movs	r3, #4
 80012fc:	e008      	b.n	8001310 <HAL_GPIO_Init+0x1f0>
 80012fe:	2305      	movs	r3, #5
 8001300:	e006      	b.n	8001310 <HAL_GPIO_Init+0x1f0>
 8001302:	2303      	movs	r3, #3
 8001304:	e004      	b.n	8001310 <HAL_GPIO_Init+0x1f0>
 8001306:	2302      	movs	r3, #2
 8001308:	e002      	b.n	8001310 <HAL_GPIO_Init+0x1f0>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <HAL_GPIO_Init+0x1f0>
 800130e:	2300      	movs	r3, #0
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	2103      	movs	r1, #3
 8001314:	400a      	ands	r2, r1
 8001316:	0092      	lsls	r2, r2, #2
 8001318:	4093      	lsls	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001320:	4935      	ldr	r1, [pc, #212]	; (80013f8 <HAL_GPIO_Init+0x2d8>)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	3302      	adds	r3, #2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800132e:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_GPIO_Init+0x2ec>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	2380      	movs	r3, #128	; 0x80
 8001344:	025b      	lsls	r3, r3, #9
 8001346:	4013      	ands	r3, r2
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001352:	4b2e      	ldr	r3, [pc, #184]	; (800140c <HAL_GPIO_Init+0x2ec>)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <HAL_GPIO_Init+0x2ec>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	029b      	lsls	r3, r3, #10
 8001370:	4013      	ands	r3, r2
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800137c:	4b23      	ldr	r3, [pc, #140]	; (800140c <HAL_GPIO_Init+0x2ec>)
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_GPIO_Init+0x2ec>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43da      	mvns	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	035b      	lsls	r3, r3, #13
 800139a:	4013      	ands	r3, r2
 800139c:	d003      	beq.n	80013a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_GPIO_Init+0x2ec>)
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013ac:	4b17      	ldr	r3, [pc, #92]	; (800140c <HAL_GPIO_Init+0x2ec>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	43da      	mvns	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	039b      	lsls	r3, r3, #14
 80013c4:	4013      	ands	r3, r2
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_GPIO_Init+0x2ec>)
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	40da      	lsrs	r2, r3
 80013e4:	1e13      	subs	r3, r2, #0
 80013e6:	d000      	beq.n	80013ea <HAL_GPIO_Init+0x2ca>
 80013e8:	e6a2      	b.n	8001130 <HAL_GPIO_Init+0x10>
  } 
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b006      	add	sp, #24
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800
 8001404:	48000c00 	.word	0x48000c00
 8001408:	48001000 	.word	0x48001000
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e082      	b.n	8001528 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2241      	movs	r2, #65	; 0x41
 8001426:	5c9b      	ldrb	r3, [r3, r2]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d107      	bne.n	800143e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2240      	movs	r2, #64	; 0x40
 8001432:	2100      	movs	r1, #0
 8001434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff fb1d 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2241      	movs	r2, #65	; 0x41
 8001442:	2124      	movs	r1, #36	; 0x24
 8001444:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2101      	movs	r1, #1
 8001452:	438a      	bics	r2, r1
 8001454:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4934      	ldr	r1, [pc, #208]	; (8001530 <HAL_I2C_Init+0x120>)
 8001460:	400a      	ands	r2, r1
 8001462:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4931      	ldr	r1, [pc, #196]	; (8001534 <HAL_I2C_Init+0x124>)
 8001470:	400a      	ands	r2, r1
 8001472:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d108      	bne.n	800148e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	0209      	lsls	r1, r1, #8
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e007      	b.n	800149e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2184      	movs	r1, #132	; 0x84
 8001498:	0209      	lsls	r1, r1, #8
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d104      	bne.n	80014b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	491f      	ldr	r1, [pc, #124]	; (8001538 <HAL_I2C_Init+0x128>)
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	491a      	ldr	r1, [pc, #104]	; (8001534 <HAL_I2C_Init+0x124>)
 80014cc:	400a      	ands	r2, r1
 80014ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691a      	ldr	r2, [r3, #16]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	431a      	orrs	r2, r3
 80014da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	430a      	orrs	r2, r1
 80014e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69d9      	ldr	r1, [r3, #28]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1a      	ldr	r2, [r3, #32]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2241      	movs	r2, #65	; 0x41
 8001514:	2120      	movs	r1, #32
 8001516:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2242      	movs	r2, #66	; 0x42
 8001522:	2100      	movs	r1, #0
 8001524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}
 8001530:	f0ffffff 	.word	0xf0ffffff
 8001534:	ffff7fff 	.word	0xffff7fff
 8001538:	02008000 	.word	0x02008000

0800153c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af02      	add	r7, sp, #8
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	0008      	movs	r0, r1
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	0019      	movs	r1, r3
 800154a:	230a      	movs	r3, #10
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	1c02      	adds	r2, r0, #0
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	2308      	movs	r3, #8
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	1c0a      	adds	r2, r1, #0
 8001558:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2241      	movs	r2, #65	; 0x41
 800155e:	5c9b      	ldrb	r3, [r3, r2]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b20      	cmp	r3, #32
 8001564:	d000      	beq.n	8001568 <HAL_I2C_Master_Transmit+0x2c>
 8001566:	e0e7      	b.n	8001738 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	5c9b      	ldrb	r3, [r3, r2]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_I2C_Master_Transmit+0x3a>
 8001572:	2302      	movs	r3, #2
 8001574:	e0e1      	b.n	800173a <HAL_I2C_Master_Transmit+0x1fe>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2240      	movs	r2, #64	; 0x40
 800157a:	2101      	movs	r1, #1
 800157c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800157e:	f7ff fcef 	bl	8000f60 <HAL_GetTick>
 8001582:	0003      	movs	r3, r0
 8001584:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	0219      	lsls	r1, r3, #8
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2319      	movs	r3, #25
 8001592:	2201      	movs	r2, #1
 8001594:	f000 fc24 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 8001598:	1e03      	subs	r3, r0, #0
 800159a:	d001      	beq.n	80015a0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0cc      	b.n	800173a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2241      	movs	r2, #65	; 0x41
 80015a4:	2121      	movs	r1, #33	; 0x21
 80015a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	2242      	movs	r2, #66	; 0x42
 80015ac:	2110      	movs	r1, #16
 80015ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2208      	movs	r2, #8
 80015c0:	18ba      	adds	r2, r7, r2
 80015c2:	8812      	ldrh	r2, [r2, #0]
 80015c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2bff      	cmp	r3, #255	; 0xff
 80015d4:	d911      	bls.n	80015fa <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	22ff      	movs	r2, #255	; 0xff
 80015da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	045c      	lsls	r4, r3, #17
 80015e6:	230a      	movs	r3, #10
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	8819      	ldrh	r1, [r3, #0]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	4b55      	ldr	r3, [pc, #340]	; (8001744 <HAL_I2C_Master_Transmit+0x208>)
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	0023      	movs	r3, r4
 80015f4:	f000 fd28 	bl	8002048 <I2C_TransferConfig>
 80015f8:	e075      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fe:	b29a      	uxth	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001608:	b2da      	uxtb	r2, r3
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	049c      	lsls	r4, r3, #18
 800160e:	230a      	movs	r3, #10
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	8819      	ldrh	r1, [r3, #0]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_I2C_Master_Transmit+0x208>)
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	0023      	movs	r3, r4
 800161c:	f000 fd14 	bl	8002048 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001620:	e061      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	0018      	movs	r0, r3
 800162a:	f000 fc18 	bl	8001e5e <I2C_WaitOnTXISFlagUntilTimeout>
 800162e:	1e03      	subs	r3, r0, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e081      	b.n	800173a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	1c5a      	adds	r2, r3, #1
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001650:	b29b      	uxth	r3, r3
 8001652:	3b01      	subs	r3, #1
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d03a      	beq.n	80016e6 <HAL_I2C_Master_Transmit+0x1aa>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	d136      	bne.n	80016e6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001678:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	0013      	movs	r3, r2
 8001682:	2200      	movs	r2, #0
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	f000 fbab 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 800168a:	1e03      	subs	r3, r0, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e053      	b.n	800173a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001696:	b29b      	uxth	r3, r3
 8001698:	2bff      	cmp	r3, #255	; 0xff
 800169a:	d911      	bls.n	80016c0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	22ff      	movs	r2, #255	; 0xff
 80016a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	045c      	lsls	r4, r3, #17
 80016ac:	230a      	movs	r3, #10
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	8819      	ldrh	r1, [r3, #0]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	2300      	movs	r3, #0
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	0023      	movs	r3, r4
 80016ba:	f000 fcc5 	bl	8002048 <I2C_TransferConfig>
 80016be:	e012      	b.n	80016e6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	049c      	lsls	r4, r3, #18
 80016d4:	230a      	movs	r3, #10
 80016d6:	18fb      	adds	r3, r7, r3
 80016d8:	8819      	ldrh	r1, [r3, #0]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	2300      	movs	r3, #0
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	0023      	movs	r3, r4
 80016e2:	f000 fcb1 	bl	8002048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d198      	bne.n	8001622 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 fbf0 	bl	8001edc <I2C_WaitOnSTOPFlagUntilTimeout>
 80016fc:	1e03      	subs	r3, r0, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e01a      	b.n	800173a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2220      	movs	r2, #32
 800170a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	490c      	ldr	r1, [pc, #48]	; (8001748 <HAL_I2C_Master_Transmit+0x20c>)
 8001718:	400a      	ands	r2, r1
 800171a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2241      	movs	r2, #65	; 0x41
 8001720:	2120      	movs	r1, #32
 8001722:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2242      	movs	r2, #66	; 0x42
 8001728:	2100      	movs	r1, #0
 800172a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2240      	movs	r2, #64	; 0x40
 8001730:	2100      	movs	r1, #0
 8001732:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	e000      	b.n	800173a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001738:	2302      	movs	r3, #2
  }
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b007      	add	sp, #28
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	80002000 	.word	0x80002000
 8001748:	fe00e800 	.word	0xfe00e800

0800174c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b089      	sub	sp, #36	; 0x24
 8001750:	af02      	add	r7, sp, #8
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	000c      	movs	r4, r1
 8001756:	0010      	movs	r0, r2
 8001758:	0019      	movs	r1, r3
 800175a:	230a      	movs	r3, #10
 800175c:	18fb      	adds	r3, r7, r3
 800175e:	1c22      	adds	r2, r4, #0
 8001760:	801a      	strh	r2, [r3, #0]
 8001762:	2308      	movs	r3, #8
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	1c02      	adds	r2, r0, #0
 8001768:	801a      	strh	r2, [r3, #0]
 800176a:	1dbb      	adds	r3, r7, #6
 800176c:	1c0a      	adds	r2, r1, #0
 800176e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2241      	movs	r2, #65	; 0x41
 8001774:	5c9b      	ldrb	r3, [r3, r2]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b20      	cmp	r3, #32
 800177a:	d000      	beq.n	800177e <HAL_I2C_Mem_Write+0x32>
 800177c:	e10c      	b.n	8001998 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_I2C_Mem_Write+0x42>
 8001784:	232c      	movs	r3, #44	; 0x2c
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d105      	bne.n	800179a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0ff      	b.n	800199a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2240      	movs	r2, #64	; 0x40
 800179e:	5c9b      	ldrb	r3, [r3, r2]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_I2C_Mem_Write+0x5c>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e0f8      	b.n	800199a <HAL_I2C_Mem_Write+0x24e>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	2101      	movs	r1, #1
 80017ae:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017b0:	f7ff fbd6 	bl	8000f60 <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	0219      	lsls	r1, r3, #8
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	2319      	movs	r3, #25
 80017c4:	2201      	movs	r2, #1
 80017c6:	f000 fb0b 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 80017ca:	1e03      	subs	r3, r0, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0e3      	b.n	800199a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2241      	movs	r2, #65	; 0x41
 80017d6:	2121      	movs	r1, #33	; 0x21
 80017d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2242      	movs	r2, #66	; 0x42
 80017de:	2140      	movs	r1, #64	; 0x40
 80017e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	222c      	movs	r2, #44	; 0x2c
 80017f2:	18ba      	adds	r2, r7, r2
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017fe:	1dbb      	adds	r3, r7, #6
 8001800:	881c      	ldrh	r4, [r3, #0]
 8001802:	2308      	movs	r3, #8
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	230a      	movs	r3, #10
 800180a:	18fb      	adds	r3, r7, r3
 800180c:	8819      	ldrh	r1, [r3, #0]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	0023      	movs	r3, r4
 800181a:	f000 f9f9 	bl	8001c10 <I2C_RequestMemoryWrite>
 800181e:	1e03      	subs	r3, r0, #0
 8001820:	d005      	beq.n	800182e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2240      	movs	r2, #64	; 0x40
 8001826:	2100      	movs	r1, #0
 8001828:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0b5      	b.n	800199a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	2bff      	cmp	r3, #255	; 0xff
 8001836:	d911      	bls.n	800185c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	22ff      	movs	r2, #255	; 0xff
 800183c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	b2da      	uxtb	r2, r3
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	045c      	lsls	r4, r3, #17
 8001848:	230a      	movs	r3, #10
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	8819      	ldrh	r1, [r3, #0]
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	2300      	movs	r3, #0
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	0023      	movs	r3, r4
 8001856:	f000 fbf7 	bl	8002048 <I2C_TransferConfig>
 800185a:	e012      	b.n	8001882 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186a:	b2da      	uxtb	r2, r3
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	049c      	lsls	r4, r3, #18
 8001870:	230a      	movs	r3, #10
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	8819      	ldrh	r1, [r3, #0]
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	2300      	movs	r3, #0
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	0023      	movs	r3, r4
 800187e:	f000 fbe3 	bl	8002048 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	0018      	movs	r0, r3
 800188a:	f000 fae8 	bl	8001e5e <I2C_WaitOnTXISFlagUntilTimeout>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e081      	b.n	800199a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	1c5a      	adds	r2, r3, #1
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d03a      	beq.n	8001946 <HAL_I2C_Mem_Write+0x1fa>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d136      	bne.n	8001946 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	0013      	movs	r3, r2
 80018e2:	2200      	movs	r2, #0
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	f000 fa7b 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 80018ea:	1e03      	subs	r3, r0, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e053      	b.n	800199a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	2bff      	cmp	r3, #255	; 0xff
 80018fa:	d911      	bls.n	8001920 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	22ff      	movs	r2, #255	; 0xff
 8001900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001906:	b2da      	uxtb	r2, r3
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	045c      	lsls	r4, r3, #17
 800190c:	230a      	movs	r3, #10
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	8819      	ldrh	r1, [r3, #0]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	2300      	movs	r3, #0
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	0023      	movs	r3, r4
 800191a:	f000 fb95 	bl	8002048 <I2C_TransferConfig>
 800191e:	e012      	b.n	8001946 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29a      	uxth	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192e:	b2da      	uxtb	r2, r3
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	049c      	lsls	r4, r3, #18
 8001934:	230a      	movs	r3, #10
 8001936:	18fb      	adds	r3, r7, r3
 8001938:	8819      	ldrh	r1, [r3, #0]
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	2300      	movs	r3, #0
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	0023      	movs	r3, r4
 8001942:	f000 fb81 	bl	8002048 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d198      	bne.n	8001882 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	0018      	movs	r0, r3
 8001958:	f000 fac0 	bl	8001edc <I2C_WaitOnSTOPFlagUntilTimeout>
 800195c:	1e03      	subs	r3, r0, #0
 800195e:	d001      	beq.n	8001964 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e01a      	b.n	800199a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2220      	movs	r2, #32
 800196a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	490b      	ldr	r1, [pc, #44]	; (80019a4 <HAL_I2C_Mem_Write+0x258>)
 8001978:	400a      	ands	r2, r1
 800197a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2241      	movs	r2, #65	; 0x41
 8001980:	2120      	movs	r1, #32
 8001982:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2242      	movs	r2, #66	; 0x42
 8001988:	2100      	movs	r1, #0
 800198a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2240      	movs	r2, #64	; 0x40
 8001990:	2100      	movs	r1, #0
 8001992:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e000      	b.n	800199a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001998:	2302      	movs	r3, #2
  }
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b007      	add	sp, #28
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	fe00e800 	.word	0xfe00e800

080019a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b089      	sub	sp, #36	; 0x24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	000c      	movs	r4, r1
 80019b2:	0010      	movs	r0, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	230a      	movs	r3, #10
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	1c22      	adds	r2, r4, #0
 80019bc:	801a      	strh	r2, [r3, #0]
 80019be:	2308      	movs	r3, #8
 80019c0:	18fb      	adds	r3, r7, r3
 80019c2:	1c02      	adds	r2, r0, #0
 80019c4:	801a      	strh	r2, [r3, #0]
 80019c6:	1dbb      	adds	r3, r7, #6
 80019c8:	1c0a      	adds	r2, r1, #0
 80019ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2241      	movs	r2, #65	; 0x41
 80019d0:	5c9b      	ldrb	r3, [r3, r2]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	d000      	beq.n	80019da <HAL_I2C_Mem_Read+0x32>
 80019d8:	e110      	b.n	8001bfc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80019da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d004      	beq.n	80019ea <HAL_I2C_Mem_Read+0x42>
 80019e0:	232c      	movs	r3, #44	; 0x2c
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e103      	b.n	8001bfe <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	5c9b      	ldrb	r3, [r3, r2]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_I2C_Mem_Read+0x5c>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e0fc      	b.n	8001bfe <HAL_I2C_Mem_Read+0x256>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2240      	movs	r2, #64	; 0x40
 8001a08:	2101      	movs	r1, #1
 8001a0a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a0c:	f7ff faa8 	bl	8000f60 <HAL_GetTick>
 8001a10:	0003      	movs	r3, r0
 8001a12:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a14:	2380      	movs	r3, #128	; 0x80
 8001a16:	0219      	lsls	r1, r3, #8
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2319      	movs	r3, #25
 8001a20:	2201      	movs	r2, #1
 8001a22:	f000 f9dd 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0e7      	b.n	8001bfe <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2241      	movs	r2, #65	; 0x41
 8001a32:	2122      	movs	r1, #34	; 0x22
 8001a34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2242      	movs	r2, #66	; 0x42
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	222c      	movs	r2, #44	; 0x2c
 8001a4e:	18ba      	adds	r2, r7, r2
 8001a50:	8812      	ldrh	r2, [r2, #0]
 8001a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a5a:	1dbb      	adds	r3, r7, #6
 8001a5c:	881c      	ldrh	r4, [r3, #0]
 8001a5e:	2308      	movs	r3, #8
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	881a      	ldrh	r2, [r3, #0]
 8001a64:	230a      	movs	r3, #10
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	8819      	ldrh	r1, [r3, #0]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	0023      	movs	r3, r4
 8001a76:	f000 f92f 	bl	8001cd8 <I2C_RequestMemoryRead>
 8001a7a:	1e03      	subs	r3, r0, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	2100      	movs	r1, #0
 8001a84:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0b9      	b.n	8001bfe <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	2bff      	cmp	r3, #255	; 0xff
 8001a92:	d911      	bls.n	8001ab8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	22ff      	movs	r2, #255	; 0xff
 8001a98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	045c      	lsls	r4, r3, #17
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	8819      	ldrh	r1, [r3, #0]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <HAL_I2C_Mem_Read+0x260>)
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	0023      	movs	r3, r4
 8001ab2:	f000 fac9 	bl	8002048 <I2C_TransferConfig>
 8001ab6:	e012      	b.n	8001ade <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	049c      	lsls	r4, r3, #18
 8001acc:	230a      	movs	r3, #10
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	8819      	ldrh	r1, [r3, #0]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <HAL_I2C_Mem_Read+0x260>)
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	0023      	movs	r3, r4
 8001ada:	f000 fab5 	bl	8002048 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	0013      	movs	r3, r2
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2104      	movs	r1, #4
 8001aec:	f000 f978 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 8001af0:	1e03      	subs	r3, r0, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e082      	b.n	8001bfe <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d03a      	beq.n	8001baa <HAL_I2C_Mem_Read+0x202>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d136      	bne.n	8001baa <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	0013      	movs	r3, r2
 8001b46:	2200      	movs	r2, #0
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	f000 f949 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 8001b4e:	1e03      	subs	r3, r0, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e053      	b.n	8001bfe <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	2bff      	cmp	r3, #255	; 0xff
 8001b5e:	d911      	bls.n	8001b84 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	22ff      	movs	r2, #255	; 0xff
 8001b64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	045c      	lsls	r4, r3, #17
 8001b70:	230a      	movs	r3, #10
 8001b72:	18fb      	adds	r3, r7, r3
 8001b74:	8819      	ldrh	r1, [r3, #0]
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	0023      	movs	r3, r4
 8001b7e:	f000 fa63 	bl	8002048 <I2C_TransferConfig>
 8001b82:	e012      	b.n	8001baa <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	049c      	lsls	r4, r3, #18
 8001b98:	230a      	movs	r3, #10
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	8819      	ldrh	r1, [r3, #0]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	0023      	movs	r3, r4
 8001ba6:	f000 fa4f 	bl	8002048 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d194      	bne.n	8001ade <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f98e 	bl	8001edc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bc0:	1e03      	subs	r3, r0, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e01a      	b.n	8001bfe <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	490c      	ldr	r1, [pc, #48]	; (8001c0c <HAL_I2C_Mem_Read+0x264>)
 8001bdc:	400a      	ands	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2241      	movs	r2, #65	; 0x41
 8001be4:	2120      	movs	r1, #32
 8001be6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2242      	movs	r2, #66	; 0x42
 8001bec:	2100      	movs	r1, #0
 8001bee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2240      	movs	r2, #64	; 0x40
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
  }
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b007      	add	sp, #28
 8001c04:	bd90      	pop	{r4, r7, pc}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	80002400 	.word	0x80002400
 8001c0c:	fe00e800 	.word	0xfe00e800

08001c10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	000c      	movs	r4, r1
 8001c1a:	0010      	movs	r0, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	250a      	movs	r5, #10
 8001c20:	197b      	adds	r3, r7, r5
 8001c22:	1c22      	adds	r2, r4, #0
 8001c24:	801a      	strh	r2, [r3, #0]
 8001c26:	2308      	movs	r3, #8
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	1c02      	adds	r2, r0, #0
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	1dbb      	adds	r3, r7, #6
 8001c30:	1c0a      	adds	r2, r1, #0
 8001c32:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c34:	1dbb      	adds	r3, r7, #6
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	045c      	lsls	r4, r3, #17
 8001c3e:	197b      	adds	r3, r7, r5
 8001c40:	8819      	ldrh	r1, [r3, #0]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	4b23      	ldr	r3, [pc, #140]	; (8001cd4 <I2C_RequestMemoryWrite+0xc4>)
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	0023      	movs	r3, r4
 8001c4a:	f000 f9fd 	bl	8002048 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f000 f902 	bl	8001e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5a:	1e03      	subs	r3, r0, #0
 8001c5c:	d001      	beq.n	8001c62 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e033      	b.n	8001cca <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c62:	1dbb      	adds	r3, r7, #6
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d107      	bne.n	8001c7a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
 8001c78:	e019      	b.n	8001cae <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8e:	6a39      	ldr	r1, [r7, #32]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 f8e3 	bl	8001e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d001      	beq.n	8001ca0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e014      	b.n	8001cca <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cae:	6a3a      	ldr	r2, [r7, #32]
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	0013      	movs	r3, r2
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2180      	movs	r1, #128	; 0x80
 8001cbc:	f000 f890 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	0018      	movs	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b004      	add	sp, #16
 8001cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	80002000 	.word	0x80002000

08001cd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001cd8:	b5b0      	push	{r4, r5, r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	000c      	movs	r4, r1
 8001ce2:	0010      	movs	r0, r2
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	250a      	movs	r5, #10
 8001ce8:	197b      	adds	r3, r7, r5
 8001cea:	1c22      	adds	r2, r4, #0
 8001cec:	801a      	strh	r2, [r3, #0]
 8001cee:	2308      	movs	r3, #8
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	1c02      	adds	r2, r0, #0
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	1dbb      	adds	r3, r7, #6
 8001cf8:	1c0a      	adds	r2, r1, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001cfc:	1dbb      	adds	r3, r7, #6
 8001cfe:	881b      	ldrh	r3, [r3, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	197b      	adds	r3, r7, r5
 8001d04:	8819      	ldrh	r1, [r3, #0]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <I2C_RequestMemoryRead+0xc0>)
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f000 f99b 	bl	8002048 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d14:	6a39      	ldr	r1, [r7, #32]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f8a0 	bl	8001e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d001      	beq.n	8001d26 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e033      	b.n	8001d8e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d26:	1dbb      	adds	r3, r7, #6
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d2e:	2308      	movs	r3, #8
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d3c:	e019      	b.n	8001d72 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d3e:	2308      	movs	r3, #8
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d52:	6a39      	ldr	r1, [r7, #32]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 f881 	bl	8001e5e <I2C_WaitOnTXISFlagUntilTimeout>
 8001d5c:	1e03      	subs	r3, r0, #0
 8001d5e:	d001      	beq.n	8001d64 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e014      	b.n	8001d8e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d64:	2308      	movs	r3, #8
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d72:	6a3a      	ldr	r2, [r7, #32]
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	f000 f82e 	bl	8001de0 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	0018      	movs	r0, r3
 8001d90:	46bd      	mov	sp, r7
 8001d92:	b004      	add	sp, #16
 8001d94:	bdb0      	pop	{r4, r5, r7, pc}
 8001d96:	46c0      	nop			; (mov r8, r8)
 8001d98:	80002000 	.word	0x80002000

08001d9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d103      	bne.n	8001dba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d007      	beq.n	8001dd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	619a      	str	r2, [r3, #24]
  }
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001df0:	e021      	b.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	d01e      	beq.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df8:	f7ff f8b2 	bl	8000f60 <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d302      	bcc.n	8001e0e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d113      	bne.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	2220      	movs	r2, #32
 8001e14:	431a      	orrs	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2241      	movs	r2, #65	; 0x41
 8001e1e:	2120      	movs	r1, #32
 8001e20:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2242      	movs	r2, #66	; 0x42
 8001e26:	2100      	movs	r1, #0
 8001e28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2240      	movs	r2, #64	; 0x40
 8001e2e:	2100      	movs	r1, #0
 8001e30:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	425a      	negs	r2, r3
 8001e46:	4153      	adcs	r3, r2
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	1dfb      	adds	r3, r7, #7
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d0ce      	beq.n	8001df2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e6a:	e02b      	b.n	8001ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	0018      	movs	r0, r3
 8001e74:	f000 f86e 	bl	8001f54 <I2C_IsAcknowledgeFailed>
 8001e78:	1e03      	subs	r3, r0, #0
 8001e7a:	d001      	beq.n	8001e80 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e029      	b.n	8001ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3301      	adds	r3, #1
 8001e84:	d01e      	beq.n	8001ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e86:	f7ff f86b 	bl	8000f60 <HAL_GetTick>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d302      	bcc.n	8001e9c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d113      	bne.n	8001ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2241      	movs	r2, #65	; 0x41
 8001eac:	2120      	movs	r1, #32
 8001eae:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2242      	movs	r2, #66	; 0x42
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2240      	movs	r2, #64	; 0x40
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e007      	b.n	8001ed4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d1cc      	bne.n	8001e6c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b004      	add	sp, #16
 8001eda:	bd80      	pop	{r7, pc}

08001edc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee8:	e028      	b.n	8001f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f000 f82f 	bl	8001f54 <I2C_IsAcknowledgeFailed>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d001      	beq.n	8001efe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e026      	b.n	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001efe:	f7ff f82f 	bl	8000f60 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d302      	bcc.n	8001f14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d113      	bne.n	8001f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	2220      	movs	r2, #32
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2241      	movs	r2, #65	; 0x41
 8001f24:	2120      	movs	r1, #32
 8001f26:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2242      	movs	r2, #66	; 0x42
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2240      	movs	r2, #64	; 0x40
 8001f34:	2100      	movs	r1, #0
 8001f36:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e007      	b.n	8001f4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2220      	movs	r2, #32
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b20      	cmp	r3, #32
 8001f48:	d1cf      	bne.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b004      	add	sp, #16
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2210      	movs	r2, #16
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d164      	bne.n	8002038 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	049b      	lsls	r3, r3, #18
 8001f78:	401a      	ands	r2, r3
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	049b      	lsls	r3, r3, #18
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d02b      	beq.n	8001fda <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	01c9      	lsls	r1, r1, #7
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f94:	e021      	b.n	8001fda <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	d01e      	beq.n	8001fda <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9c:	f7fe ffe0 	bl	8000f60 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d302      	bcc.n	8001fb2 <I2C_IsAcknowledgeFailed+0x5e>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d113      	bne.n	8001fda <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2241      	movs	r2, #65	; 0x41
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2242      	movs	r2, #66	; 0x42
 8001fca:	2100      	movs	r1, #0
 8001fcc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e02f      	b.n	800203a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d1d6      	bne.n	8001f96 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2210      	movs	r2, #16
 8001fee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff fece 	bl	8001d9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	490e      	ldr	r1, [pc, #56]	; (8002044 <I2C_IsAcknowledgeFailed+0xf0>)
 800200c:	400a      	ands	r2, r1
 800200e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	2204      	movs	r2, #4
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2241      	movs	r2, #65	; 0x41
 8002020:	2120      	movs	r1, #32
 8002022:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2242      	movs	r2, #66	; 0x42
 8002028:	2100      	movs	r1, #0
 800202a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2240      	movs	r2, #64	; 0x40
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b004      	add	sp, #16
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	fe00e800 	.word	0xfe00e800

08002048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	0008      	movs	r0, r1
 8002052:	0011      	movs	r1, r2
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	240a      	movs	r4, #10
 8002058:	193b      	adds	r3, r7, r4
 800205a:	1c02      	adds	r2, r0, #0
 800205c:	801a      	strh	r2, [r3, #0]
 800205e:	2009      	movs	r0, #9
 8002060:	183b      	adds	r3, r7, r0
 8002062:	1c0a      	adds	r2, r1, #0
 8002064:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	6a3a      	ldr	r2, [r7, #32]
 800206e:	0d51      	lsrs	r1, r2, #21
 8002070:	2280      	movs	r2, #128	; 0x80
 8002072:	00d2      	lsls	r2, r2, #3
 8002074:	400a      	ands	r2, r1
 8002076:	490e      	ldr	r1, [pc, #56]	; (80020b0 <I2C_TransferConfig+0x68>)
 8002078:	430a      	orrs	r2, r1
 800207a:	43d2      	mvns	r2, r2
 800207c:	401a      	ands	r2, r3
 800207e:	0011      	movs	r1, r2
 8002080:	193b      	adds	r3, r7, r4
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	059b      	lsls	r3, r3, #22
 8002086:	0d9a      	lsrs	r2, r3, #22
 8002088:	183b      	adds	r3, r7, r0
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	0418      	lsls	r0, r3, #16
 800208e:	23ff      	movs	r3, #255	; 0xff
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	4003      	ands	r3, r0
 8002094:	431a      	orrs	r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	431a      	orrs	r2, r3
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	431a      	orrs	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b005      	add	sp, #20
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	03ff63ff 	.word	0x03ff63ff

080020b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2241      	movs	r2, #65	; 0x41
 80020c2:	5c9b      	ldrb	r3, [r3, r2]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b20      	cmp	r3, #32
 80020c8:	d138      	bne.n	800213c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2240      	movs	r2, #64	; 0x40
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e032      	b.n	800213e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2240      	movs	r2, #64	; 0x40
 80020dc:	2101      	movs	r1, #1
 80020de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2241      	movs	r2, #65	; 0x41
 80020e4:	2124      	movs	r1, #36	; 0x24
 80020e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2101      	movs	r1, #1
 80020f4:	438a      	bics	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4911      	ldr	r1, [pc, #68]	; (8002148 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2101      	movs	r1, #1
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2241      	movs	r2, #65	; 0x41
 800212c:	2120      	movs	r1, #32
 800212e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2240      	movs	r2, #64	; 0x40
 8002134:	2100      	movs	r1, #0
 8002136:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	e000      	b.n	800213e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800213c:	2302      	movs	r3, #2
  }
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	ffffefff 	.word	0xffffefff

0800214c <__errno>:
 800214c:	4b01      	ldr	r3, [pc, #4]	; (8002154 <__errno+0x8>)
 800214e:	6818      	ldr	r0, [r3, #0]
 8002150:	4770      	bx	lr
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	2000000c 	.word	0x2000000c

08002158 <__libc_init_array>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	2600      	movs	r6, #0
 800215c:	4d0c      	ldr	r5, [pc, #48]	; (8002190 <__libc_init_array+0x38>)
 800215e:	4c0d      	ldr	r4, [pc, #52]	; (8002194 <__libc_init_array+0x3c>)
 8002160:	1b64      	subs	r4, r4, r5
 8002162:	10a4      	asrs	r4, r4, #2
 8002164:	42a6      	cmp	r6, r4
 8002166:	d109      	bne.n	800217c <__libc_init_array+0x24>
 8002168:	2600      	movs	r6, #0
 800216a:	f000 fc6d 	bl	8002a48 <_init>
 800216e:	4d0a      	ldr	r5, [pc, #40]	; (8002198 <__libc_init_array+0x40>)
 8002170:	4c0a      	ldr	r4, [pc, #40]	; (800219c <__libc_init_array+0x44>)
 8002172:	1b64      	subs	r4, r4, r5
 8002174:	10a4      	asrs	r4, r4, #2
 8002176:	42a6      	cmp	r6, r4
 8002178:	d105      	bne.n	8002186 <__libc_init_array+0x2e>
 800217a:	bd70      	pop	{r4, r5, r6, pc}
 800217c:	00b3      	lsls	r3, r6, #2
 800217e:	58eb      	ldr	r3, [r5, r3]
 8002180:	4798      	blx	r3
 8002182:	3601      	adds	r6, #1
 8002184:	e7ee      	b.n	8002164 <__libc_init_array+0xc>
 8002186:	00b3      	lsls	r3, r6, #2
 8002188:	58eb      	ldr	r3, [r5, r3]
 800218a:	4798      	blx	r3
 800218c:	3601      	adds	r6, #1
 800218e:	e7f2      	b.n	8002176 <__libc_init_array+0x1e>
 8002190:	08002a9c 	.word	0x08002a9c
 8002194:	08002a9c 	.word	0x08002a9c
 8002198:	08002a9c 	.word	0x08002a9c
 800219c:	08002aa0 	.word	0x08002aa0

080021a0 <memset>:
 80021a0:	0003      	movs	r3, r0
 80021a2:	1812      	adds	r2, r2, r0
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d100      	bne.n	80021aa <memset+0xa>
 80021a8:	4770      	bx	lr
 80021aa:	7019      	strb	r1, [r3, #0]
 80021ac:	3301      	adds	r3, #1
 80021ae:	e7f9      	b.n	80021a4 <memset+0x4>

080021b0 <siprintf>:
 80021b0:	b40e      	push	{r1, r2, r3}
 80021b2:	b500      	push	{lr}
 80021b4:	490b      	ldr	r1, [pc, #44]	; (80021e4 <siprintf+0x34>)
 80021b6:	b09c      	sub	sp, #112	; 0x70
 80021b8:	ab1d      	add	r3, sp, #116	; 0x74
 80021ba:	9002      	str	r0, [sp, #8]
 80021bc:	9006      	str	r0, [sp, #24]
 80021be:	9107      	str	r1, [sp, #28]
 80021c0:	9104      	str	r1, [sp, #16]
 80021c2:	4809      	ldr	r0, [pc, #36]	; (80021e8 <siprintf+0x38>)
 80021c4:	4909      	ldr	r1, [pc, #36]	; (80021ec <siprintf+0x3c>)
 80021c6:	cb04      	ldmia	r3!, {r2}
 80021c8:	9105      	str	r1, [sp, #20]
 80021ca:	6800      	ldr	r0, [r0, #0]
 80021cc:	a902      	add	r1, sp, #8
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	f000 f870 	bl	80022b4 <_svfiprintf_r>
 80021d4:	2300      	movs	r3, #0
 80021d6:	9a02      	ldr	r2, [sp, #8]
 80021d8:	7013      	strb	r3, [r2, #0]
 80021da:	b01c      	add	sp, #112	; 0x70
 80021dc:	bc08      	pop	{r3}
 80021de:	b003      	add	sp, #12
 80021e0:	4718      	bx	r3
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	7fffffff 	.word	0x7fffffff
 80021e8:	2000000c 	.word	0x2000000c
 80021ec:	ffff0208 	.word	0xffff0208

080021f0 <__ssputs_r>:
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f2:	688e      	ldr	r6, [r1, #8]
 80021f4:	b085      	sub	sp, #20
 80021f6:	0007      	movs	r7, r0
 80021f8:	000c      	movs	r4, r1
 80021fa:	9203      	str	r2, [sp, #12]
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	429e      	cmp	r6, r3
 8002200:	d83c      	bhi.n	800227c <__ssputs_r+0x8c>
 8002202:	2390      	movs	r3, #144	; 0x90
 8002204:	898a      	ldrh	r2, [r1, #12]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	421a      	tst	r2, r3
 800220a:	d034      	beq.n	8002276 <__ssputs_r+0x86>
 800220c:	2503      	movs	r5, #3
 800220e:	6909      	ldr	r1, [r1, #16]
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	1a5b      	subs	r3, r3, r1
 8002214:	9302      	str	r3, [sp, #8]
 8002216:	6963      	ldr	r3, [r4, #20]
 8002218:	9802      	ldr	r0, [sp, #8]
 800221a:	435d      	muls	r5, r3
 800221c:	0feb      	lsrs	r3, r5, #31
 800221e:	195d      	adds	r5, r3, r5
 8002220:	9b01      	ldr	r3, [sp, #4]
 8002222:	106d      	asrs	r5, r5, #1
 8002224:	3301      	adds	r3, #1
 8002226:	181b      	adds	r3, r3, r0
 8002228:	42ab      	cmp	r3, r5
 800222a:	d900      	bls.n	800222e <__ssputs_r+0x3e>
 800222c:	001d      	movs	r5, r3
 800222e:	0553      	lsls	r3, r2, #21
 8002230:	d532      	bpl.n	8002298 <__ssputs_r+0xa8>
 8002232:	0029      	movs	r1, r5
 8002234:	0038      	movs	r0, r7
 8002236:	f000 fb23 	bl	8002880 <_malloc_r>
 800223a:	1e06      	subs	r6, r0, #0
 800223c:	d109      	bne.n	8002252 <__ssputs_r+0x62>
 800223e:	230c      	movs	r3, #12
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	2340      	movs	r3, #64	; 0x40
 8002244:	2001      	movs	r0, #1
 8002246:	89a2      	ldrh	r2, [r4, #12]
 8002248:	4240      	negs	r0, r0
 800224a:	4313      	orrs	r3, r2
 800224c:	81a3      	strh	r3, [r4, #12]
 800224e:	b005      	add	sp, #20
 8002250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002252:	9a02      	ldr	r2, [sp, #8]
 8002254:	6921      	ldr	r1, [r4, #16]
 8002256:	f000 faac 	bl	80027b2 <memcpy>
 800225a:	89a3      	ldrh	r3, [r4, #12]
 800225c:	4a14      	ldr	r2, [pc, #80]	; (80022b0 <__ssputs_r+0xc0>)
 800225e:	401a      	ands	r2, r3
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	4313      	orrs	r3, r2
 8002264:	81a3      	strh	r3, [r4, #12]
 8002266:	9b02      	ldr	r3, [sp, #8]
 8002268:	6126      	str	r6, [r4, #16]
 800226a:	18f6      	adds	r6, r6, r3
 800226c:	6026      	str	r6, [r4, #0]
 800226e:	6165      	str	r5, [r4, #20]
 8002270:	9e01      	ldr	r6, [sp, #4]
 8002272:	1aed      	subs	r5, r5, r3
 8002274:	60a5      	str	r5, [r4, #8]
 8002276:	9b01      	ldr	r3, [sp, #4]
 8002278:	429e      	cmp	r6, r3
 800227a:	d900      	bls.n	800227e <__ssputs_r+0x8e>
 800227c:	9e01      	ldr	r6, [sp, #4]
 800227e:	0032      	movs	r2, r6
 8002280:	9903      	ldr	r1, [sp, #12]
 8002282:	6820      	ldr	r0, [r4, #0]
 8002284:	f000 fa9e 	bl	80027c4 <memmove>
 8002288:	68a3      	ldr	r3, [r4, #8]
 800228a:	2000      	movs	r0, #0
 800228c:	1b9b      	subs	r3, r3, r6
 800228e:	60a3      	str	r3, [r4, #8]
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	199e      	adds	r6, r3, r6
 8002294:	6026      	str	r6, [r4, #0]
 8002296:	e7da      	b.n	800224e <__ssputs_r+0x5e>
 8002298:	002a      	movs	r2, r5
 800229a:	0038      	movs	r0, r7
 800229c:	f000 fb4e 	bl	800293c <_realloc_r>
 80022a0:	1e06      	subs	r6, r0, #0
 80022a2:	d1e0      	bne.n	8002266 <__ssputs_r+0x76>
 80022a4:	6921      	ldr	r1, [r4, #16]
 80022a6:	0038      	movs	r0, r7
 80022a8:	f000 faa0 	bl	80027ec <_free_r>
 80022ac:	e7c7      	b.n	800223e <__ssputs_r+0x4e>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	fffffb7f 	.word	0xfffffb7f

080022b4 <_svfiprintf_r>:
 80022b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b6:	b0a1      	sub	sp, #132	; 0x84
 80022b8:	9003      	str	r0, [sp, #12]
 80022ba:	001d      	movs	r5, r3
 80022bc:	898b      	ldrh	r3, [r1, #12]
 80022be:	000f      	movs	r7, r1
 80022c0:	0016      	movs	r6, r2
 80022c2:	061b      	lsls	r3, r3, #24
 80022c4:	d511      	bpl.n	80022ea <_svfiprintf_r+0x36>
 80022c6:	690b      	ldr	r3, [r1, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10e      	bne.n	80022ea <_svfiprintf_r+0x36>
 80022cc:	2140      	movs	r1, #64	; 0x40
 80022ce:	f000 fad7 	bl	8002880 <_malloc_r>
 80022d2:	6038      	str	r0, [r7, #0]
 80022d4:	6138      	str	r0, [r7, #16]
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d105      	bne.n	80022e6 <_svfiprintf_r+0x32>
 80022da:	230c      	movs	r3, #12
 80022dc:	9a03      	ldr	r2, [sp, #12]
 80022de:	3801      	subs	r0, #1
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	b021      	add	sp, #132	; 0x84
 80022e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e6:	2340      	movs	r3, #64	; 0x40
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	2300      	movs	r3, #0
 80022ec:	ac08      	add	r4, sp, #32
 80022ee:	6163      	str	r3, [r4, #20]
 80022f0:	3320      	adds	r3, #32
 80022f2:	7663      	strb	r3, [r4, #25]
 80022f4:	3310      	adds	r3, #16
 80022f6:	76a3      	strb	r3, [r4, #26]
 80022f8:	9507      	str	r5, [sp, #28]
 80022fa:	0035      	movs	r5, r6
 80022fc:	782b      	ldrb	r3, [r5, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <_svfiprintf_r+0x52>
 8002302:	2b25      	cmp	r3, #37	; 0x25
 8002304:	d146      	bne.n	8002394 <_svfiprintf_r+0xe0>
 8002306:	1bab      	subs	r3, r5, r6
 8002308:	9305      	str	r3, [sp, #20]
 800230a:	d00c      	beq.n	8002326 <_svfiprintf_r+0x72>
 800230c:	0032      	movs	r2, r6
 800230e:	0039      	movs	r1, r7
 8002310:	9803      	ldr	r0, [sp, #12]
 8002312:	f7ff ff6d 	bl	80021f0 <__ssputs_r>
 8002316:	1c43      	adds	r3, r0, #1
 8002318:	d100      	bne.n	800231c <_svfiprintf_r+0x68>
 800231a:	e0ae      	b.n	800247a <_svfiprintf_r+0x1c6>
 800231c:	6962      	ldr	r2, [r4, #20]
 800231e:	9b05      	ldr	r3, [sp, #20]
 8002320:	4694      	mov	ip, r2
 8002322:	4463      	add	r3, ip
 8002324:	6163      	str	r3, [r4, #20]
 8002326:	782b      	ldrb	r3, [r5, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d100      	bne.n	800232e <_svfiprintf_r+0x7a>
 800232c:	e0a5      	b.n	800247a <_svfiprintf_r+0x1c6>
 800232e:	2201      	movs	r2, #1
 8002330:	2300      	movs	r3, #0
 8002332:	4252      	negs	r2, r2
 8002334:	6062      	str	r2, [r4, #4]
 8002336:	a904      	add	r1, sp, #16
 8002338:	3254      	adds	r2, #84	; 0x54
 800233a:	1852      	adds	r2, r2, r1
 800233c:	1c6e      	adds	r6, r5, #1
 800233e:	6023      	str	r3, [r4, #0]
 8002340:	60e3      	str	r3, [r4, #12]
 8002342:	60a3      	str	r3, [r4, #8]
 8002344:	7013      	strb	r3, [r2, #0]
 8002346:	65a3      	str	r3, [r4, #88]	; 0x58
 8002348:	7831      	ldrb	r1, [r6, #0]
 800234a:	2205      	movs	r2, #5
 800234c:	4853      	ldr	r0, [pc, #332]	; (800249c <_svfiprintf_r+0x1e8>)
 800234e:	f000 fa25 	bl	800279c <memchr>
 8002352:	1c75      	adds	r5, r6, #1
 8002354:	2800      	cmp	r0, #0
 8002356:	d11f      	bne.n	8002398 <_svfiprintf_r+0xe4>
 8002358:	6822      	ldr	r2, [r4, #0]
 800235a:	06d3      	lsls	r3, r2, #27
 800235c:	d504      	bpl.n	8002368 <_svfiprintf_r+0xb4>
 800235e:	2353      	movs	r3, #83	; 0x53
 8002360:	a904      	add	r1, sp, #16
 8002362:	185b      	adds	r3, r3, r1
 8002364:	2120      	movs	r1, #32
 8002366:	7019      	strb	r1, [r3, #0]
 8002368:	0713      	lsls	r3, r2, #28
 800236a:	d504      	bpl.n	8002376 <_svfiprintf_r+0xc2>
 800236c:	2353      	movs	r3, #83	; 0x53
 800236e:	a904      	add	r1, sp, #16
 8002370:	185b      	adds	r3, r3, r1
 8002372:	212b      	movs	r1, #43	; 0x2b
 8002374:	7019      	strb	r1, [r3, #0]
 8002376:	7833      	ldrb	r3, [r6, #0]
 8002378:	2b2a      	cmp	r3, #42	; 0x2a
 800237a:	d016      	beq.n	80023aa <_svfiprintf_r+0xf6>
 800237c:	0035      	movs	r5, r6
 800237e:	2100      	movs	r1, #0
 8002380:	200a      	movs	r0, #10
 8002382:	68e3      	ldr	r3, [r4, #12]
 8002384:	782a      	ldrb	r2, [r5, #0]
 8002386:	1c6e      	adds	r6, r5, #1
 8002388:	3a30      	subs	r2, #48	; 0x30
 800238a:	2a09      	cmp	r2, #9
 800238c:	d94e      	bls.n	800242c <_svfiprintf_r+0x178>
 800238e:	2900      	cmp	r1, #0
 8002390:	d018      	beq.n	80023c4 <_svfiprintf_r+0x110>
 8002392:	e010      	b.n	80023b6 <_svfiprintf_r+0x102>
 8002394:	3501      	adds	r5, #1
 8002396:	e7b1      	b.n	80022fc <_svfiprintf_r+0x48>
 8002398:	4b40      	ldr	r3, [pc, #256]	; (800249c <_svfiprintf_r+0x1e8>)
 800239a:	6822      	ldr	r2, [r4, #0]
 800239c:	1ac0      	subs	r0, r0, r3
 800239e:	2301      	movs	r3, #1
 80023a0:	4083      	lsls	r3, r0
 80023a2:	4313      	orrs	r3, r2
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	002e      	movs	r6, r5
 80023a8:	e7ce      	b.n	8002348 <_svfiprintf_r+0x94>
 80023aa:	9b07      	ldr	r3, [sp, #28]
 80023ac:	1d19      	adds	r1, r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	9107      	str	r1, [sp, #28]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db01      	blt.n	80023ba <_svfiprintf_r+0x106>
 80023b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80023b8:	e004      	b.n	80023c4 <_svfiprintf_r+0x110>
 80023ba:	425b      	negs	r3, r3
 80023bc:	60e3      	str	r3, [r4, #12]
 80023be:	2302      	movs	r3, #2
 80023c0:	4313      	orrs	r3, r2
 80023c2:	6023      	str	r3, [r4, #0]
 80023c4:	782b      	ldrb	r3, [r5, #0]
 80023c6:	2b2e      	cmp	r3, #46	; 0x2e
 80023c8:	d10a      	bne.n	80023e0 <_svfiprintf_r+0x12c>
 80023ca:	786b      	ldrb	r3, [r5, #1]
 80023cc:	2b2a      	cmp	r3, #42	; 0x2a
 80023ce:	d135      	bne.n	800243c <_svfiprintf_r+0x188>
 80023d0:	9b07      	ldr	r3, [sp, #28]
 80023d2:	3502      	adds	r5, #2
 80023d4:	1d1a      	adds	r2, r3, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	9207      	str	r2, [sp, #28]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db2b      	blt.n	8002436 <_svfiprintf_r+0x182>
 80023de:	9309      	str	r3, [sp, #36]	; 0x24
 80023e0:	4e2f      	ldr	r6, [pc, #188]	; (80024a0 <_svfiprintf_r+0x1ec>)
 80023e2:	7829      	ldrb	r1, [r5, #0]
 80023e4:	2203      	movs	r2, #3
 80023e6:	0030      	movs	r0, r6
 80023e8:	f000 f9d8 	bl	800279c <memchr>
 80023ec:	2800      	cmp	r0, #0
 80023ee:	d006      	beq.n	80023fe <_svfiprintf_r+0x14a>
 80023f0:	2340      	movs	r3, #64	; 0x40
 80023f2:	1b80      	subs	r0, r0, r6
 80023f4:	4083      	lsls	r3, r0
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	3501      	adds	r5, #1
 80023fa:	4313      	orrs	r3, r2
 80023fc:	6023      	str	r3, [r4, #0]
 80023fe:	7829      	ldrb	r1, [r5, #0]
 8002400:	2206      	movs	r2, #6
 8002402:	4828      	ldr	r0, [pc, #160]	; (80024a4 <_svfiprintf_r+0x1f0>)
 8002404:	1c6e      	adds	r6, r5, #1
 8002406:	7621      	strb	r1, [r4, #24]
 8002408:	f000 f9c8 	bl	800279c <memchr>
 800240c:	2800      	cmp	r0, #0
 800240e:	d03c      	beq.n	800248a <_svfiprintf_r+0x1d6>
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <_svfiprintf_r+0x1f4>)
 8002412:	2b00      	cmp	r3, #0
 8002414:	d125      	bne.n	8002462 <_svfiprintf_r+0x1ae>
 8002416:	2207      	movs	r2, #7
 8002418:	9b07      	ldr	r3, [sp, #28]
 800241a:	3307      	adds	r3, #7
 800241c:	4393      	bics	r3, r2
 800241e:	3308      	adds	r3, #8
 8002420:	9307      	str	r3, [sp, #28]
 8002422:	6963      	ldr	r3, [r4, #20]
 8002424:	9a04      	ldr	r2, [sp, #16]
 8002426:	189b      	adds	r3, r3, r2
 8002428:	6163      	str	r3, [r4, #20]
 800242a:	e766      	b.n	80022fa <_svfiprintf_r+0x46>
 800242c:	4343      	muls	r3, r0
 800242e:	2101      	movs	r1, #1
 8002430:	189b      	adds	r3, r3, r2
 8002432:	0035      	movs	r5, r6
 8002434:	e7a6      	b.n	8002384 <_svfiprintf_r+0xd0>
 8002436:	2301      	movs	r3, #1
 8002438:	425b      	negs	r3, r3
 800243a:	e7d0      	b.n	80023de <_svfiprintf_r+0x12a>
 800243c:	2300      	movs	r3, #0
 800243e:	200a      	movs	r0, #10
 8002440:	001a      	movs	r2, r3
 8002442:	3501      	adds	r5, #1
 8002444:	6063      	str	r3, [r4, #4]
 8002446:	7829      	ldrb	r1, [r5, #0]
 8002448:	1c6e      	adds	r6, r5, #1
 800244a:	3930      	subs	r1, #48	; 0x30
 800244c:	2909      	cmp	r1, #9
 800244e:	d903      	bls.n	8002458 <_svfiprintf_r+0x1a4>
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0c5      	beq.n	80023e0 <_svfiprintf_r+0x12c>
 8002454:	9209      	str	r2, [sp, #36]	; 0x24
 8002456:	e7c3      	b.n	80023e0 <_svfiprintf_r+0x12c>
 8002458:	4342      	muls	r2, r0
 800245a:	2301      	movs	r3, #1
 800245c:	1852      	adds	r2, r2, r1
 800245e:	0035      	movs	r5, r6
 8002460:	e7f1      	b.n	8002446 <_svfiprintf_r+0x192>
 8002462:	ab07      	add	r3, sp, #28
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	003a      	movs	r2, r7
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <_svfiprintf_r+0x1f8>)
 800246a:	0021      	movs	r1, r4
 800246c:	9803      	ldr	r0, [sp, #12]
 800246e:	e000      	b.n	8002472 <_svfiprintf_r+0x1be>
 8002470:	bf00      	nop
 8002472:	9004      	str	r0, [sp, #16]
 8002474:	9b04      	ldr	r3, [sp, #16]
 8002476:	3301      	adds	r3, #1
 8002478:	d1d3      	bne.n	8002422 <_svfiprintf_r+0x16e>
 800247a:	89bb      	ldrh	r3, [r7, #12]
 800247c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800247e:	065b      	lsls	r3, r3, #25
 8002480:	d400      	bmi.n	8002484 <_svfiprintf_r+0x1d0>
 8002482:	e72e      	b.n	80022e2 <_svfiprintf_r+0x2e>
 8002484:	2001      	movs	r0, #1
 8002486:	4240      	negs	r0, r0
 8002488:	e72b      	b.n	80022e2 <_svfiprintf_r+0x2e>
 800248a:	ab07      	add	r3, sp, #28
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	003a      	movs	r2, r7
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <_svfiprintf_r+0x1f8>)
 8002492:	0021      	movs	r1, r4
 8002494:	9803      	ldr	r0, [sp, #12]
 8002496:	f000 f879 	bl	800258c <_printf_i>
 800249a:	e7ea      	b.n	8002472 <_svfiprintf_r+0x1be>
 800249c:	08002a69 	.word	0x08002a69
 80024a0:	08002a6f 	.word	0x08002a6f
 80024a4:	08002a73 	.word	0x08002a73
 80024a8:	00000000 	.word	0x00000000
 80024ac:	080021f1 	.word	0x080021f1

080024b0 <_printf_common>:
 80024b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024b2:	0015      	movs	r5, r2
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	688a      	ldr	r2, [r1, #8]
 80024b8:	690b      	ldr	r3, [r1, #16]
 80024ba:	9000      	str	r0, [sp, #0]
 80024bc:	000c      	movs	r4, r1
 80024be:	4293      	cmp	r3, r2
 80024c0:	da00      	bge.n	80024c4 <_printf_common+0x14>
 80024c2:	0013      	movs	r3, r2
 80024c4:	0022      	movs	r2, r4
 80024c6:	602b      	str	r3, [r5, #0]
 80024c8:	3243      	adds	r2, #67	; 0x43
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	2a00      	cmp	r2, #0
 80024ce:	d001      	beq.n	80024d4 <_printf_common+0x24>
 80024d0:	3301      	adds	r3, #1
 80024d2:	602b      	str	r3, [r5, #0]
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	069b      	lsls	r3, r3, #26
 80024d8:	d502      	bpl.n	80024e0 <_printf_common+0x30>
 80024da:	682b      	ldr	r3, [r5, #0]
 80024dc:	3302      	adds	r3, #2
 80024de:	602b      	str	r3, [r5, #0]
 80024e0:	2706      	movs	r7, #6
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	401f      	ands	r7, r3
 80024e6:	d027      	beq.n	8002538 <_printf_common+0x88>
 80024e8:	0023      	movs	r3, r4
 80024ea:	3343      	adds	r3, #67	; 0x43
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	1e5a      	subs	r2, r3, #1
 80024f0:	4193      	sbcs	r3, r2
 80024f2:	6822      	ldr	r2, [r4, #0]
 80024f4:	0692      	lsls	r2, r2, #26
 80024f6:	d430      	bmi.n	800255a <_printf_common+0xaa>
 80024f8:	0022      	movs	r2, r4
 80024fa:	9901      	ldr	r1, [sp, #4]
 80024fc:	3243      	adds	r2, #67	; 0x43
 80024fe:	9800      	ldr	r0, [sp, #0]
 8002500:	9e08      	ldr	r6, [sp, #32]
 8002502:	47b0      	blx	r6
 8002504:	1c43      	adds	r3, r0, #1
 8002506:	d025      	beq.n	8002554 <_printf_common+0xa4>
 8002508:	2306      	movs	r3, #6
 800250a:	6820      	ldr	r0, [r4, #0]
 800250c:	682a      	ldr	r2, [r5, #0]
 800250e:	68e1      	ldr	r1, [r4, #12]
 8002510:	4003      	ands	r3, r0
 8002512:	2500      	movs	r5, #0
 8002514:	2b04      	cmp	r3, #4
 8002516:	d103      	bne.n	8002520 <_printf_common+0x70>
 8002518:	1a8d      	subs	r5, r1, r2
 800251a:	43eb      	mvns	r3, r5
 800251c:	17db      	asrs	r3, r3, #31
 800251e:	401d      	ands	r5, r3
 8002520:	68a3      	ldr	r3, [r4, #8]
 8002522:	6922      	ldr	r2, [r4, #16]
 8002524:	4293      	cmp	r3, r2
 8002526:	dd01      	ble.n	800252c <_printf_common+0x7c>
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	18ed      	adds	r5, r5, r3
 800252c:	2700      	movs	r7, #0
 800252e:	42bd      	cmp	r5, r7
 8002530:	d120      	bne.n	8002574 <_printf_common+0xc4>
 8002532:	2000      	movs	r0, #0
 8002534:	e010      	b.n	8002558 <_printf_common+0xa8>
 8002536:	3701      	adds	r7, #1
 8002538:	68e3      	ldr	r3, [r4, #12]
 800253a:	682a      	ldr	r2, [r5, #0]
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	42bb      	cmp	r3, r7
 8002540:	ddd2      	ble.n	80024e8 <_printf_common+0x38>
 8002542:	0022      	movs	r2, r4
 8002544:	2301      	movs	r3, #1
 8002546:	3219      	adds	r2, #25
 8002548:	9901      	ldr	r1, [sp, #4]
 800254a:	9800      	ldr	r0, [sp, #0]
 800254c:	9e08      	ldr	r6, [sp, #32]
 800254e:	47b0      	blx	r6
 8002550:	1c43      	adds	r3, r0, #1
 8002552:	d1f0      	bne.n	8002536 <_printf_common+0x86>
 8002554:	2001      	movs	r0, #1
 8002556:	4240      	negs	r0, r0
 8002558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800255a:	2030      	movs	r0, #48	; 0x30
 800255c:	18e1      	adds	r1, r4, r3
 800255e:	3143      	adds	r1, #67	; 0x43
 8002560:	7008      	strb	r0, [r1, #0]
 8002562:	0021      	movs	r1, r4
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	3145      	adds	r1, #69	; 0x45
 8002568:	7809      	ldrb	r1, [r1, #0]
 800256a:	18a2      	adds	r2, r4, r2
 800256c:	3243      	adds	r2, #67	; 0x43
 800256e:	3302      	adds	r3, #2
 8002570:	7011      	strb	r1, [r2, #0]
 8002572:	e7c1      	b.n	80024f8 <_printf_common+0x48>
 8002574:	0022      	movs	r2, r4
 8002576:	2301      	movs	r3, #1
 8002578:	321a      	adds	r2, #26
 800257a:	9901      	ldr	r1, [sp, #4]
 800257c:	9800      	ldr	r0, [sp, #0]
 800257e:	9e08      	ldr	r6, [sp, #32]
 8002580:	47b0      	blx	r6
 8002582:	1c43      	adds	r3, r0, #1
 8002584:	d0e6      	beq.n	8002554 <_printf_common+0xa4>
 8002586:	3701      	adds	r7, #1
 8002588:	e7d1      	b.n	800252e <_printf_common+0x7e>
	...

0800258c <_printf_i>:
 800258c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	9204      	str	r2, [sp, #16]
 8002592:	000a      	movs	r2, r1
 8002594:	3243      	adds	r2, #67	; 0x43
 8002596:	9305      	str	r3, [sp, #20]
 8002598:	9003      	str	r0, [sp, #12]
 800259a:	9202      	str	r2, [sp, #8]
 800259c:	7e0a      	ldrb	r2, [r1, #24]
 800259e:	000c      	movs	r4, r1
 80025a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025a2:	2a6e      	cmp	r2, #110	; 0x6e
 80025a4:	d100      	bne.n	80025a8 <_printf_i+0x1c>
 80025a6:	e086      	b.n	80026b6 <_printf_i+0x12a>
 80025a8:	d81f      	bhi.n	80025ea <_printf_i+0x5e>
 80025aa:	2a63      	cmp	r2, #99	; 0x63
 80025ac:	d033      	beq.n	8002616 <_printf_i+0x8a>
 80025ae:	d808      	bhi.n	80025c2 <_printf_i+0x36>
 80025b0:	2a00      	cmp	r2, #0
 80025b2:	d100      	bne.n	80025b6 <_printf_i+0x2a>
 80025b4:	e08c      	b.n	80026d0 <_printf_i+0x144>
 80025b6:	2a58      	cmp	r2, #88	; 0x58
 80025b8:	d04d      	beq.n	8002656 <_printf_i+0xca>
 80025ba:	0025      	movs	r5, r4
 80025bc:	3542      	adds	r5, #66	; 0x42
 80025be:	702a      	strb	r2, [r5, #0]
 80025c0:	e030      	b.n	8002624 <_printf_i+0x98>
 80025c2:	2a64      	cmp	r2, #100	; 0x64
 80025c4:	d001      	beq.n	80025ca <_printf_i+0x3e>
 80025c6:	2a69      	cmp	r2, #105	; 0x69
 80025c8:	d1f7      	bne.n	80025ba <_printf_i+0x2e>
 80025ca:	6819      	ldr	r1, [r3, #0]
 80025cc:	6825      	ldr	r5, [r4, #0]
 80025ce:	1d0a      	adds	r2, r1, #4
 80025d0:	0628      	lsls	r0, r5, #24
 80025d2:	d529      	bpl.n	8002628 <_printf_i+0x9c>
 80025d4:	6808      	ldr	r0, [r1, #0]
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	2800      	cmp	r0, #0
 80025da:	da03      	bge.n	80025e4 <_printf_i+0x58>
 80025dc:	232d      	movs	r3, #45	; 0x2d
 80025de:	9a02      	ldr	r2, [sp, #8]
 80025e0:	4240      	negs	r0, r0
 80025e2:	7013      	strb	r3, [r2, #0]
 80025e4:	4e6b      	ldr	r6, [pc, #428]	; (8002794 <_printf_i+0x208>)
 80025e6:	270a      	movs	r7, #10
 80025e8:	e04f      	b.n	800268a <_printf_i+0xfe>
 80025ea:	2a73      	cmp	r2, #115	; 0x73
 80025ec:	d074      	beq.n	80026d8 <_printf_i+0x14c>
 80025ee:	d808      	bhi.n	8002602 <_printf_i+0x76>
 80025f0:	2a6f      	cmp	r2, #111	; 0x6f
 80025f2:	d01f      	beq.n	8002634 <_printf_i+0xa8>
 80025f4:	2a70      	cmp	r2, #112	; 0x70
 80025f6:	d1e0      	bne.n	80025ba <_printf_i+0x2e>
 80025f8:	2220      	movs	r2, #32
 80025fa:	6809      	ldr	r1, [r1, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	6022      	str	r2, [r4, #0]
 8002600:	e003      	b.n	800260a <_printf_i+0x7e>
 8002602:	2a75      	cmp	r2, #117	; 0x75
 8002604:	d016      	beq.n	8002634 <_printf_i+0xa8>
 8002606:	2a78      	cmp	r2, #120	; 0x78
 8002608:	d1d7      	bne.n	80025ba <_printf_i+0x2e>
 800260a:	0022      	movs	r2, r4
 800260c:	2178      	movs	r1, #120	; 0x78
 800260e:	3245      	adds	r2, #69	; 0x45
 8002610:	7011      	strb	r1, [r2, #0]
 8002612:	4e61      	ldr	r6, [pc, #388]	; (8002798 <_printf_i+0x20c>)
 8002614:	e022      	b.n	800265c <_printf_i+0xd0>
 8002616:	0025      	movs	r5, r4
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	3542      	adds	r5, #66	; 0x42
 800261c:	1d11      	adds	r1, r2, #4
 800261e:	6019      	str	r1, [r3, #0]
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	702b      	strb	r3, [r5, #0]
 8002624:	2301      	movs	r3, #1
 8002626:	e065      	b.n	80026f4 <_printf_i+0x168>
 8002628:	6808      	ldr	r0, [r1, #0]
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	0669      	lsls	r1, r5, #25
 800262e:	d5d3      	bpl.n	80025d8 <_printf_i+0x4c>
 8002630:	b200      	sxth	r0, r0
 8002632:	e7d1      	b.n	80025d8 <_printf_i+0x4c>
 8002634:	6819      	ldr	r1, [r3, #0]
 8002636:	6825      	ldr	r5, [r4, #0]
 8002638:	1d08      	adds	r0, r1, #4
 800263a:	6018      	str	r0, [r3, #0]
 800263c:	6808      	ldr	r0, [r1, #0]
 800263e:	062e      	lsls	r6, r5, #24
 8002640:	d505      	bpl.n	800264e <_printf_i+0xc2>
 8002642:	4e54      	ldr	r6, [pc, #336]	; (8002794 <_printf_i+0x208>)
 8002644:	2708      	movs	r7, #8
 8002646:	2a6f      	cmp	r2, #111	; 0x6f
 8002648:	d01b      	beq.n	8002682 <_printf_i+0xf6>
 800264a:	270a      	movs	r7, #10
 800264c:	e019      	b.n	8002682 <_printf_i+0xf6>
 800264e:	066d      	lsls	r5, r5, #25
 8002650:	d5f7      	bpl.n	8002642 <_printf_i+0xb6>
 8002652:	b280      	uxth	r0, r0
 8002654:	e7f5      	b.n	8002642 <_printf_i+0xb6>
 8002656:	3145      	adds	r1, #69	; 0x45
 8002658:	4e4e      	ldr	r6, [pc, #312]	; (8002794 <_printf_i+0x208>)
 800265a:	700a      	strb	r2, [r1, #0]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	6822      	ldr	r2, [r4, #0]
 8002660:	1d01      	adds	r1, r0, #4
 8002662:	6800      	ldr	r0, [r0, #0]
 8002664:	6019      	str	r1, [r3, #0]
 8002666:	0615      	lsls	r5, r2, #24
 8002668:	d521      	bpl.n	80026ae <_printf_i+0x122>
 800266a:	07d3      	lsls	r3, r2, #31
 800266c:	d502      	bpl.n	8002674 <_printf_i+0xe8>
 800266e:	2320      	movs	r3, #32
 8002670:	431a      	orrs	r2, r3
 8002672:	6022      	str	r2, [r4, #0]
 8002674:	2710      	movs	r7, #16
 8002676:	2800      	cmp	r0, #0
 8002678:	d103      	bne.n	8002682 <_printf_i+0xf6>
 800267a:	2320      	movs	r3, #32
 800267c:	6822      	ldr	r2, [r4, #0]
 800267e:	439a      	bics	r2, r3
 8002680:	6022      	str	r2, [r4, #0]
 8002682:	0023      	movs	r3, r4
 8002684:	2200      	movs	r2, #0
 8002686:	3343      	adds	r3, #67	; 0x43
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	6863      	ldr	r3, [r4, #4]
 800268c:	60a3      	str	r3, [r4, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	db58      	blt.n	8002744 <_printf_i+0x1b8>
 8002692:	2204      	movs	r2, #4
 8002694:	6821      	ldr	r1, [r4, #0]
 8002696:	4391      	bics	r1, r2
 8002698:	6021      	str	r1, [r4, #0]
 800269a:	2800      	cmp	r0, #0
 800269c:	d154      	bne.n	8002748 <_printf_i+0x1bc>
 800269e:	9d02      	ldr	r5, [sp, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05a      	beq.n	800275a <_printf_i+0x1ce>
 80026a4:	0025      	movs	r5, r4
 80026a6:	7833      	ldrb	r3, [r6, #0]
 80026a8:	3542      	adds	r5, #66	; 0x42
 80026aa:	702b      	strb	r3, [r5, #0]
 80026ac:	e055      	b.n	800275a <_printf_i+0x1ce>
 80026ae:	0655      	lsls	r5, r2, #25
 80026b0:	d5db      	bpl.n	800266a <_printf_i+0xde>
 80026b2:	b280      	uxth	r0, r0
 80026b4:	e7d9      	b.n	800266a <_printf_i+0xde>
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	680d      	ldr	r5, [r1, #0]
 80026ba:	1d10      	adds	r0, r2, #4
 80026bc:	6949      	ldr	r1, [r1, #20]
 80026be:	6018      	str	r0, [r3, #0]
 80026c0:	6813      	ldr	r3, [r2, #0]
 80026c2:	062e      	lsls	r6, r5, #24
 80026c4:	d501      	bpl.n	80026ca <_printf_i+0x13e>
 80026c6:	6019      	str	r1, [r3, #0]
 80026c8:	e002      	b.n	80026d0 <_printf_i+0x144>
 80026ca:	066d      	lsls	r5, r5, #25
 80026cc:	d5fb      	bpl.n	80026c6 <_printf_i+0x13a>
 80026ce:	8019      	strh	r1, [r3, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	9d02      	ldr	r5, [sp, #8]
 80026d4:	6123      	str	r3, [r4, #16]
 80026d6:	e04f      	b.n	8002778 <_printf_i+0x1ec>
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	1d11      	adds	r1, r2, #4
 80026dc:	6019      	str	r1, [r3, #0]
 80026de:	6815      	ldr	r5, [r2, #0]
 80026e0:	2100      	movs	r1, #0
 80026e2:	6862      	ldr	r2, [r4, #4]
 80026e4:	0028      	movs	r0, r5
 80026e6:	f000 f859 	bl	800279c <memchr>
 80026ea:	2800      	cmp	r0, #0
 80026ec:	d001      	beq.n	80026f2 <_printf_i+0x166>
 80026ee:	1b40      	subs	r0, r0, r5
 80026f0:	6060      	str	r0, [r4, #4]
 80026f2:	6863      	ldr	r3, [r4, #4]
 80026f4:	6123      	str	r3, [r4, #16]
 80026f6:	2300      	movs	r3, #0
 80026f8:	9a02      	ldr	r2, [sp, #8]
 80026fa:	7013      	strb	r3, [r2, #0]
 80026fc:	e03c      	b.n	8002778 <_printf_i+0x1ec>
 80026fe:	6923      	ldr	r3, [r4, #16]
 8002700:	002a      	movs	r2, r5
 8002702:	9904      	ldr	r1, [sp, #16]
 8002704:	9803      	ldr	r0, [sp, #12]
 8002706:	9d05      	ldr	r5, [sp, #20]
 8002708:	47a8      	blx	r5
 800270a:	1c43      	adds	r3, r0, #1
 800270c:	d03e      	beq.n	800278c <_printf_i+0x200>
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	079b      	lsls	r3, r3, #30
 8002712:	d415      	bmi.n	8002740 <_printf_i+0x1b4>
 8002714:	9b07      	ldr	r3, [sp, #28]
 8002716:	68e0      	ldr	r0, [r4, #12]
 8002718:	4298      	cmp	r0, r3
 800271a:	da39      	bge.n	8002790 <_printf_i+0x204>
 800271c:	0018      	movs	r0, r3
 800271e:	e037      	b.n	8002790 <_printf_i+0x204>
 8002720:	0022      	movs	r2, r4
 8002722:	2301      	movs	r3, #1
 8002724:	3219      	adds	r2, #25
 8002726:	9904      	ldr	r1, [sp, #16]
 8002728:	9803      	ldr	r0, [sp, #12]
 800272a:	9e05      	ldr	r6, [sp, #20]
 800272c:	47b0      	blx	r6
 800272e:	1c43      	adds	r3, r0, #1
 8002730:	d02c      	beq.n	800278c <_printf_i+0x200>
 8002732:	3501      	adds	r5, #1
 8002734:	68e3      	ldr	r3, [r4, #12]
 8002736:	9a07      	ldr	r2, [sp, #28]
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	42ab      	cmp	r3, r5
 800273c:	dcf0      	bgt.n	8002720 <_printf_i+0x194>
 800273e:	e7e9      	b.n	8002714 <_printf_i+0x188>
 8002740:	2500      	movs	r5, #0
 8002742:	e7f7      	b.n	8002734 <_printf_i+0x1a8>
 8002744:	2800      	cmp	r0, #0
 8002746:	d0ad      	beq.n	80026a4 <_printf_i+0x118>
 8002748:	9d02      	ldr	r5, [sp, #8]
 800274a:	0039      	movs	r1, r7
 800274c:	f7fd fd6a 	bl	8000224 <__aeabi_uidivmod>
 8002750:	5c73      	ldrb	r3, [r6, r1]
 8002752:	3d01      	subs	r5, #1
 8002754:	702b      	strb	r3, [r5, #0]
 8002756:	2800      	cmp	r0, #0
 8002758:	d1f7      	bne.n	800274a <_printf_i+0x1be>
 800275a:	2f08      	cmp	r7, #8
 800275c:	d109      	bne.n	8002772 <_printf_i+0x1e6>
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	07db      	lsls	r3, r3, #31
 8002762:	d506      	bpl.n	8002772 <_printf_i+0x1e6>
 8002764:	6863      	ldr	r3, [r4, #4]
 8002766:	6922      	ldr	r2, [r4, #16]
 8002768:	4293      	cmp	r3, r2
 800276a:	dc02      	bgt.n	8002772 <_printf_i+0x1e6>
 800276c:	2330      	movs	r3, #48	; 0x30
 800276e:	3d01      	subs	r5, #1
 8002770:	702b      	strb	r3, [r5, #0]
 8002772:	9b02      	ldr	r3, [sp, #8]
 8002774:	1b5b      	subs	r3, r3, r5
 8002776:	6123      	str	r3, [r4, #16]
 8002778:	9b05      	ldr	r3, [sp, #20]
 800277a:	aa07      	add	r2, sp, #28
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	0021      	movs	r1, r4
 8002780:	9b04      	ldr	r3, [sp, #16]
 8002782:	9803      	ldr	r0, [sp, #12]
 8002784:	f7ff fe94 	bl	80024b0 <_printf_common>
 8002788:	1c43      	adds	r3, r0, #1
 800278a:	d1b8      	bne.n	80026fe <_printf_i+0x172>
 800278c:	2001      	movs	r0, #1
 800278e:	4240      	negs	r0, r0
 8002790:	b009      	add	sp, #36	; 0x24
 8002792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002794:	08002a7a 	.word	0x08002a7a
 8002798:	08002a8b 	.word	0x08002a8b

0800279c <memchr>:
 800279c:	b2c9      	uxtb	r1, r1
 800279e:	1882      	adds	r2, r0, r2
 80027a0:	4290      	cmp	r0, r2
 80027a2:	d101      	bne.n	80027a8 <memchr+0xc>
 80027a4:	2000      	movs	r0, #0
 80027a6:	4770      	bx	lr
 80027a8:	7803      	ldrb	r3, [r0, #0]
 80027aa:	428b      	cmp	r3, r1
 80027ac:	d0fb      	beq.n	80027a6 <memchr+0xa>
 80027ae:	3001      	adds	r0, #1
 80027b0:	e7f6      	b.n	80027a0 <memchr+0x4>

080027b2 <memcpy>:
 80027b2:	2300      	movs	r3, #0
 80027b4:	b510      	push	{r4, lr}
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d100      	bne.n	80027bc <memcpy+0xa>
 80027ba:	bd10      	pop	{r4, pc}
 80027bc:	5ccc      	ldrb	r4, [r1, r3]
 80027be:	54c4      	strb	r4, [r0, r3]
 80027c0:	3301      	adds	r3, #1
 80027c2:	e7f8      	b.n	80027b6 <memcpy+0x4>

080027c4 <memmove>:
 80027c4:	b510      	push	{r4, lr}
 80027c6:	4288      	cmp	r0, r1
 80027c8:	d902      	bls.n	80027d0 <memmove+0xc>
 80027ca:	188b      	adds	r3, r1, r2
 80027cc:	4298      	cmp	r0, r3
 80027ce:	d303      	bcc.n	80027d8 <memmove+0x14>
 80027d0:	2300      	movs	r3, #0
 80027d2:	e007      	b.n	80027e4 <memmove+0x20>
 80027d4:	5c8b      	ldrb	r3, [r1, r2]
 80027d6:	5483      	strb	r3, [r0, r2]
 80027d8:	3a01      	subs	r2, #1
 80027da:	d2fb      	bcs.n	80027d4 <memmove+0x10>
 80027dc:	bd10      	pop	{r4, pc}
 80027de:	5ccc      	ldrb	r4, [r1, r3]
 80027e0:	54c4      	strb	r4, [r0, r3]
 80027e2:	3301      	adds	r3, #1
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d1fa      	bne.n	80027de <memmove+0x1a>
 80027e8:	e7f8      	b.n	80027dc <memmove+0x18>
	...

080027ec <_free_r>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	0005      	movs	r5, r0
 80027f0:	2900      	cmp	r1, #0
 80027f2:	d010      	beq.n	8002816 <_free_r+0x2a>
 80027f4:	1f0c      	subs	r4, r1, #4
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da00      	bge.n	80027fe <_free_r+0x12>
 80027fc:	18e4      	adds	r4, r4, r3
 80027fe:	0028      	movs	r0, r5
 8002800:	f000 f8d4 	bl	80029ac <__malloc_lock>
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <_free_r+0x90>)
 8002806:	6813      	ldr	r3, [r2, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <_free_r+0x2c>
 800280c:	6063      	str	r3, [r4, #4]
 800280e:	6014      	str	r4, [r2, #0]
 8002810:	0028      	movs	r0, r5
 8002812:	f000 f8cc 	bl	80029ae <__malloc_unlock>
 8002816:	bd70      	pop	{r4, r5, r6, pc}
 8002818:	42a3      	cmp	r3, r4
 800281a:	d909      	bls.n	8002830 <_free_r+0x44>
 800281c:	6821      	ldr	r1, [r4, #0]
 800281e:	1860      	adds	r0, r4, r1
 8002820:	4283      	cmp	r3, r0
 8002822:	d1f3      	bne.n	800280c <_free_r+0x20>
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	1841      	adds	r1, r0, r1
 800282a:	6021      	str	r1, [r4, #0]
 800282c:	e7ee      	b.n	800280c <_free_r+0x20>
 800282e:	0013      	movs	r3, r2
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	2a00      	cmp	r2, #0
 8002834:	d001      	beq.n	800283a <_free_r+0x4e>
 8002836:	42a2      	cmp	r2, r4
 8002838:	d9f9      	bls.n	800282e <_free_r+0x42>
 800283a:	6819      	ldr	r1, [r3, #0]
 800283c:	1858      	adds	r0, r3, r1
 800283e:	42a0      	cmp	r0, r4
 8002840:	d10b      	bne.n	800285a <_free_r+0x6e>
 8002842:	6820      	ldr	r0, [r4, #0]
 8002844:	1809      	adds	r1, r1, r0
 8002846:	1858      	adds	r0, r3, r1
 8002848:	6019      	str	r1, [r3, #0]
 800284a:	4282      	cmp	r2, r0
 800284c:	d1e0      	bne.n	8002810 <_free_r+0x24>
 800284e:	6810      	ldr	r0, [r2, #0]
 8002850:	6852      	ldr	r2, [r2, #4]
 8002852:	1841      	adds	r1, r0, r1
 8002854:	6019      	str	r1, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	e7da      	b.n	8002810 <_free_r+0x24>
 800285a:	42a0      	cmp	r0, r4
 800285c:	d902      	bls.n	8002864 <_free_r+0x78>
 800285e:	230c      	movs	r3, #12
 8002860:	602b      	str	r3, [r5, #0]
 8002862:	e7d5      	b.n	8002810 <_free_r+0x24>
 8002864:	6821      	ldr	r1, [r4, #0]
 8002866:	1860      	adds	r0, r4, r1
 8002868:	4282      	cmp	r2, r0
 800286a:	d103      	bne.n	8002874 <_free_r+0x88>
 800286c:	6810      	ldr	r0, [r2, #0]
 800286e:	6852      	ldr	r2, [r2, #4]
 8002870:	1841      	adds	r1, r0, r1
 8002872:	6021      	str	r1, [r4, #0]
 8002874:	6062      	str	r2, [r4, #4]
 8002876:	605c      	str	r4, [r3, #4]
 8002878:	e7ca      	b.n	8002810 <_free_r+0x24>
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	20000090 	.word	0x20000090

08002880 <_malloc_r>:
 8002880:	2303      	movs	r3, #3
 8002882:	b570      	push	{r4, r5, r6, lr}
 8002884:	1ccd      	adds	r5, r1, #3
 8002886:	439d      	bics	r5, r3
 8002888:	3508      	adds	r5, #8
 800288a:	0006      	movs	r6, r0
 800288c:	2d0c      	cmp	r5, #12
 800288e:	d21e      	bcs.n	80028ce <_malloc_r+0x4e>
 8002890:	250c      	movs	r5, #12
 8002892:	42a9      	cmp	r1, r5
 8002894:	d81d      	bhi.n	80028d2 <_malloc_r+0x52>
 8002896:	0030      	movs	r0, r6
 8002898:	f000 f888 	bl	80029ac <__malloc_lock>
 800289c:	4a25      	ldr	r2, [pc, #148]	; (8002934 <_malloc_r+0xb4>)
 800289e:	6814      	ldr	r4, [r2, #0]
 80028a0:	0021      	movs	r1, r4
 80028a2:	2900      	cmp	r1, #0
 80028a4:	d119      	bne.n	80028da <_malloc_r+0x5a>
 80028a6:	4c24      	ldr	r4, [pc, #144]	; (8002938 <_malloc_r+0xb8>)
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <_malloc_r+0x36>
 80028ae:	0030      	movs	r0, r6
 80028b0:	f000 f86a 	bl	8002988 <_sbrk_r>
 80028b4:	6020      	str	r0, [r4, #0]
 80028b6:	0029      	movs	r1, r5
 80028b8:	0030      	movs	r0, r6
 80028ba:	f000 f865 	bl	8002988 <_sbrk_r>
 80028be:	1c43      	adds	r3, r0, #1
 80028c0:	d12b      	bne.n	800291a <_malloc_r+0x9a>
 80028c2:	230c      	movs	r3, #12
 80028c4:	0030      	movs	r0, r6
 80028c6:	6033      	str	r3, [r6, #0]
 80028c8:	f000 f871 	bl	80029ae <__malloc_unlock>
 80028cc:	e003      	b.n	80028d6 <_malloc_r+0x56>
 80028ce:	2d00      	cmp	r5, #0
 80028d0:	dadf      	bge.n	8002892 <_malloc_r+0x12>
 80028d2:	230c      	movs	r3, #12
 80028d4:	6033      	str	r3, [r6, #0]
 80028d6:	2000      	movs	r0, #0
 80028d8:	bd70      	pop	{r4, r5, r6, pc}
 80028da:	680b      	ldr	r3, [r1, #0]
 80028dc:	1b5b      	subs	r3, r3, r5
 80028de:	d419      	bmi.n	8002914 <_malloc_r+0x94>
 80028e0:	2b0b      	cmp	r3, #11
 80028e2:	d903      	bls.n	80028ec <_malloc_r+0x6c>
 80028e4:	600b      	str	r3, [r1, #0]
 80028e6:	18cc      	adds	r4, r1, r3
 80028e8:	6025      	str	r5, [r4, #0]
 80028ea:	e003      	b.n	80028f4 <_malloc_r+0x74>
 80028ec:	684b      	ldr	r3, [r1, #4]
 80028ee:	428c      	cmp	r4, r1
 80028f0:	d10d      	bne.n	800290e <_malloc_r+0x8e>
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	0030      	movs	r0, r6
 80028f6:	f000 f85a 	bl	80029ae <__malloc_unlock>
 80028fa:	0020      	movs	r0, r4
 80028fc:	2207      	movs	r2, #7
 80028fe:	300b      	adds	r0, #11
 8002900:	1d23      	adds	r3, r4, #4
 8002902:	4390      	bics	r0, r2
 8002904:	1ac3      	subs	r3, r0, r3
 8002906:	d0e7      	beq.n	80028d8 <_malloc_r+0x58>
 8002908:	425a      	negs	r2, r3
 800290a:	50e2      	str	r2, [r4, r3]
 800290c:	e7e4      	b.n	80028d8 <_malloc_r+0x58>
 800290e:	6063      	str	r3, [r4, #4]
 8002910:	000c      	movs	r4, r1
 8002912:	e7ef      	b.n	80028f4 <_malloc_r+0x74>
 8002914:	000c      	movs	r4, r1
 8002916:	6849      	ldr	r1, [r1, #4]
 8002918:	e7c3      	b.n	80028a2 <_malloc_r+0x22>
 800291a:	2303      	movs	r3, #3
 800291c:	1cc4      	adds	r4, r0, #3
 800291e:	439c      	bics	r4, r3
 8002920:	42a0      	cmp	r0, r4
 8002922:	d0e1      	beq.n	80028e8 <_malloc_r+0x68>
 8002924:	1a21      	subs	r1, r4, r0
 8002926:	0030      	movs	r0, r6
 8002928:	f000 f82e 	bl	8002988 <_sbrk_r>
 800292c:	1c43      	adds	r3, r0, #1
 800292e:	d1db      	bne.n	80028e8 <_malloc_r+0x68>
 8002930:	e7c7      	b.n	80028c2 <_malloc_r+0x42>
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	20000090 	.word	0x20000090
 8002938:	20000094 	.word	0x20000094

0800293c <_realloc_r>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	0007      	movs	r7, r0
 8002940:	000d      	movs	r5, r1
 8002942:	0016      	movs	r6, r2
 8002944:	2900      	cmp	r1, #0
 8002946:	d105      	bne.n	8002954 <_realloc_r+0x18>
 8002948:	0011      	movs	r1, r2
 800294a:	f7ff ff99 	bl	8002880 <_malloc_r>
 800294e:	0004      	movs	r4, r0
 8002950:	0020      	movs	r0, r4
 8002952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002954:	2a00      	cmp	r2, #0
 8002956:	d103      	bne.n	8002960 <_realloc_r+0x24>
 8002958:	f7ff ff48 	bl	80027ec <_free_r>
 800295c:	0034      	movs	r4, r6
 800295e:	e7f7      	b.n	8002950 <_realloc_r+0x14>
 8002960:	f000 f826 	bl	80029b0 <_malloc_usable_size_r>
 8002964:	002c      	movs	r4, r5
 8002966:	42b0      	cmp	r0, r6
 8002968:	d2f2      	bcs.n	8002950 <_realloc_r+0x14>
 800296a:	0031      	movs	r1, r6
 800296c:	0038      	movs	r0, r7
 800296e:	f7ff ff87 	bl	8002880 <_malloc_r>
 8002972:	1e04      	subs	r4, r0, #0
 8002974:	d0ec      	beq.n	8002950 <_realloc_r+0x14>
 8002976:	0029      	movs	r1, r5
 8002978:	0032      	movs	r2, r6
 800297a:	f7ff ff1a 	bl	80027b2 <memcpy>
 800297e:	0029      	movs	r1, r5
 8002980:	0038      	movs	r0, r7
 8002982:	f7ff ff33 	bl	80027ec <_free_r>
 8002986:	e7e3      	b.n	8002950 <_realloc_r+0x14>

08002988 <_sbrk_r>:
 8002988:	2300      	movs	r3, #0
 800298a:	b570      	push	{r4, r5, r6, lr}
 800298c:	4c06      	ldr	r4, [pc, #24]	; (80029a8 <_sbrk_r+0x20>)
 800298e:	0005      	movs	r5, r0
 8002990:	0008      	movs	r0, r1
 8002992:	6023      	str	r3, [r4, #0]
 8002994:	f7fe fa24 	bl	8000de0 <_sbrk>
 8002998:	1c43      	adds	r3, r0, #1
 800299a:	d103      	bne.n	80029a4 <_sbrk_r+0x1c>
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d000      	beq.n	80029a4 <_sbrk_r+0x1c>
 80029a2:	602b      	str	r3, [r5, #0]
 80029a4:	bd70      	pop	{r4, r5, r6, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	20000134 	.word	0x20000134

080029ac <__malloc_lock>:
 80029ac:	4770      	bx	lr

080029ae <__malloc_unlock>:
 80029ae:	4770      	bx	lr

080029b0 <_malloc_usable_size_r>:
 80029b0:	1f0b      	subs	r3, r1, #4
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	1f18      	subs	r0, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	da01      	bge.n	80029be <_malloc_usable_size_r+0xe>
 80029ba:	580b      	ldr	r3, [r1, r0]
 80029bc:	18c0      	adds	r0, r0, r3
 80029be:	4770      	bx	lr

080029c0 <fmin>:
 80029c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029c2:	0004      	movs	r4, r0
 80029c4:	000d      	movs	r5, r1
 80029c6:	0016      	movs	r6, r2
 80029c8:	001f      	movs	r7, r3
 80029ca:	f000 f815 	bl	80029f8 <__fpclassifyd>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d00d      	beq.n	80029ee <fmin+0x2e>
 80029d2:	0030      	movs	r0, r6
 80029d4:	0039      	movs	r1, r7
 80029d6:	f000 f80f 	bl	80029f8 <__fpclassifyd>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d009      	beq.n	80029f2 <fmin+0x32>
 80029de:	0032      	movs	r2, r6
 80029e0:	003b      	movs	r3, r7
 80029e2:	0020      	movs	r0, r4
 80029e4:	0029      	movs	r1, r5
 80029e6:	f7fd fc39 	bl	800025c <__aeabi_dcmplt>
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d101      	bne.n	80029f2 <fmin+0x32>
 80029ee:	0034      	movs	r4, r6
 80029f0:	003d      	movs	r5, r7
 80029f2:	0029      	movs	r1, r5
 80029f4:	0020      	movs	r0, r4
 80029f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029f8 <__fpclassifyd>:
 80029f8:	b530      	push	{r4, r5, lr}
 80029fa:	0005      	movs	r5, r0
 80029fc:	2302      	movs	r3, #2
 80029fe:	430d      	orrs	r5, r1
 8002a00:	d018      	beq.n	8002a34 <__fpclassifyd+0x3c>
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	4299      	cmp	r1, r3
 8002a08:	d102      	bne.n	8002a10 <__fpclassifyd+0x18>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	2800      	cmp	r0, #0
 8002a0e:	d011      	beq.n	8002a34 <__fpclassifyd+0x3c>
 8002a10:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <__fpclassifyd+0x40>)
 8002a12:	0049      	lsls	r1, r1, #1
 8002a14:	0849      	lsrs	r1, r1, #1
 8002a16:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <__fpclassifyd+0x44>)
 8002a18:	18cc      	adds	r4, r1, r3
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	4294      	cmp	r4, r2
 8002a1e:	d909      	bls.n	8002a34 <__fpclassifyd+0x3c>
 8002a20:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <__fpclassifyd+0x48>)
 8002a22:	3b01      	subs	r3, #1
 8002a24:	4291      	cmp	r1, r2
 8002a26:	d905      	bls.n	8002a34 <__fpclassifyd+0x3c>
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <__fpclassifyd+0x4c>)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	4291      	cmp	r1, r2
 8002a2e:	d101      	bne.n	8002a34 <__fpclassifyd+0x3c>
 8002a30:	4243      	negs	r3, r0
 8002a32:	4143      	adcs	r3, r0
 8002a34:	0018      	movs	r0, r3
 8002a36:	bd30      	pop	{r4, r5, pc}
 8002a38:	fff00000 	.word	0xfff00000
 8002a3c:	7fdfffff 	.word	0x7fdfffff
 8002a40:	000fffff 	.word	0x000fffff
 8002a44:	7ff00000 	.word	0x7ff00000

08002a48 <_init>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr

08002a54 <_fini>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr
