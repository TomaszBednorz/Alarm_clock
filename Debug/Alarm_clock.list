
Alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005970  08005970  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08005970  08005970  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005970  08005970  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005970  08005970  00015970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005974  08005974  00015974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08005978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  200000d4  08005a4c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08005a4c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154e6  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b23  00000000  00000000  000355e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df0  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  00038ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bf39  00000000  00000000  00039b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000edd5  00000000  00000000  00055ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096ca0  00000000  00000000  0006489e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fb53e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003508  00000000  00000000  000fb5bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d4 	.word	0x200000d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800578c 	.word	0x0800578c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d8 	.word	0x200000d8
 8000104:	0800578c 	.word	0x0800578c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdrcmple>:
 8000230:	4684      	mov	ip, r0
 8000232:	1c10      	adds	r0, r2, #0
 8000234:	4662      	mov	r2, ip
 8000236:	468c      	mov	ip, r1
 8000238:	1c19      	adds	r1, r3, #0
 800023a:	4663      	mov	r3, ip
 800023c:	e000      	b.n	8000240 <__aeabi_cdcmpeq>
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_cdcmpeq>:
 8000240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000242:	f000 f8d3 	bl	80003ec <__ledf2>
 8000246:	2800      	cmp	r0, #0
 8000248:	d401      	bmi.n	800024e <__aeabi_cdcmpeq+0xe>
 800024a:	2100      	movs	r1, #0
 800024c:	42c8      	cmn	r0, r1
 800024e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000250 <__aeabi_dcmpeq>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 f82b 	bl	80002ac <__eqdf2>
 8000256:	4240      	negs	r0, r0
 8000258:	3001      	adds	r0, #1
 800025a:	bd10      	pop	{r4, pc}

0800025c <__aeabi_dcmplt>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 f8c5 	bl	80003ec <__ledf2>
 8000262:	2800      	cmp	r0, #0
 8000264:	db01      	blt.n	800026a <__aeabi_dcmplt+0xe>
 8000266:	2000      	movs	r0, #0
 8000268:	bd10      	pop	{r4, pc}
 800026a:	2001      	movs	r0, #1
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_dcmple>:
 8000270:	b510      	push	{r4, lr}
 8000272:	f000 f8bb 	bl	80003ec <__ledf2>
 8000276:	2800      	cmp	r0, #0
 8000278:	dd01      	ble.n	800027e <__aeabi_dcmple+0xe>
 800027a:	2000      	movs	r0, #0
 800027c:	bd10      	pop	{r4, pc}
 800027e:	2001      	movs	r0, #1
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_dcmpgt>:
 8000284:	b510      	push	{r4, lr}
 8000286:	f000 f84d 	bl	8000324 <__gedf2>
 800028a:	2800      	cmp	r0, #0
 800028c:	dc01      	bgt.n	8000292 <__aeabi_dcmpgt+0xe>
 800028e:	2000      	movs	r0, #0
 8000290:	bd10      	pop	{r4, pc}
 8000292:	2001      	movs	r0, #1
 8000294:	bd10      	pop	{r4, pc}
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_dcmpge>:
 8000298:	b510      	push	{r4, lr}
 800029a:	f000 f843 	bl	8000324 <__gedf2>
 800029e:	2800      	cmp	r0, #0
 80002a0:	da01      	bge.n	80002a6 <__aeabi_dcmpge+0xe>
 80002a2:	2000      	movs	r0, #0
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	2001      	movs	r0, #1
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	46c0      	nop			; (mov r8, r8)

080002ac <__eqdf2>:
 80002ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ae:	464f      	mov	r7, r9
 80002b0:	4646      	mov	r6, r8
 80002b2:	46d6      	mov	lr, sl
 80002b4:	4684      	mov	ip, r0
 80002b6:	b5c0      	push	{r6, r7, lr}
 80002b8:	4680      	mov	r8, r0
 80002ba:	4e19      	ldr	r6, [pc, #100]	; (8000320 <__eqdf2+0x74>)
 80002bc:	0318      	lsls	r0, r3, #12
 80002be:	030f      	lsls	r7, r1, #12
 80002c0:	004d      	lsls	r5, r1, #1
 80002c2:	0b00      	lsrs	r0, r0, #12
 80002c4:	005c      	lsls	r4, r3, #1
 80002c6:	4682      	mov	sl, r0
 80002c8:	0b3f      	lsrs	r7, r7, #12
 80002ca:	0d6d      	lsrs	r5, r5, #21
 80002cc:	0fc9      	lsrs	r1, r1, #31
 80002ce:	4691      	mov	r9, r2
 80002d0:	0d64      	lsrs	r4, r4, #21
 80002d2:	0fdb      	lsrs	r3, r3, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	42b5      	cmp	r5, r6
 80002d8:	d00a      	beq.n	80002f0 <__eqdf2+0x44>
 80002da:	42b4      	cmp	r4, r6
 80002dc:	d003      	beq.n	80002e6 <__eqdf2+0x3a>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d101      	bne.n	80002e6 <__eqdf2+0x3a>
 80002e2:	4557      	cmp	r7, sl
 80002e4:	d00c      	beq.n	8000300 <__eqdf2+0x54>
 80002e6:	bc1c      	pop	{r2, r3, r4}
 80002e8:	4690      	mov	r8, r2
 80002ea:	4699      	mov	r9, r3
 80002ec:	46a2      	mov	sl, r4
 80002ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f0:	4666      	mov	r6, ip
 80002f2:	433e      	orrs	r6, r7
 80002f4:	d1f7      	bne.n	80002e6 <__eqdf2+0x3a>
 80002f6:	42ac      	cmp	r4, r5
 80002f8:	d1f5      	bne.n	80002e6 <__eqdf2+0x3a>
 80002fa:	4654      	mov	r4, sl
 80002fc:	4314      	orrs	r4, r2
 80002fe:	d1f2      	bne.n	80002e6 <__eqdf2+0x3a>
 8000300:	2001      	movs	r0, #1
 8000302:	45c8      	cmp	r8, r9
 8000304:	d1ef      	bne.n	80002e6 <__eqdf2+0x3a>
 8000306:	4299      	cmp	r1, r3
 8000308:	d007      	beq.n	800031a <__eqdf2+0x6e>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d1eb      	bne.n	80002e6 <__eqdf2+0x3a>
 800030e:	4663      	mov	r3, ip
 8000310:	431f      	orrs	r7, r3
 8000312:	0038      	movs	r0, r7
 8000314:	1e47      	subs	r7, r0, #1
 8000316:	41b8      	sbcs	r0, r7
 8000318:	e7e5      	b.n	80002e6 <__eqdf2+0x3a>
 800031a:	2000      	movs	r0, #0
 800031c:	e7e3      	b.n	80002e6 <__eqdf2+0x3a>
 800031e:	46c0      	nop			; (mov r8, r8)
 8000320:	000007ff 	.word	0x000007ff

08000324 <__gedf2>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	464f      	mov	r7, r9
 8000328:	4646      	mov	r6, r8
 800032a:	46d6      	mov	lr, sl
 800032c:	004d      	lsls	r5, r1, #1
 800032e:	b5c0      	push	{r6, r7, lr}
 8000330:	030e      	lsls	r6, r1, #12
 8000332:	0fc9      	lsrs	r1, r1, #31
 8000334:	468a      	mov	sl, r1
 8000336:	492c      	ldr	r1, [pc, #176]	; (80003e8 <__gedf2+0xc4>)
 8000338:	031f      	lsls	r7, r3, #12
 800033a:	005c      	lsls	r4, r3, #1
 800033c:	4680      	mov	r8, r0
 800033e:	0b36      	lsrs	r6, r6, #12
 8000340:	0d6d      	lsrs	r5, r5, #21
 8000342:	4691      	mov	r9, r2
 8000344:	0b3f      	lsrs	r7, r7, #12
 8000346:	0d64      	lsrs	r4, r4, #21
 8000348:	0fdb      	lsrs	r3, r3, #31
 800034a:	428d      	cmp	r5, r1
 800034c:	d01e      	beq.n	800038c <__gedf2+0x68>
 800034e:	428c      	cmp	r4, r1
 8000350:	d016      	beq.n	8000380 <__gedf2+0x5c>
 8000352:	2d00      	cmp	r5, #0
 8000354:	d11e      	bne.n	8000394 <__gedf2+0x70>
 8000356:	4330      	orrs	r0, r6
 8000358:	4684      	mov	ip, r0
 800035a:	2c00      	cmp	r4, #0
 800035c:	d101      	bne.n	8000362 <__gedf2+0x3e>
 800035e:	433a      	orrs	r2, r7
 8000360:	d023      	beq.n	80003aa <__gedf2+0x86>
 8000362:	4662      	mov	r2, ip
 8000364:	2a00      	cmp	r2, #0
 8000366:	d01a      	beq.n	800039e <__gedf2+0x7a>
 8000368:	459a      	cmp	sl, r3
 800036a:	d029      	beq.n	80003c0 <__gedf2+0x9c>
 800036c:	4651      	mov	r1, sl
 800036e:	2002      	movs	r0, #2
 8000370:	3901      	subs	r1, #1
 8000372:	4008      	ands	r0, r1
 8000374:	3801      	subs	r0, #1
 8000376:	bc1c      	pop	{r2, r3, r4}
 8000378:	4690      	mov	r8, r2
 800037a:	4699      	mov	r9, r3
 800037c:	46a2      	mov	sl, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	0039      	movs	r1, r7
 8000382:	4311      	orrs	r1, r2
 8000384:	d0e5      	beq.n	8000352 <__gedf2+0x2e>
 8000386:	2002      	movs	r0, #2
 8000388:	4240      	negs	r0, r0
 800038a:	e7f4      	b.n	8000376 <__gedf2+0x52>
 800038c:	4330      	orrs	r0, r6
 800038e:	d1fa      	bne.n	8000386 <__gedf2+0x62>
 8000390:	42ac      	cmp	r4, r5
 8000392:	d00f      	beq.n	80003b4 <__gedf2+0x90>
 8000394:	2c00      	cmp	r4, #0
 8000396:	d10f      	bne.n	80003b8 <__gedf2+0x94>
 8000398:	433a      	orrs	r2, r7
 800039a:	d0e7      	beq.n	800036c <__gedf2+0x48>
 800039c:	e00c      	b.n	80003b8 <__gedf2+0x94>
 800039e:	2201      	movs	r2, #1
 80003a0:	3b01      	subs	r3, #1
 80003a2:	4393      	bics	r3, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	3001      	adds	r0, #1
 80003a8:	e7e5      	b.n	8000376 <__gedf2+0x52>
 80003aa:	4663      	mov	r3, ip
 80003ac:	2000      	movs	r0, #0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0e1      	beq.n	8000376 <__gedf2+0x52>
 80003b2:	e7db      	b.n	800036c <__gedf2+0x48>
 80003b4:	433a      	orrs	r2, r7
 80003b6:	d1e6      	bne.n	8000386 <__gedf2+0x62>
 80003b8:	459a      	cmp	sl, r3
 80003ba:	d1d7      	bne.n	800036c <__gedf2+0x48>
 80003bc:	42a5      	cmp	r5, r4
 80003be:	dcd5      	bgt.n	800036c <__gedf2+0x48>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	db05      	blt.n	80003d0 <__gedf2+0xac>
 80003c4:	42be      	cmp	r6, r7
 80003c6:	d8d1      	bhi.n	800036c <__gedf2+0x48>
 80003c8:	d008      	beq.n	80003dc <__gedf2+0xb8>
 80003ca:	2000      	movs	r0, #0
 80003cc:	42be      	cmp	r6, r7
 80003ce:	d2d2      	bcs.n	8000376 <__gedf2+0x52>
 80003d0:	4650      	mov	r0, sl
 80003d2:	2301      	movs	r3, #1
 80003d4:	3801      	subs	r0, #1
 80003d6:	4398      	bics	r0, r3
 80003d8:	3001      	adds	r0, #1
 80003da:	e7cc      	b.n	8000376 <__gedf2+0x52>
 80003dc:	45c8      	cmp	r8, r9
 80003de:	d8c5      	bhi.n	800036c <__gedf2+0x48>
 80003e0:	2000      	movs	r0, #0
 80003e2:	45c8      	cmp	r8, r9
 80003e4:	d3f4      	bcc.n	80003d0 <__gedf2+0xac>
 80003e6:	e7c6      	b.n	8000376 <__gedf2+0x52>
 80003e8:	000007ff 	.word	0x000007ff

080003ec <__ledf2>:
 80003ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ee:	464f      	mov	r7, r9
 80003f0:	4646      	mov	r6, r8
 80003f2:	46d6      	mov	lr, sl
 80003f4:	004d      	lsls	r5, r1, #1
 80003f6:	b5c0      	push	{r6, r7, lr}
 80003f8:	030e      	lsls	r6, r1, #12
 80003fa:	0fc9      	lsrs	r1, r1, #31
 80003fc:	468a      	mov	sl, r1
 80003fe:	492e      	ldr	r1, [pc, #184]	; (80004b8 <__ledf2+0xcc>)
 8000400:	031f      	lsls	r7, r3, #12
 8000402:	005c      	lsls	r4, r3, #1
 8000404:	4680      	mov	r8, r0
 8000406:	0b36      	lsrs	r6, r6, #12
 8000408:	0d6d      	lsrs	r5, r5, #21
 800040a:	4691      	mov	r9, r2
 800040c:	0b3f      	lsrs	r7, r7, #12
 800040e:	0d64      	lsrs	r4, r4, #21
 8000410:	0fdb      	lsrs	r3, r3, #31
 8000412:	428d      	cmp	r5, r1
 8000414:	d018      	beq.n	8000448 <__ledf2+0x5c>
 8000416:	428c      	cmp	r4, r1
 8000418:	d011      	beq.n	800043e <__ledf2+0x52>
 800041a:	2d00      	cmp	r5, #0
 800041c:	d118      	bne.n	8000450 <__ledf2+0x64>
 800041e:	4330      	orrs	r0, r6
 8000420:	4684      	mov	ip, r0
 8000422:	2c00      	cmp	r4, #0
 8000424:	d11e      	bne.n	8000464 <__ledf2+0x78>
 8000426:	433a      	orrs	r2, r7
 8000428:	d11c      	bne.n	8000464 <__ledf2+0x78>
 800042a:	4663      	mov	r3, ip
 800042c:	2000      	movs	r0, #0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d030      	beq.n	8000494 <__ledf2+0xa8>
 8000432:	4651      	mov	r1, sl
 8000434:	2002      	movs	r0, #2
 8000436:	3901      	subs	r1, #1
 8000438:	4008      	ands	r0, r1
 800043a:	3801      	subs	r0, #1
 800043c:	e02a      	b.n	8000494 <__ledf2+0xa8>
 800043e:	0039      	movs	r1, r7
 8000440:	4311      	orrs	r1, r2
 8000442:	d0ea      	beq.n	800041a <__ledf2+0x2e>
 8000444:	2002      	movs	r0, #2
 8000446:	e025      	b.n	8000494 <__ledf2+0xa8>
 8000448:	4330      	orrs	r0, r6
 800044a:	d1fb      	bne.n	8000444 <__ledf2+0x58>
 800044c:	42ac      	cmp	r4, r5
 800044e:	d026      	beq.n	800049e <__ledf2+0xb2>
 8000450:	2c00      	cmp	r4, #0
 8000452:	d126      	bne.n	80004a2 <__ledf2+0xb6>
 8000454:	433a      	orrs	r2, r7
 8000456:	d124      	bne.n	80004a2 <__ledf2+0xb6>
 8000458:	4651      	mov	r1, sl
 800045a:	2002      	movs	r0, #2
 800045c:	3901      	subs	r1, #1
 800045e:	4008      	ands	r0, r1
 8000460:	3801      	subs	r0, #1
 8000462:	e017      	b.n	8000494 <__ledf2+0xa8>
 8000464:	4662      	mov	r2, ip
 8000466:	2a00      	cmp	r2, #0
 8000468:	d00f      	beq.n	800048a <__ledf2+0x9e>
 800046a:	459a      	cmp	sl, r3
 800046c:	d1e1      	bne.n	8000432 <__ledf2+0x46>
 800046e:	42a5      	cmp	r5, r4
 8000470:	db05      	blt.n	800047e <__ledf2+0x92>
 8000472:	42be      	cmp	r6, r7
 8000474:	d8dd      	bhi.n	8000432 <__ledf2+0x46>
 8000476:	d019      	beq.n	80004ac <__ledf2+0xc0>
 8000478:	2000      	movs	r0, #0
 800047a:	42be      	cmp	r6, r7
 800047c:	d20a      	bcs.n	8000494 <__ledf2+0xa8>
 800047e:	4650      	mov	r0, sl
 8000480:	2301      	movs	r3, #1
 8000482:	3801      	subs	r0, #1
 8000484:	4398      	bics	r0, r3
 8000486:	3001      	adds	r0, #1
 8000488:	e004      	b.n	8000494 <__ledf2+0xa8>
 800048a:	2201      	movs	r2, #1
 800048c:	3b01      	subs	r3, #1
 800048e:	4393      	bics	r3, r2
 8000490:	0018      	movs	r0, r3
 8000492:	3001      	adds	r0, #1
 8000494:	bc1c      	pop	{r2, r3, r4}
 8000496:	4690      	mov	r8, r2
 8000498:	4699      	mov	r9, r3
 800049a:	46a2      	mov	sl, r4
 800049c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800049e:	433a      	orrs	r2, r7
 80004a0:	d1d0      	bne.n	8000444 <__ledf2+0x58>
 80004a2:	459a      	cmp	sl, r3
 80004a4:	d1c5      	bne.n	8000432 <__ledf2+0x46>
 80004a6:	42a5      	cmp	r5, r4
 80004a8:	dcc3      	bgt.n	8000432 <__ledf2+0x46>
 80004aa:	e7e0      	b.n	800046e <__ledf2+0x82>
 80004ac:	45c8      	cmp	r8, r9
 80004ae:	d8c0      	bhi.n	8000432 <__ledf2+0x46>
 80004b0:	2000      	movs	r0, #0
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d3e3      	bcc.n	800047e <__ledf2+0x92>
 80004b6:	e7ed      	b.n	8000494 <__ledf2+0xa8>
 80004b8:	000007ff 	.word	0x000007ff

080004bc <__aeabi_i2d>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	2800      	cmp	r0, #0
 80004c0:	d02d      	beq.n	800051e <__aeabi_i2d+0x62>
 80004c2:	17c3      	asrs	r3, r0, #31
 80004c4:	18c5      	adds	r5, r0, r3
 80004c6:	405d      	eors	r5, r3
 80004c8:	0fc4      	lsrs	r4, r0, #31
 80004ca:	0028      	movs	r0, r5
 80004cc:	f000 f862 	bl	8000594 <__clzsi2>
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <__aeabi_i2d+0x6c>)
 80004d2:	1a1b      	subs	r3, r3, r0
 80004d4:	055b      	lsls	r3, r3, #21
 80004d6:	0d5b      	lsrs	r3, r3, #21
 80004d8:	280a      	cmp	r0, #10
 80004da:	dd15      	ble.n	8000508 <__aeabi_i2d+0x4c>
 80004dc:	380b      	subs	r0, #11
 80004de:	4085      	lsls	r5, r0
 80004e0:	2200      	movs	r2, #0
 80004e2:	032d      	lsls	r5, r5, #12
 80004e4:	0b2d      	lsrs	r5, r5, #12
 80004e6:	2100      	movs	r1, #0
 80004e8:	0010      	movs	r0, r2
 80004ea:	032d      	lsls	r5, r5, #12
 80004ec:	0d0a      	lsrs	r2, r1, #20
 80004ee:	0b2d      	lsrs	r5, r5, #12
 80004f0:	0512      	lsls	r2, r2, #20
 80004f2:	432a      	orrs	r2, r5
 80004f4:	4d0d      	ldr	r5, [pc, #52]	; (800052c <__aeabi_i2d+0x70>)
 80004f6:	051b      	lsls	r3, r3, #20
 80004f8:	402a      	ands	r2, r5
 80004fa:	4313      	orrs	r3, r2
 80004fc:	005b      	lsls	r3, r3, #1
 80004fe:	07e4      	lsls	r4, r4, #31
 8000500:	085b      	lsrs	r3, r3, #1
 8000502:	4323      	orrs	r3, r4
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	0002      	movs	r2, r0
 800050a:	0029      	movs	r1, r5
 800050c:	3215      	adds	r2, #21
 800050e:	4091      	lsls	r1, r2
 8000510:	000a      	movs	r2, r1
 8000512:	210b      	movs	r1, #11
 8000514:	1a08      	subs	r0, r1, r0
 8000516:	40c5      	lsrs	r5, r0
 8000518:	032d      	lsls	r5, r5, #12
 800051a:	0b2d      	lsrs	r5, r5, #12
 800051c:	e7e3      	b.n	80004e6 <__aeabi_i2d+0x2a>
 800051e:	2400      	movs	r4, #0
 8000520:	2300      	movs	r3, #0
 8000522:	2500      	movs	r5, #0
 8000524:	2200      	movs	r2, #0
 8000526:	e7de      	b.n	80004e6 <__aeabi_i2d+0x2a>
 8000528:	0000041e 	.word	0x0000041e
 800052c:	800fffff 	.word	0x800fffff

08000530 <__aeabi_ui2d>:
 8000530:	b510      	push	{r4, lr}
 8000532:	1e04      	subs	r4, r0, #0
 8000534:	d025      	beq.n	8000582 <__aeabi_ui2d+0x52>
 8000536:	f000 f82d 	bl	8000594 <__clzsi2>
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <__aeabi_ui2d+0x5c>)
 800053c:	1a1b      	subs	r3, r3, r0
 800053e:	055b      	lsls	r3, r3, #21
 8000540:	0d5b      	lsrs	r3, r3, #21
 8000542:	280a      	cmp	r0, #10
 8000544:	dd12      	ble.n	800056c <__aeabi_ui2d+0x3c>
 8000546:	380b      	subs	r0, #11
 8000548:	4084      	lsls	r4, r0
 800054a:	2200      	movs	r2, #0
 800054c:	0324      	lsls	r4, r4, #12
 800054e:	0b24      	lsrs	r4, r4, #12
 8000550:	2100      	movs	r1, #0
 8000552:	0010      	movs	r0, r2
 8000554:	0324      	lsls	r4, r4, #12
 8000556:	0d0a      	lsrs	r2, r1, #20
 8000558:	0b24      	lsrs	r4, r4, #12
 800055a:	0512      	lsls	r2, r2, #20
 800055c:	4322      	orrs	r2, r4
 800055e:	4c0c      	ldr	r4, [pc, #48]	; (8000590 <__aeabi_ui2d+0x60>)
 8000560:	051b      	lsls	r3, r3, #20
 8000562:	4022      	ands	r2, r4
 8000564:	4313      	orrs	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	0859      	lsrs	r1, r3, #1
 800056a:	bd10      	pop	{r4, pc}
 800056c:	0002      	movs	r2, r0
 800056e:	0021      	movs	r1, r4
 8000570:	3215      	adds	r2, #21
 8000572:	4091      	lsls	r1, r2
 8000574:	000a      	movs	r2, r1
 8000576:	210b      	movs	r1, #11
 8000578:	1a08      	subs	r0, r1, r0
 800057a:	40c4      	lsrs	r4, r0
 800057c:	0324      	lsls	r4, r4, #12
 800057e:	0b24      	lsrs	r4, r4, #12
 8000580:	e7e6      	b.n	8000550 <__aeabi_ui2d+0x20>
 8000582:	2300      	movs	r3, #0
 8000584:	2400      	movs	r4, #0
 8000586:	2200      	movs	r2, #0
 8000588:	e7e2      	b.n	8000550 <__aeabi_ui2d+0x20>
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	0000041e 	.word	0x0000041e
 8000590:	800fffff 	.word	0x800fffff

08000594 <__clzsi2>:
 8000594:	211c      	movs	r1, #28
 8000596:	2301      	movs	r3, #1
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	4298      	cmp	r0, r3
 800059c:	d301      	bcc.n	80005a2 <__clzsi2+0xe>
 800059e:	0c00      	lsrs	r0, r0, #16
 80005a0:	3910      	subs	r1, #16
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	4298      	cmp	r0, r3
 80005a6:	d301      	bcc.n	80005ac <__clzsi2+0x18>
 80005a8:	0a00      	lsrs	r0, r0, #8
 80005aa:	3908      	subs	r1, #8
 80005ac:	091b      	lsrs	r3, r3, #4
 80005ae:	4298      	cmp	r0, r3
 80005b0:	d301      	bcc.n	80005b6 <__clzsi2+0x22>
 80005b2:	0900      	lsrs	r0, r0, #4
 80005b4:	3904      	subs	r1, #4
 80005b6:	a202      	add	r2, pc, #8	; (adr r2, 80005c0 <__clzsi2+0x2c>)
 80005b8:	5c10      	ldrb	r0, [r2, r0]
 80005ba:	1840      	adds	r0, r0, r1
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	02020304 	.word	0x02020304
 80005c4:	01010101 	.word	0x01010101
	...

080005d0 <DMA_init>:
#include "basic_functionalities.h"

TIM_HandleTypeDef htimer6;

void DMA_init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <DMA_init+0x38>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <DMA_init+0x38>)
 80005dc:	2101      	movs	r1, #1
 80005de:	430a      	orrs	r2, r1
 80005e0:	615a      	str	r2, [r3, #20]
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <DMA_init+0x38>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	2201      	movs	r2, #1
 80005e8:	4013      	ands	r3, r2
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]

  // NVIC settings
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2100      	movs	r1, #0
 80005f2:	200b      	movs	r0, #11
 80005f4:	f001 fe08 	bl	8002208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80005f8:	200b      	movs	r0, #11
 80005fa:	f001 fe1a 	bl	8002232 <HAL_NVIC_EnableIRQ>

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	40021000 	.word	0x40021000

0800060c <clock_configuration>:

/*
 *  HSI 40MHz
 */
void clock_configuration(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b093      	sub	sp, #76	; 0x4c
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	2414      	movs	r4, #20
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0018      	movs	r0, r3
 8000618:	2334      	movs	r3, #52	; 0x34
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f004 fc5c 	bl	8004eda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	0018      	movs	r0, r3
 8000626:	2310      	movs	r3, #16
 8000628:	001a      	movs	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	f004 fc55 	bl	8004eda <memset>

  // RCC Oscillator init
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	0021      	movs	r1, r4
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2202      	movs	r2, #2
 8000636:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2202      	movs	r2, #2
 8000642:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	0212      	lsls	r2, r2, #8
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	22c0      	movs	r2, #192	; 0xc0
 8000650:	0312      	lsls	r2, r2, #12
 8000652:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	187b      	adds	r3, r7, r1
 800065c:	0018      	movs	r0, r3
 800065e:	f002 ff3f 	bl	80034e0 <HAL_RCC_OscConfig>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <clock_configuration+0x5e>
  {
	  error_handler();
 8000666:	f000 f83f 	bl	80006e8 <error_handler>
  }

  // CPU, AHB and APB buses clocks init
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2207      	movs	r2, #7
 800066e:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2202      	movs	r2, #2
 8000674:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2101      	movs	r1, #1
 8000686:	0018      	movs	r0, r3
 8000688:	f003 fab0 	bl	8003bec <HAL_RCC_ClockConfig>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <clock_configuration+0x88>
  {
	  error_handler();
 8000690:	f000 f82a 	bl	80006e8 <error_handler>
  }
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b013      	add	sp, #76	; 0x4c
 800069a:	bd90      	pop	{r4, r7, pc}

0800069c <interrupt_1s_init>:

/*
 * Interrupt every 1s triggered by timer 6
 */
void interrupt_1s_init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	htimer6.Instance = TIM6;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <interrupt_1s_init+0x3c>)
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <interrupt_1s_init+0x40>)
 80006a4:	601a      	str	r2, [r3, #0]
	htimer6.Init.Prescaler = 3999;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <interrupt_1s_init+0x3c>)
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <interrupt_1s_init+0x44>)
 80006aa:	605a      	str	r2, [r3, #4]
	htimer6.Init.Period = 9999;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <interrupt_1s_init+0x3c>)
 80006ae:	4a0d      	ldr	r2, [pc, #52]	; (80006e4 <interrupt_1s_init+0x48>)
 80006b0:	60da      	str	r2, [r3, #12]
	if(HAL_TIM_Base_Init(&htimer6) != HAL_OK)
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <interrupt_1s_init+0x3c>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f003 fbf1 	bl	8003e9c <HAL_TIM_Base_Init>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d001      	beq.n	80006c2 <interrupt_1s_init+0x26>
	{
		error_handler();
 80006be:	f000 f813 	bl	80006e8 <error_handler>
	}

	if(HAL_TIM_Base_Start_IT(&htimer6) != HAL_OK)
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <interrupt_1s_init+0x3c>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f003 fc83 	bl	8003fd0 <HAL_TIM_Base_Start_IT>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <interrupt_1s_init+0x36>
	{
		error_handler();
 80006ce:	f000 f80b 	bl	80006e8 <error_handler>
	}
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200001f0 	.word	0x200001f0
 80006dc:	40001000 	.word	0x40001000
 80006e0:	00000f9f 	.word	0x00000f9f
 80006e4:	0000270f 	.word	0x0000270f

080006e8 <error_handler>:

void error_handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  while (1)
 80006ec:	e7fe      	b.n	80006ec <error_handler+0x4>
	...

080006f0 <buzzer_init>:
 * @return            - None
 *
 * @Note              - Buzzer init function
 */
void buzzer_init()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
	/*
	 * Timer 2 is initialized in OC mode
	 */
	TIM_OC_InitTypeDef tim2OC_init;

	htimer2.Instance = TIM2;
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <buzzer_init+0x6c>)
 80006f8:	2280      	movs	r2, #128	; 0x80
 80006fa:	05d2      	lsls	r2, r2, #23
 80006fc:	601a      	str	r2, [r3, #0]
	htimer2.Init.Period = 0xFFFFFFFF;
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <buzzer_init+0x6c>)
 8000700:	2201      	movs	r2, #1
 8000702:	4252      	negs	r2, r2
 8000704:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 8 - 1;  // 1MHz
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <buzzer_init+0x6c>)
 8000708:	2207      	movs	r2, #7
 800070a:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_OC_Init(&htimer2) != HAL_OK)
 800070c:	4b13      	ldr	r3, [pc, #76]	; (800075c <buzzer_init+0x6c>)
 800070e:	0018      	movs	r0, r3
 8000710:	f003 fcb0 	bl	8004074 <HAL_TIM_OC_Init>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <buzzer_init+0x2c>
	{
		error_handler();
 8000718:	f7ff ffe6 	bl	80006e8 <error_handler>
	}

	tim2OC_init.OCMode = TIM_OCMODE_TOGGLE;
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	601a      	str	r2, [r3, #0]
	tim2OC_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
	tim2OC_init.Pulse = 1000;
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	22fa      	movs	r2, #250	; 0xfa
 800072c:	0092      	lsls	r2, r2, #2
 800072e:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2OC_init, TIM_CHANNEL_2) != HAL_OK)
 8000730:	1d39      	adds	r1, r7, #4
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <buzzer_init+0x6c>)
 8000734:	2204      	movs	r2, #4
 8000736:	0018      	movs	r0, r3
 8000738:	f003 fe5a 	bl	80043f0 <HAL_TIM_OC_ConfigChannel>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <buzzer_init+0x54>
	{
		error_handler();
 8000740:	f7ff ffd2 	bl	80006e8 <error_handler>
	}
	buzzer_melody = BUZZER_MELODY_1;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <buzzer_init+0x70>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	buzzer_freq = BUZZER_250HZ;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <buzzer_init+0x74>)
 800074c:	22fa      	movs	r2, #250	; 0xfa
 800074e:	00d2      	lsls	r2, r2, #3
 8000750:	601a      	str	r2, [r3, #0]
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b008      	add	sp, #32
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	20000238 	.word	0x20000238
 8000760:	20000284 	.word	0x20000284
 8000764:	20000280 	.word	0x20000280

08000768 <HAL_TIM_OC_DelayElapsedCallback>:
}



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	uint32_t crr_content;

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7f1b      	ldrb	r3, [r3, #28]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d10d      	bne.n	8000794 <HAL_TIM_OC_DelayElapsedCallback+0x2c>
	{
		crr_content = HAL_TIM_ReadCapturedValue(&htimer2, TIM_CHANNEL_2);
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 800077a:	2104      	movs	r1, #4
 800077c:	0018      	movs	r0, r3
 800077e:	f004 f80f 	bl	80047a0 <HAL_TIM_ReadCapturedValue>
 8000782:	0003      	movs	r3, r0
 8000784:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htimer2, TIM_CHANNEL_2, crr_content + buzzer_freq);
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_TIM_OC_DelayElapsedCallback+0x38>)
 8000788:	6819      	ldr	r1, [r3, #0]
 800078a:	4b04      	ldr	r3, [pc, #16]	; (800079c <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	188a      	adds	r2, r1, r2
 8000792:	639a      	str	r2, [r3, #56]	; 0x38
	}

}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	b004      	add	sp, #16
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000238 	.word	0x20000238
 80007a0:	20000280 	.word	0x20000280

080007a4 <gpio_init>:
#include "gpio.h"

uint8_t button_read(uint8_t button);

void gpio_init()
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b089      	sub	sp, #36	; 0x24
 80007a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_buttons = {0};
 80007aa:	240c      	movs	r4, #12
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	0018      	movs	r0, r3
 80007b0:	2314      	movs	r3, #20
 80007b2:	001a      	movs	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f004 fb90 	bl	8004eda <memset>
	 * PA11 --> LEFT_BUTTON
	 * PB12 --> RIGHT_BUTTON
	 * PB11 --> UP_BUTTON
	 * PC8  --> DOWN_BUTTON
	 */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <gpio_init+0xfc>)
 80007bc:	695a      	ldr	r2, [r3, #20]
 80007be:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <gpio_init+0xfc>)
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	0289      	lsls	r1, r1, #10
 80007c4:	430a      	orrs	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <gpio_init+0xfc>)
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	029b      	lsls	r3, r3, #10
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <gpio_init+0xfc>)
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <gpio_init+0xfc>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	02c9      	lsls	r1, r1, #11
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	4b2e      	ldr	r3, [pc, #184]	; (80008a0 <gpio_init+0xfc>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	02db      	lsls	r3, r3, #11
 80007ec:	4013      	ands	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <gpio_init+0xfc>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <gpio_init+0xfc>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	0309      	lsls	r1, r1, #12
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <gpio_init+0xfc>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	031b      	lsls	r3, r3, #12
 8000808:	4013      	ands	r3, r2
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

	GPIO_buttons.Pin = BUTTON_ACCEPT_PIN;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	0152      	lsls	r2, r2, #5
 8000814:	601a      	str	r2, [r3, #0]
	GPIO_buttons.Pull = GPIO_NOPULL;
 8000816:	193b      	adds	r3, r7, r4
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
	GPIO_buttons.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2201      	movs	r2, #1
 8000820:	60da      	str	r2, [r3, #12]
	GPIO_buttons.Mode = GPIO_MODE_INPUT;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
	HAL_GPIO_Init(BUTTON_ACCEPT_PORT, &GPIO_buttons);
 8000828:	193a      	adds	r2, r7, r4
 800082a:	2390      	movs	r3, #144	; 0x90
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fe21 	bl	8002478 <HAL_GPIO_Init>

	GPIO_buttons.Pin = BUTTON_LEFT_PIN;
 8000836:	0021      	movs	r1, r4
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	0112      	lsls	r2, r2, #4
 800083e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(BUTTON_LEFT_PORT, &GPIO_buttons);
 8000840:	000c      	movs	r4, r1
 8000842:	187a      	adds	r2, r7, r1
 8000844:	2390      	movs	r3, #144	; 0x90
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f001 fe14 	bl	8002478 <HAL_GPIO_Init>

	GPIO_buttons.Pin = BUTTON_RIGHT_PIN;
 8000850:	0021      	movs	r1, r4
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	0152      	lsls	r2, r2, #5
 8000858:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(BUTTON_RIGHT_PORT, &GPIO_buttons);
 800085a:	000c      	movs	r4, r1
 800085c:	187b      	adds	r3, r7, r1
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <gpio_init+0x100>)
 8000860:	0019      	movs	r1, r3
 8000862:	0010      	movs	r0, r2
 8000864:	f001 fe08 	bl	8002478 <HAL_GPIO_Init>

	GPIO_buttons.Pin = BUTTON_UP_PIN;
 8000868:	0021      	movs	r1, r4
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2280      	movs	r2, #128	; 0x80
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(BUTTON_UP_PORT, &GPIO_buttons);
 8000872:	000c      	movs	r4, r1
 8000874:	187b      	adds	r3, r7, r1
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <gpio_init+0x100>)
 8000878:	0019      	movs	r1, r3
 800087a:	0010      	movs	r0, r2
 800087c:	f001 fdfc 	bl	8002478 <HAL_GPIO_Init>

	GPIO_buttons.Pin = BUTTON_DOWN_PIN;
 8000880:	0021      	movs	r1, r4
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2280      	movs	r2, #128	; 0x80
 8000886:	0052      	lsls	r2, r2, #1
 8000888:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(BUTTON_DOWN_PORT, &GPIO_buttons);
 800088a:	187b      	adds	r3, r7, r1
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <gpio_init+0x104>)
 800088e:	0019      	movs	r1, r3
 8000890:	0010      	movs	r0, r2
 8000892:	f001 fdf1 	bl	8002478 <HAL_GPIO_Init>

}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b009      	add	sp, #36	; 0x24
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400
 80008a8:	48000800 	.word	0x48000800

080008ac <button_read>:
 * @return            - param: @BUTTON_STATE
 *
 * @Note              - This function read state from GPIOs
 */
uint8_t button_read(uint8_t button)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	0002      	movs	r2, r0
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	701a      	strb	r2, [r3, #0]
	if(button == BUTTON_ACCEPT)
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d10b      	bne.n	80008d8 <button_read+0x2c>
	{
		if(HAL_GPIO_ReadPin(BUTTON_ACCEPT_PORT, BUTTON_ACCEPT_PIN) == GPIO_PIN_RESET)
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	015a      	lsls	r2, r3, #5
 80008c4:	2390      	movs	r3, #144	; 0x90
 80008c6:	05db      	lsls	r3, r3, #23
 80008c8:	0011      	movs	r1, r2
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 ff4c 	bl	8002768 <HAL_GPIO_ReadPin>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d13e      	bne.n	8000952 <button_read+0xa6>
		{
			return BUTTON_PUSHED;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e03d      	b.n	8000954 <button_read+0xa8>
		}
	}
	else if(button == BUTTON_LEFT)
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b02      	cmp	r3, #2
 80008de:	d10b      	bne.n	80008f8 <button_read+0x4c>
	{
		if(HAL_GPIO_ReadPin(BUTTON_LEFT_PORT, BUTTON_LEFT_PIN) == GPIO_PIN_RESET)
 80008e0:	2380      	movs	r3, #128	; 0x80
 80008e2:	011a      	lsls	r2, r3, #4
 80008e4:	2390      	movs	r3, #144	; 0x90
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 ff3c 	bl	8002768 <HAL_GPIO_ReadPin>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d12e      	bne.n	8000952 <button_read+0xa6>
		{
			return BUTTON_PUSHED;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e02d      	b.n	8000954 <button_read+0xa8>
		}
	}
	else if(button == BUTTON_RIGHT)
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d10a      	bne.n	8000916 <button_read+0x6a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_RIGHT_PORT, BUTTON_RIGHT_PIN) == GPIO_PIN_RESET)
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	015b      	lsls	r3, r3, #5
 8000904:	4a15      	ldr	r2, [pc, #84]	; (800095c <button_read+0xb0>)
 8000906:	0019      	movs	r1, r3
 8000908:	0010      	movs	r0, r2
 800090a:	f001 ff2d 	bl	8002768 <HAL_GPIO_ReadPin>
 800090e:	1e03      	subs	r3, r0, #0
 8000910:	d11f      	bne.n	8000952 <button_read+0xa6>
		{
			return BUTTON_PUSHED;
 8000912:	2301      	movs	r3, #1
 8000914:	e01e      	b.n	8000954 <button_read+0xa8>
		}
	}
	else if(button == BUTTON_UP)
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b04      	cmp	r3, #4
 800091c:	d10a      	bne.n	8000934 <button_read+0x88>
	{
		if(HAL_GPIO_ReadPin(BUTTON_UP_PORT, BUTTON_UP_PIN) == GPIO_PIN_RESET)
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	011b      	lsls	r3, r3, #4
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <button_read+0xb0>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f001 ff1e 	bl	8002768 <HAL_GPIO_ReadPin>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d110      	bne.n	8000952 <button_read+0xa6>
		{
			return BUTTON_PUSHED;
 8000930:	2301      	movs	r3, #1
 8000932:	e00f      	b.n	8000954 <button_read+0xa8>
		}
	}
	else if(button == BUTTON_DOWN)
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b05      	cmp	r3, #5
 800093a:	d10a      	bne.n	8000952 <button_read+0xa6>
	{
		if(HAL_GPIO_ReadPin(BUTTON_DOWN_PORT, BUTTON_DOWN_PIN) == GPIO_PIN_RESET)
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4a07      	ldr	r2, [pc, #28]	; (8000960 <button_read+0xb4>)
 8000942:	0019      	movs	r1, r3
 8000944:	0010      	movs	r0, r2
 8000946:	f001 ff0f 	bl	8002768 <HAL_GPIO_ReadPin>
 800094a:	1e03      	subs	r3, r0, #0
 800094c:	d101      	bne.n	8000952 <button_read+0xa6>
		{
			return BUTTON_PUSHED;
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <button_read+0xa8>
		}
	}

	return BUTTON_RELEASED;
 8000952:	2300      	movs	r3, #0
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	b002      	add	sp, #8
 800095a:	bd80      	pop	{r7, pc}
 800095c:	48000400 	.word	0x48000400
 8000960:	48000800 	.word	0x48000800

08000964 <i2c1_init>:

I2C_HandleTypeDef hi2c1, hi2c2;


void i2c1_init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <i2c1_init+0x64>)
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <i2c1_init+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x2000090E; // I2C standard mode: 100kHz
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <i2c1_init+0x64>)
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <i2c1_init+0x6c>)
 8000972:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <i2c1_init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <i2c1_init+0x64>)
 800097c:	2201      	movs	r2, #1
 800097e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <i2c1_init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <i2c1_init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <i2c1_init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <i2c1_init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <i2c1_init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]

	if(HAL_I2C_Init(&hi2c1) != HAL_OK)
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <i2c1_init+0x64>)
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 feff 	bl	80027a4 <HAL_I2C_Init>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d001      	beq.n	80009ae <i2c1_init+0x4a>
	{
		error_handler();
 80009aa:	f7ff fe9d 	bl	80006e8 <error_handler>
	}

	// Configure Analogue filter
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <i2c1_init+0x64>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f002 fd48 	bl	8003448 <HAL_I2CEx_ConfigAnalogFilter>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <i2c1_init+0x5c>
	{
		error_handler();
 80009bc:	f7ff fe94 	bl	80006e8 <error_handler>
	}

}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000288 	.word	0x20000288
 80009cc:	40005400 	.word	0x40005400
 80009d0:	2000090e 	.word	0x2000090e

080009d4 <i2c2_init>:

void i2c2_init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	hi2c2.Instance = I2C2;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <i2c2_init+0x64>)
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <i2c2_init+0x68>)
 80009dc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x2000090E;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <i2c2_init+0x64>)
 80009e0:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <i2c2_init+0x6c>)
 80009e2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <i2c2_init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <i2c2_init+0x64>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <i2c2_init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <i2c2_init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <i2c2_init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <i2c2_init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <i2c2_init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]

	if(HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <i2c2_init+0x64>)
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 fec7 	bl	80027a4 <HAL_I2C_Init>
 8000a16:	1e03      	subs	r3, r0, #0
 8000a18:	d001      	beq.n	8000a1e <i2c2_init+0x4a>
	{
		error_handler();
 8000a1a:	f7ff fe65 	bl	80006e8 <error_handler>
	}

	// Configure Analogue filter
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <i2c2_init+0x64>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f002 fd10 	bl	8003448 <HAL_I2CEx_ConfigAnalogFilter>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <i2c2_init+0x5c>
	{
		error_handler();
 8000a2c:	f7ff fe5c 	bl	80006e8 <error_handler>
	}

}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	200002d4 	.word	0x200002d4
 8000a3c:	40005800 	.word	0x40005800
 8000a40:	2000090e 	.word	0x2000090e

08000a44 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000a54:	f001 faee 	bl	8002034 <HAL_IncTick>
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <TIM2_IRQHandler>:


void TIM2_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <TIM2_IRQHandler+0x14>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f003 fbac 	bl	80041c4 <HAL_TIM_IRQHandler>
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	20000238 	.word	0x20000238

08000a78 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer6);
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <TIM6_DAC_IRQHandler+0x14>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 fba0 	bl	80041c4 <HAL_TIM_IRQHandler>
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	200001f0 	.word	0x200001f0

08000a90 <DMA1_Channel4_5_6_7_IRQHandler>:


void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 fc30 	bl	80022fc <HAL_DMA_IRQHandler>

}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	200003b8 	.word	0x200003b8

08000aa8 <lcd_write>:
#include "lcd.h"

static void lcd_write(uint8_t data, uint8_t add_pins)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	0002      	movs	r2, r0
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	1dbb      	adds	r3, r7, #6
 8000ab6:	1c0a      	adds	r2, r1, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | add_pins;
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	220f      	movs	r2, #15
 8000ac0:	4393      	bics	r3, r2
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	1dbb      	adds	r3, r7, #6
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2204      	movs	r2, #4
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	b2da      	uxtb	r2, r3
 8000ad2:	210c      	movs	r1, #12
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	701a      	strb	r2, [r3, #0]
	tx_data[1] = (data & 0xF0) | add_pins;
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	220f      	movs	r2, #15
 8000ae0:	4393      	bics	r3, r2
 8000ae2:	b25a      	sxtb	r2, r3
 8000ae4:	1dbb      	adds	r3, r7, #6
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	705a      	strb	r2, [r3, #1]
	tx_data[2] = (data << 4) | EN_PIN | add_pins;
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	1dbb      	adds	r3, r7, #6
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2204      	movs	r2, #4
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	709a      	strb	r2, [r3, #2]
	tx_data[3] = (data << 4) | add_pins;
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	b25a      	sxtb	r2, r3
 8000b16:	1dbb      	adds	r3, r7, #6
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	70da      	strb	r2, [r3, #3]

	if(HAL_I2C_Master_Transmit(&LCD_I2C_HANDLE, LCD_I2C_ADDR, tx_data, 4, 50))
 8000b26:	187a      	adds	r2, r7, r1
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <lcd_write+0xa4>)
 8000b2a:	2332      	movs	r3, #50	; 0x32
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	2304      	movs	r3, #4
 8000b30:	214e      	movs	r1, #78	; 0x4e
 8000b32:	f001 fecd 	bl	80028d0 <HAL_I2C_Master_Transmit>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <lcd_write+0x96>
	{
		error_handler();
 8000b3a:	f7ff fdd5 	bl	80006e8 <error_handler>
	}
	HAL_Delay(5);
 8000b3e:	2005      	movs	r0, #5
 8000b40:	f001 fa94 	bl	800206c <HAL_Delay>
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b004      	add	sp, #16
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000288 	.word	0x20000288

08000b50 <lcd_init>:

/*
 * LCD initialization in 4 bit mode
 */
void lcd_init(lcd_display* lcd)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	uint8_t bl = 0;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
	if(lcd->backlight)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <lcd_init+0x20>
	{
		bl = BL_PIN;
 8000b68:	230f      	movs	r3, #15
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	701a      	strb	r2, [r3, #0]
	}

	// LCD initialization
	HAL_Delay(40);
 8000b70:	2028      	movs	r0, #40	; 0x28
 8000b72:	f001 fa7b 	bl	800206c <HAL_Delay>
	lcd_write(CMD_8_BIT_INIT, bl);
 8000b76:	240f      	movs	r4, #15
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	2030      	movs	r0, #48	; 0x30
 8000b80:	f7ff ff92 	bl	8000aa8 <lcd_write>
	HAL_Delay(5);
 8000b84:	2005      	movs	r0, #5
 8000b86:	f001 fa71 	bl	800206c <HAL_Delay>
	lcd_write(CMD_8_BIT_INIT, bl);
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0019      	movs	r1, r3
 8000b90:	2030      	movs	r0, #48	; 0x30
 8000b92:	f7ff ff89 	bl	8000aa8 <lcd_write>
	HAL_Delay(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f001 fa68 	bl	800206c <HAL_Delay>
	lcd_write(CMD_8_BIT_INIT, bl);
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	2030      	movs	r0, #48	; 0x30
 8000ba4:	f7ff ff80 	bl	8000aa8 <lcd_write>

	lcd_write(CMD_4_BIT_INIT, bl);
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	0019      	movs	r1, r3
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff ff7a 	bl	8000aa8 <lcd_write>
	lcd_write(CURSOR_OFF_BLINKING_OFF, bl);
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	0019      	movs	r1, r3
 8000bba:	200c      	movs	r0, #12
 8000bbc:	f7ff ff74 	bl	8000aa8 <lcd_write>
	lcd_write(CMD_LCD_CLEAR, bl);
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff ff6e 	bl	8000aa8 <lcd_write>
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b005      	add	sp, #20
 8000bd2:	bd90      	pop	{r4, r7, pc}

08000bd4 <lcd_clear>:

/*
 * Function which clears LCD display
 */
void lcd_clear(lcd_display* lcd)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	uint8_t bl = 0;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
	if(lcd->backlight)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d003      	beq.n	8000bf4 <lcd_clear+0x20>
	{
		bl = BL_PIN;
 8000bec:	230f      	movs	r3, #15
 8000bee:	18fb      	adds	r3, r7, r3
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	701a      	strb	r2, [r3, #0]
	}

	lcd_write(CMD_LCD_CLEAR, bl);
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff ff53 	bl	8000aa8 <lcd_write>
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <lcd_clear_and_update>:
 *
 * @Note              - Function which sends information contained in lcd_display struct to lcd display, but
 * 						first clear display
 */
void lcd_clear_and_update(lcd_display* lcd)
{
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	uint8_t bl = 0;
 8000c14:	2317      	movs	r3, #23
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2200      	movs	r2, #0
 8000c1a:	701a      	strb	r2, [r3, #0]
	if(lcd->backlight)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d003      	beq.n	8000c2c <lcd_clear_and_update+0x20>
	{
		bl = BL_PIN;
 8000c24:	2317      	movs	r3, #23
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2208      	movs	r2, #8
 8000c2a:	701a      	strb	r2, [r3, #0]
	}

	lcd_clear(lcd);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ffd0 	bl	8000bd4 <lcd_clear>

	lcd_write(FIRST_LINE, bl);
 8000c34:	2317      	movs	r3, #23
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	2080      	movs	r0, #128	; 0x80
 8000c3e:	f7ff ff33 	bl	8000aa8 <lcd_write>
	for(int i = 0; i < fmin(strlen(lcd->line_1st), LINE_LEN); i++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	e010      	b.n	8000c6a <lcd_clear_and_update+0x5e>
	{
		lcd_write(lcd->line_1st[i] , (bl | RS_PIN));
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	3301      	adds	r3, #1
 8000c50:	7818      	ldrb	r0, [r3, #0]
 8000c52:	2317      	movs	r3, #23
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	0019      	movs	r1, r3
 8000c60:	f7ff ff22 	bl	8000aa8 <lcd_write>
	for(int i = 0; i < fmin(strlen(lcd->line_1st), LINE_LEN); i++)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	3301      	adds	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	6938      	ldr	r0, [r7, #16]
 8000c6c:	f7ff fc26 	bl	80004bc <__aeabi_i2d>
 8000c70:	0005      	movs	r5, r0
 8000c72:	000e      	movs	r6, r1
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3301      	adds	r3, #1
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff fa45 	bl	8000108 <strlen>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff fc55 	bl	8000530 <__aeabi_ui2d>
 8000c86:	2300      	movs	r3, #0
 8000c88:	4c25      	ldr	r4, [pc, #148]	; (8000d20 <lcd_clear_and_update+0x114>)
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	0023      	movs	r3, r4
 8000c8e:	f004 fd39 	bl	8005704 <fmin>
 8000c92:	0003      	movs	r3, r0
 8000c94:	000c      	movs	r4, r1
 8000c96:	001a      	movs	r2, r3
 8000c98:	0023      	movs	r3, r4
 8000c9a:	0028      	movs	r0, r5
 8000c9c:	0031      	movs	r1, r6
 8000c9e:	f7ff fadd 	bl	800025c <__aeabi_dcmplt>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d1d0      	bne.n	8000c48 <lcd_clear_and_update+0x3c>
	}

	lcd_write(SECOND_LINE, bl);
 8000ca6:	2317      	movs	r3, #23
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	0019      	movs	r1, r3
 8000cae:	20c0      	movs	r0, #192	; 0xc0
 8000cb0:	f7ff fefa 	bl	8000aa8 <lcd_write>
	for(int i = 0; i < fmin(strlen(lcd->line_2nd), LINE_LEN); i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	e010      	b.n	8000cdc <lcd_clear_and_update+0xd0>
	{
		lcd_write(lcd->line_2nd[i] , (bl | RS_PIN));
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	18d3      	adds	r3, r2, r3
 8000cc0:	3312      	adds	r3, #18
 8000cc2:	7818      	ldrb	r0, [r3, #0]
 8000cc4:	2317      	movs	r3, #23
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	0019      	movs	r1, r3
 8000cd2:	f7ff fee9 	bl	8000aa8 <lcd_write>
	for(int i = 0; i < fmin(strlen(lcd->line_2nd), LINE_LEN); i++)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68f8      	ldr	r0, [r7, #12]
 8000cde:	f7ff fbed 	bl	80004bc <__aeabi_i2d>
 8000ce2:	0005      	movs	r5, r0
 8000ce4:	000e      	movs	r6, r1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3312      	adds	r3, #18
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff fa0c 	bl	8000108 <strlen>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fc1c 	bl	8000530 <__aeabi_ui2d>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	4c09      	ldr	r4, [pc, #36]	; (8000d20 <lcd_clear_and_update+0x114>)
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	0023      	movs	r3, r4
 8000d00:	f004 fd00 	bl	8005704 <fmin>
 8000d04:	0003      	movs	r3, r0
 8000d06:	000c      	movs	r4, r1
 8000d08:	001a      	movs	r2, r3
 8000d0a:	0023      	movs	r3, r4
 8000d0c:	0028      	movs	r0, r5
 8000d0e:	0031      	movs	r1, r6
 8000d10:	f7ff faa4 	bl	800025c <__aeabi_dcmplt>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d1d0      	bne.n	8000cba <lcd_clear_and_update+0xae>
	}
}
 8000d18:	46c0      	nop			; (mov r8, r8)
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b007      	add	sp, #28
 8000d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d20:	40300000 	.word	0x40300000

08000d24 <lcd_update>:
 *
 * @Note              - Function which sends information contained in lcd_display struct to lcd display, without
 * 						clearing display
 */
void lcd_update(lcd_display* lcd, uint8_t line)
{
 8000d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d26:	b087      	sub	sp, #28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	000a      	movs	r2, r1
 8000d2e:	1cfb      	adds	r3, r7, #3
 8000d30:	701a      	strb	r2, [r3, #0]
	uint8_t bl = 0;
 8000d32:	2317      	movs	r3, #23
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
	if(lcd->backlight)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <lcd_update+0x26>
	{
		bl = BL_PIN;
 8000d42:	2317      	movs	r3, #23
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	2208      	movs	r2, #8
 8000d48:	701a      	strb	r2, [r3, #0]
	}

	if(line & LINE_FIRST)
 8000d4a:	1cfb      	adds	r3, r7, #3
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	d038      	beq.n	8000dc6 <lcd_update+0xa2>
	{
		lcd_write(FIRST_LINE, bl);
 8000d54:	2317      	movs	r3, #23
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	2080      	movs	r0, #128	; 0x80
 8000d5e:	f7ff fea3 	bl	8000aa8 <lcd_write>
		for(int i = 0; i < fmin(strlen(lcd->line_1st), LINE_LEN); i++)
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	e010      	b.n	8000d8a <lcd_update+0x66>
		{
			lcd_write(lcd->line_1st[i] , (bl | RS_PIN));
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	18d3      	adds	r3, r2, r3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	7818      	ldrb	r0, [r3, #0]
 8000d72:	2317      	movs	r3, #23
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	0019      	movs	r1, r3
 8000d80:	f7ff fe92 	bl	8000aa8 <lcd_write>
		for(int i = 0; i < fmin(strlen(lcd->line_1st), LINE_LEN); i++)
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	3301      	adds	r3, #1
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	6938      	ldr	r0, [r7, #16]
 8000d8c:	f7ff fb96 	bl	80004bc <__aeabi_i2d>
 8000d90:	0005      	movs	r5, r0
 8000d92:	000e      	movs	r6, r1
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3301      	adds	r3, #1
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff f9b5 	bl	8000108 <strlen>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff fbc5 	bl	8000530 <__aeabi_ui2d>
 8000da6:	2300      	movs	r3, #0
 8000da8:	4c28      	ldr	r4, [pc, #160]	; (8000e4c <lcd_update+0x128>)
 8000daa:	001a      	movs	r2, r3
 8000dac:	0023      	movs	r3, r4
 8000dae:	f004 fca9 	bl	8005704 <fmin>
 8000db2:	0003      	movs	r3, r0
 8000db4:	000c      	movs	r4, r1
 8000db6:	001a      	movs	r2, r3
 8000db8:	0023      	movs	r3, r4
 8000dba:	0028      	movs	r0, r5
 8000dbc:	0031      	movs	r1, r6
 8000dbe:	f7ff fa4d 	bl	800025c <__aeabi_dcmplt>
 8000dc2:	1e03      	subs	r3, r0, #0
 8000dc4:	d1d0      	bne.n	8000d68 <lcd_update+0x44>
		}
	}

	if(line & LINE_SECOND)
 8000dc6:	1cfb      	adds	r3, r7, #3
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2202      	movs	r2, #2
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d038      	beq.n	8000e42 <lcd_update+0x11e>
	{
		lcd_write(SECOND_LINE, bl);
 8000dd0:	2317      	movs	r3, #23
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	20c0      	movs	r0, #192	; 0xc0
 8000dda:	f7ff fe65 	bl	8000aa8 <lcd_write>
		for(int i = 0; i < fmin(strlen(lcd->line_2nd), LINE_LEN); i++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	e010      	b.n	8000e06 <lcd_update+0xe2>
		{
			lcd_write(lcd->line_2nd[i] , (bl | RS_PIN));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	3312      	adds	r3, #18
 8000dec:	7818      	ldrb	r0, [r3, #0]
 8000dee:	2317      	movs	r3, #23
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2201      	movs	r2, #1
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	f7ff fe54 	bl	8000aa8 <lcd_write>
		for(int i = 0; i < fmin(strlen(lcd->line_2nd), LINE_LEN); i++)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68f8      	ldr	r0, [r7, #12]
 8000e08:	f7ff fb58 	bl	80004bc <__aeabi_i2d>
 8000e0c:	0005      	movs	r5, r0
 8000e0e:	000e      	movs	r6, r1
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3312      	adds	r3, #18
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff f977 	bl	8000108 <strlen>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff fb87 	bl	8000530 <__aeabi_ui2d>
 8000e22:	2300      	movs	r3, #0
 8000e24:	4c09      	ldr	r4, [pc, #36]	; (8000e4c <lcd_update+0x128>)
 8000e26:	001a      	movs	r2, r3
 8000e28:	0023      	movs	r3, r4
 8000e2a:	f004 fc6b 	bl	8005704 <fmin>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	000c      	movs	r4, r1
 8000e32:	001a      	movs	r2, r3
 8000e34:	0023      	movs	r3, r4
 8000e36:	0028      	movs	r0, r5
 8000e38:	0031      	movs	r1, r6
 8000e3a:	f7ff fa0f 	bl	800025c <__aeabi_dcmplt>
 8000e3e:	1e03      	subs	r3, r0, #0
 8000e40:	d1d0      	bne.n	8000de4 <lcd_update+0xc0>
		}
	}
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b007      	add	sp, #28
 8000e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	40300000 	.word	0x40300000

08000e50 <led_init>:
 * @return            - None
 *
 * @Note              - Initialize led strip
 */
void led_init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef clock_config = {0};
 8000e56:	231c      	movs	r3, #28
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	001a      	movs	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	f004 f83a 	bl	8004eda <memset>
	TIM_OC_InitTypeDef tim3OC_init = {0};
 8000e66:	003b      	movs	r3, r7
 8000e68:	0018      	movs	r0, r3
 8000e6a:	231c      	movs	r3, #28
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	2100      	movs	r1, #0
 8000e70:	f004 f833 	bl	8004eda <memset>

	htimer3.Instance = TIM3;
 8000e74:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <led_init+0xd8>)
 8000e76:	4a2d      	ldr	r2, [pc, #180]	; (8000f2c <led_init+0xdc>)
 8000e78:	601a      	str	r2, [r3, #0]
	htimer3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <led_init+0xd8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
	htimer3.Init.Period = 49;
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <led_init+0xd8>)
 8000e82:	2231      	movs	r2, #49	; 0x31
 8000e84:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htimer3) != HAL_OK)
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <led_init+0xd8>)
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f003 f807 	bl	8003e9c <HAL_TIM_Base_Init>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d001      	beq.n	8000e96 <led_init+0x46>
	{
	error_handler();
 8000e92:	f7ff fc29 	bl	80006e8 <error_handler>
	}

	clock_config.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	211c      	movs	r1, #28
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2280      	movs	r2, #128	; 0x80
 8000e9c:	0152      	lsls	r2, r2, #5
 8000e9e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htimer3, &clock_config) != HAL_OK)
 8000ea0:	187a      	adds	r2, r7, r1
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <led_init+0xd8>)
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f003 fbb0 	bl	800460c <HAL_TIM_ConfigClockSource>
 8000eac:	1e03      	subs	r3, r0, #0
 8000eae:	d001      	beq.n	8000eb4 <led_init+0x64>
	{
	  error_handler();
 8000eb0:	f7ff fc1a 	bl	80006e8 <error_handler>
	}

	if (HAL_TIM_PWM_Init(&htimer3) != HAL_OK)
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <led_init+0xd8>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f003 f92c 	bl	8004114 <HAL_TIM_PWM_Init>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d001      	beq.n	8000ec4 <led_init+0x74>
	{
	  error_handler();
 8000ec0:	f7ff fc12 	bl	80006e8 <error_handler>
	}

	tim3OC_init.OCMode = TIM_OCMODE_PWM1;
 8000ec4:	003b      	movs	r3, r7
 8000ec6:	2260      	movs	r2, #96	; 0x60
 8000ec8:	601a      	str	r2, [r3, #0]
	tim3OC_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eca:	003b      	movs	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
	if (HAL_TIM_PWM_ConfigChannel(&htimer3, &tim3OC_init, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	0039      	movs	r1, r7
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <led_init+0xd8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f003 fadc 	bl	8004494 <HAL_TIM_PWM_ConfigChannel>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <led_init+0x94>
	{
	  error_handler();
 8000ee0:	f7ff fc02 	bl	80006e8 <error_handler>
	}
	HAL_TIM_MspPostInit(&htimer3);
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <led_init+0xd8>)
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 fde8 	bl	8001abc <HAL_TIM_MspPostInit>

	for(int i = 0; i < RESET_CODE_LEN; i++)
 8000eec:	2300      	movs	r3, #0
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ef0:	e007      	b.n	8000f02 <led_init+0xb2>
	{
		buffer[i] = CODE_RESET_HIGH;
 8000ef2:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <led_init+0xe0>)
 8000ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef6:	18d3      	adds	r3, r2, r3
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < RESET_CODE_LEN; i++)
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	3301      	adds	r3, #1
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f04:	2b27      	cmp	r3, #39	; 0x27
 8000f06:	ddf4      	ble.n	8000ef2 <led_init+0xa2>
	}

	buffer[RESET_CODE_LEN + LED_RGB_COLOR_LEN * LED_NUM + 1] = LINE_HIGH;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <led_init+0xe0>)
 8000f0a:	22e9      	movs	r2, #233	; 0xe9
 8000f0c:	2132      	movs	r1, #50	; 0x32
 8000f0e:	5499      	strb	r1, [r3, r2]

	if(HAL_TIM_Base_Start(&htimer3) != HAL_OK)
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <led_init+0xd8>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f003 f812 	bl	8003f3c <HAL_TIM_Base_Start>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <led_init+0xd0>
	{
		error_handler();
 8000f1c:	f7ff fbe4 	bl	80006e8 <error_handler>
	}
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b00c      	add	sp, #48	; 0x30
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000320 	.word	0x20000320
 8000f2c:	40000400 	.word	0x40000400
 8000f30:	200000f0 	.word	0x200000f0

08000f34 <main>:

static char* rtc_month_roman[12] = { "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII" };
static char* rtc_day_str[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };

int main(void)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
	// Basic initializations - START
	HAL_Init();
 8000f3a:	f001 f833 	bl	8001fa4 <HAL_Init>
	clock_configuration();
 8000f3e:	f7ff fb65 	bl	800060c <clock_configuration>

	i2c1_init();
 8000f42:	f7ff fd0f 	bl	8000964 <i2c1_init>
	i2c2_init();
 8000f46:	f7ff fd45 	bl	80009d4 <i2c2_init>
	gpio_init();
 8000f4a:	f7ff fc2b 	bl	80007a4 <gpio_init>
	buzzer_init();
 8000f4e:	f7ff fbcf 	bl	80006f0 <buzzer_init>
	lcd_init(&display);
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <main+0xb8>)
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fdfb 	bl	8000b50 <lcd_init>
	lcd_clear_and_update(&display);
 8000f5a:	4b24      	ldr	r3, [pc, #144]	; (8000fec <main+0xb8>)
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f7ff fe55 	bl	8000c0c <lcd_clear_and_update>
	DMA_init();
 8000f62:	f7ff fb35 	bl	80005d0 <DMA_init>
	led_init();
 8000f66:	f7ff ff73 	bl	8000e50 <led_init>
	interrupt_1s_init();
 8000f6a:	f7ff fb97 	bl	800069c <interrupt_1s_init>
	// Basic initializations - END

	// Default initialization - START
	display.backlight = 1;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <main+0xb8>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
	date.day = 1;
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <main+0xbc>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
	date.date = 1;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <main+0xbc>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	705a      	strb	r2, [r3, #1]
	date.month = 1;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <main+0xbc>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	709a      	strb	r2, [r3, #2]
	date.year = 10;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <main+0xbc>)
 8000f88:	220a      	movs	r2, #10
 8000f8a:	70da      	strb	r2, [r3, #3]

	rtc_set_time(&time);
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <main+0xc0>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 fdd2 	bl	8001b38 <rtc_set_time>
	rtc_set_date(&date);
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <main+0xbc>)
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 fe58 	bl	8001c4c <rtc_set_date>


	time_date_actualization(STRICT_UPDATE_FALSE);
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f000 f82f 	bl	8001000 <time_date_actualization>
//			led_update_color(led, r, g, b);
//			led_send_color();
//			HAL_Delay(100);
//		}

		uint32_t time = HAL_GetTick();
 8000fa2:	f001 f859 	bl	8002058 <HAL_GetTick>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	607b      	str	r3, [r7, #4]
		while(button_read(BUTTON_ACCEPT) == BUTTON_PUSHED)
 8000faa:	e00d      	b.n	8000fc8 <main+0x94>
		{
			if(time + 500 < HAL_GetTick()) // BUTTON_ACCEPT --> main_menu()
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	33f5      	adds	r3, #245	; 0xf5
 8000fb0:	33ff      	adds	r3, #255	; 0xff
 8000fb2:	001c      	movs	r4, r3
 8000fb4:	f001 f850 	bl	8002058 <HAL_GetTick>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	429c      	cmp	r4, r3
 8000fbc:	d204      	bcs.n	8000fc8 <main+0x94>
			{
				current_state = 0;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <main+0xc4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
				main_menu();
 8000fc4:	f000 f91a 	bl	80011fc <main_menu>
		while(button_read(BUTTON_ACCEPT) == BUTTON_PUSHED)
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f7ff fc6f 	bl	80008ac <button_read>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d0eb      	beq.n	8000fac <main+0x78>
			}
		}


		if(IT_every_1s)
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <main+0xc8>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0e1      	beq.n	8000fa2 <main+0x6e>
		{
			time_date_actualization(STRICT_UPDATE_FALSE);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f80e 	bl	8001000 <time_date_actualization>
			IT_every_1s = 0;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <main+0xc8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
	{
 8000fea:	e7da      	b.n	8000fa2 <main+0x6e>
 8000fec:	2000036c 	.word	0x2000036c
 8000ff0:	200001e0 	.word	0x200001e0
 8000ff4:	200001dc 	.word	0x200001dc
 8000ff8:	20000368 	.word	0x20000368
 8000ffc:	200001d9 	.word	0x200001d9

08001000 <time_date_actualization>:
 *
 * @Note              - This function actualize time from rtc on lcd. Time is always updated, but date only when
 * 						strict_update is true or when second in time is 0.
 */
void time_date_actualization(bool strict_update)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af02      	add	r7, sp, #8
 8001006:	0002      	movs	r2, r0
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	701a      	strb	r2, [r3, #0]
	time = rtc_get_time();
 800100c:	f000 fdca 	bl	8001ba4 <rtc_get_time>
 8001010:	0003      	movs	r3, r0
 8001012:	001a      	movs	r2, r3
 8001014:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <time_date_actualization+0x1c0>)
 8001016:	1c11      	adds	r1, r2, #0
 8001018:	7019      	strb	r1, [r3, #0]
 800101a:	0411      	lsls	r1, r2, #16
 800101c:	0e09      	lsrs	r1, r1, #24
 800101e:	7059      	strb	r1, [r3, #1]
 8001020:	0212      	lsls	r2, r2, #8
 8001022:	0e12      	lsrs	r2, r2, #24
 8001024:	709a      	strb	r2, [r3, #2]
	date = rtc_get_date();
 8001026:	f000 fe51 	bl	8001ccc <rtc_get_date>
 800102a:	0003      	movs	r3, r0
 800102c:	001a      	movs	r2, r3
 800102e:	4b65      	ldr	r3, [pc, #404]	; (80011c4 <time_date_actualization+0x1c4>)
 8001030:	601a      	str	r2, [r3, #0]

	if(time.seconds == 0 || strict_update == true)
 8001032:	4b63      	ldr	r3, [pc, #396]	; (80011c0 <time_date_actualization+0x1c0>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <time_date_actualization+0x42>
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d017      	beq.n	8001072 <time_date_actualization+0x72>
	{
		sprintf(display_line_1, "%d.%s.20%dr", date.date, rtc_month_roman[date.month - 1], date.year);
 8001042:	4b60      	ldr	r3, [pc, #384]	; (80011c4 <time_date_actualization+0x1c4>)
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	001c      	movs	r4, r3
 8001048:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <time_date_actualization+0x1c4>)
 800104a:	789b      	ldrb	r3, [r3, #2]
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	4b5e      	ldr	r3, [pc, #376]	; (80011c8 <time_date_actualization+0x1c8>)
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	58d2      	ldr	r2, [r2, r3]
 8001054:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <time_date_actualization+0x1c4>)
 8001056:	78db      	ldrb	r3, [r3, #3]
 8001058:	495c      	ldr	r1, [pc, #368]	; (80011cc <time_date_actualization+0x1cc>)
 800105a:	485d      	ldr	r0, [pc, #372]	; (80011d0 <time_date_actualization+0x1d0>)
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	0013      	movs	r3, r2
 8001060:	0022      	movs	r2, r4
 8001062:	f003 ff43 	bl	8004eec <siprintf>
		sprintf(display.line_1st, display_line_1);
 8001066:	4a5a      	ldr	r2, [pc, #360]	; (80011d0 <time_date_actualization+0x1d0>)
 8001068:	4b5a      	ldr	r3, [pc, #360]	; (80011d4 <time_date_actualization+0x1d4>)
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f003 ff3d 	bl	8004eec <siprintf>
	}

	char hours[4] = {0};
 8001072:	2314      	movs	r3, #20
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
	char minutes[4] = {0};
 800107a:	2310      	movs	r3, #16
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
	char seconds[3] = {0};
 8001082:	230c      	movs	r3, #12
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	0018      	movs	r0, r3
 8001088:	2303      	movs	r3, #3
 800108a:	001a      	movs	r2, r3
 800108c:	2100      	movs	r1, #0
 800108e:	f003 ff24 	bl	8004eda <memset>

	if(time.hours < 10)
 8001092:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <time_date_actualization+0x1c0>)
 8001094:	789b      	ldrb	r3, [r3, #2]
 8001096:	2b09      	cmp	r3, #9
 8001098:	d809      	bhi.n	80010ae <time_date_actualization+0xae>
	{
		sprintf(hours, "0%d:", time.hours);
 800109a:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <time_date_actualization+0x1c0>)
 800109c:	789b      	ldrb	r3, [r3, #2]
 800109e:	001a      	movs	r2, r3
 80010a0:	494d      	ldr	r1, [pc, #308]	; (80011d8 <time_date_actualization+0x1d8>)
 80010a2:	2314      	movs	r3, #20
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	0018      	movs	r0, r3
 80010a8:	f003 ff20 	bl	8004eec <siprintf>
 80010ac:	e008      	b.n	80010c0 <time_date_actualization+0xc0>
	}
	else
	{
		sprintf(hours, "%d:", time.hours);
 80010ae:	4b44      	ldr	r3, [pc, #272]	; (80011c0 <time_date_actualization+0x1c0>)
 80010b0:	789b      	ldrb	r3, [r3, #2]
 80010b2:	001a      	movs	r2, r3
 80010b4:	4949      	ldr	r1, [pc, #292]	; (80011dc <time_date_actualization+0x1dc>)
 80010b6:	2314      	movs	r3, #20
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	0018      	movs	r0, r3
 80010bc:	f003 ff16 	bl	8004eec <siprintf>
	}

	if(time.minutes < 10)
 80010c0:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <time_date_actualization+0x1c0>)
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b09      	cmp	r3, #9
 80010c6:	d809      	bhi.n	80010dc <time_date_actualization+0xdc>
	{
		sprintf(minutes, "0%d:", time.minutes);
 80010c8:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <time_date_actualization+0x1c0>)
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	001a      	movs	r2, r3
 80010ce:	4942      	ldr	r1, [pc, #264]	; (80011d8 <time_date_actualization+0x1d8>)
 80010d0:	2310      	movs	r3, #16
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	0018      	movs	r0, r3
 80010d6:	f003 ff09 	bl	8004eec <siprintf>
 80010da:	e008      	b.n	80010ee <time_date_actualization+0xee>
	}
	else
	{
		sprintf(minutes, "%d:", time.minutes);
 80010dc:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <time_date_actualization+0x1c0>)
 80010de:	785b      	ldrb	r3, [r3, #1]
 80010e0:	001a      	movs	r2, r3
 80010e2:	493e      	ldr	r1, [pc, #248]	; (80011dc <time_date_actualization+0x1dc>)
 80010e4:	2310      	movs	r3, #16
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	0018      	movs	r0, r3
 80010ea:	f003 feff 	bl	8004eec <siprintf>
	}

	if(time.seconds < 10)
 80010ee:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <time_date_actualization+0x1c0>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b09      	cmp	r3, #9
 80010f4:	d809      	bhi.n	800110a <time_date_actualization+0x10a>
	{
		sprintf(seconds, "0%d", time.seconds);
 80010f6:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <time_date_actualization+0x1c0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	001a      	movs	r2, r3
 80010fc:	4938      	ldr	r1, [pc, #224]	; (80011e0 <time_date_actualization+0x1e0>)
 80010fe:	230c      	movs	r3, #12
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	0018      	movs	r0, r3
 8001104:	f003 fef2 	bl	8004eec <siprintf>
 8001108:	e008      	b.n	800111c <time_date_actualization+0x11c>
	}
	else
	{
		sprintf(seconds, "%d", time.seconds);
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <time_date_actualization+0x1c0>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	001a      	movs	r2, r3
 8001110:	4934      	ldr	r1, [pc, #208]	; (80011e4 <time_date_actualization+0x1e4>)
 8001112:	230c      	movs	r3, #12
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	0018      	movs	r0, r3
 8001118:	f003 fee8 	bl	8004eec <siprintf>
	}

	memset(display_line_2,0,strlen(display_line_2));
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <time_date_actualization+0x1e8>)
 800111e:	0018      	movs	r0, r3
 8001120:	f7fe fff2 	bl	8000108 <strlen>
 8001124:	0002      	movs	r2, r0
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <time_date_actualization+0x1e8>)
 8001128:	2100      	movs	r1, #0
 800112a:	0018      	movs	r0, r3
 800112c:	f003 fed5 	bl	8004eda <memset>

	strcat(display_line_2, hours);
 8001130:	2314      	movs	r3, #20
 8001132:	18fa      	adds	r2, r7, r3
 8001134:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <time_date_actualization+0x1e8>)
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f003 fef7 	bl	8004f2c <strcat>
	strcat(display_line_2, minutes);
 800113e:	2310      	movs	r3, #16
 8001140:	18fa      	adds	r2, r7, r3
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <time_date_actualization+0x1e8>)
 8001144:	0011      	movs	r1, r2
 8001146:	0018      	movs	r0, r3
 8001148:	f003 fef0 	bl	8004f2c <strcat>
	strcat(display_line_2, seconds);
 800114c:	230c      	movs	r3, #12
 800114e:	18fa      	adds	r2, r7, r3
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <time_date_actualization+0x1e8>)
 8001152:	0011      	movs	r1, r2
 8001154:	0018      	movs	r0, r3
 8001156:	f003 fee9 	bl	8004f2c <strcat>
	strcat(display_line_2, "     ");
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <time_date_actualization+0x1e8>)
 800115c:	0018      	movs	r0, r3
 800115e:	f7fe ffd3 	bl	8000108 <strlen>
 8001162:	0003      	movs	r3, r0
 8001164:	001a      	movs	r2, r3
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <time_date_actualization+0x1e8>)
 8001168:	18d2      	adds	r2, r2, r3
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <time_date_actualization+0x1ec>)
 800116c:	0010      	movs	r0, r2
 800116e:	0019      	movs	r1, r3
 8001170:	2306      	movs	r3, #6
 8001172:	001a      	movs	r2, r3
 8001174:	f003 fea8 	bl	8004ec8 <memcpy>
	strcat(display_line_2, rtc_day_str[date.day - 1]);
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <time_date_actualization+0x1c4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <time_date_actualization+0x1f0>)
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	58d2      	ldr	r2, [r2, r3]
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <time_date_actualization+0x1e8>)
 8001186:	0011      	movs	r1, r2
 8001188:	0018      	movs	r0, r3
 800118a:	f003 fecf 	bl	8004f2c <strcat>


	sprintf(display.line_2nd, display_line_2);
 800118e:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <time_date_actualization+0x1e8>)
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <time_date_actualization+0x1f4>)
 8001192:	0011      	movs	r1, r2
 8001194:	0018      	movs	r0, r3
 8001196:	f003 fea9 	bl	8004eec <siprintf>

	if(time.seconds == 0)
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <time_date_actualization+0x1c0>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d104      	bne.n	80011ac <time_date_actualization+0x1ac>
	{
		lcd_clear_and_update(&display);
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <time_date_actualization+0x1f8>)
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fd31 	bl	8000c0c <lcd_clear_and_update>
	else
	{
		lcd_update(&display, LINE_SECOND);
	}

}
 80011aa:	e004      	b.n	80011b6 <time_date_actualization+0x1b6>
		lcd_update(&display, LINE_SECOND);
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <time_date_actualization+0x1f8>)
 80011ae:	2102      	movs	r1, #2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fdb7 	bl	8000d24 <lcd_update>
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b007      	add	sp, #28
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	200001dc 	.word	0x200001dc
 80011c4:	200001e0 	.word	0x200001e0
 80011c8:	20000000 	.word	0x20000000
 80011cc:	080057f4 	.word	0x080057f4
 80011d0:	20000390 	.word	0x20000390
 80011d4:	2000036d 	.word	0x2000036d
 80011d8:	08005800 	.word	0x08005800
 80011dc:	08005808 	.word	0x08005808
 80011e0:	0800580c 	.word	0x0800580c
 80011e4:	08005810 	.word	0x08005810
 80011e8:	200003a4 	.word	0x200003a4
 80011ec:	08005814 	.word	0x08005814
 80011f0:	20000030 	.word	0x20000030
 80011f4:	2000037e 	.word	0x2000037e
 80011f8:	2000036c 	.word	0x2000036c

080011fc <main_menu>:

void main_menu(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	bool end_main_menu_loop = false;
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]

	static char* menu_options[6] = {"<-  SET TIME  ->", "<- SET ALARM1 ->", "<- SET ALARM2 ->", "<- SET BUZZER ->",
								   "<-  SET  LED  ->", "<-    EXIT    ->"};

	sprintf(display.line_1st, "   MAIN  MENU   ");
 8001208:	4b45      	ldr	r3, [pc, #276]	; (8001320 <main_menu+0x124>)
 800120a:	2201      	movs	r2, #1
 800120c:	4945      	ldr	r1, [pc, #276]	; (8001324 <main_menu+0x128>)
 800120e:	189b      	adds	r3, r3, r2
 8001210:	2211      	movs	r2, #17
 8001212:	0018      	movs	r0, r3
 8001214:	f003 fe58 	bl	8004ec8 <memcpy>
	sprintf(display.line_2nd, menu_options[current_state]);
 8001218:	4b43      	ldr	r3, [pc, #268]	; (8001328 <main_menu+0x12c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	001a      	movs	r2, r3
 800121e:	4b43      	ldr	r3, [pc, #268]	; (800132c <main_menu+0x130>)
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	58d2      	ldr	r2, [r2, r3]
 8001224:	4b42      	ldr	r3, [pc, #264]	; (8001330 <main_menu+0x134>)
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f003 fe5f 	bl	8004eec <siprintf>
	lcd_clear_and_update(&display);
 800122e:	4b3c      	ldr	r3, [pc, #240]	; (8001320 <main_menu+0x124>)
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff fceb 	bl	8000c0c <lcd_clear_and_update>

	while(1)
	{
		if(button_read(BUTTON_RIGHT) == BUTTON_PUSHED)
 8001236:	2003      	movs	r0, #3
 8001238:	f7ff fb38 	bl	80008ac <button_read>
 800123c:	0003      	movs	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	d11c      	bne.n	800127c <main_menu+0x80>
		{
			if(current_state <= 4)
 8001242:	4b39      	ldr	r3, [pc, #228]	; (8001328 <main_menu+0x12c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d818      	bhi.n	800127c <main_menu+0x80>
			{
				current_state++;
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <main_menu+0x12c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3301      	adds	r3, #1
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b35      	ldr	r3, [pc, #212]	; (8001328 <main_menu+0x12c>)
 8001254:	701a      	strb	r2, [r3, #0]
				sprintf(display.line_2nd, menu_options[current_state]);
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <main_menu+0x12c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	001a      	movs	r2, r3
 800125c:	4b33      	ldr	r3, [pc, #204]	; (800132c <main_menu+0x130>)
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	58d2      	ldr	r2, [r2, r3]
 8001262:	4b33      	ldr	r3, [pc, #204]	; (8001330 <main_menu+0x134>)
 8001264:	0011      	movs	r1, r2
 8001266:	0018      	movs	r0, r3
 8001268:	f003 fe40 	bl	8004eec <siprintf>
				lcd_update(&display, LINE_SECOND);
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <main_menu+0x124>)
 800126e:	2102      	movs	r1, #2
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff fd57 	bl	8000d24 <lcd_update>
				HAL_Delay(100); // debouncing protection
 8001276:	2064      	movs	r0, #100	; 0x64
 8001278:	f000 fef8 	bl	800206c <HAL_Delay>
			}
		}

		if(button_read(BUTTON_LEFT) == BUTTON_PUSHED)
 800127c:	2002      	movs	r0, #2
 800127e:	f7ff fb15 	bl	80008ac <button_read>
 8001282:	0003      	movs	r3, r0
 8001284:	2b01      	cmp	r3, #1
 8001286:	d124      	bne.n	80012d2 <main_menu+0xd6>
		{
			if(current_state >= 1)
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <main_menu+0x12c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <main_menu+0xd6>
			{
				current_state--;
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <main_menu+0x12c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	3b01      	subs	r3, #1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <main_menu+0x12c>)
 800129a:	701a      	strb	r2, [r3, #0]
				sprintf(display.line_1st, "   MAIN  MENU   ");
 800129c:	4b20      	ldr	r3, [pc, #128]	; (8001320 <main_menu+0x124>)
 800129e:	2201      	movs	r2, #1
 80012a0:	4920      	ldr	r1, [pc, #128]	; (8001324 <main_menu+0x128>)
 80012a2:	189b      	adds	r3, r3, r2
 80012a4:	2211      	movs	r2, #17
 80012a6:	0018      	movs	r0, r3
 80012a8:	f003 fe0e 	bl	8004ec8 <memcpy>
				sprintf(display.line_2nd, menu_options[current_state]);
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <main_menu+0x12c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	001a      	movs	r2, r3
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <main_menu+0x130>)
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	58d2      	ldr	r2, [r2, r3]
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <main_menu+0x134>)
 80012ba:	0011      	movs	r1, r2
 80012bc:	0018      	movs	r0, r3
 80012be:	f003 fe15 	bl	8004eec <siprintf>
				lcd_update(&display, LINE_SECOND);
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <main_menu+0x124>)
 80012c4:	2102      	movs	r1, #2
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7ff fd2c 	bl	8000d24 <lcd_update>
				HAL_Delay(100); // debouncing protection
 80012cc:	2064      	movs	r0, #100	; 0x64
 80012ce:	f000 fecd 	bl	800206c <HAL_Delay>
			}
		}

		if(button_read(BUTTON_ACCEPT) == BUTTON_PUSHED)
 80012d2:	2001      	movs	r0, #1
 80012d4:	f7ff faea 	bl	80008ac <button_read>
 80012d8:	0003      	movs	r3, r0
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10f      	bne.n	80012fe <main_menu+0x102>
		{
			switch (current_state) {
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <main_menu+0x12c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b05      	cmp	r3, #5
 80012e4:	d80d      	bhi.n	8001302 <main_menu+0x106>
 80012e6:	009a      	lsls	r2, r3, #2
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <main_menu+0x138>)
 80012ea:	18d3      	adds	r3, r2, r3
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	469f      	mov	pc, r3
				case STATE_DATE_TIME:
					set_date_time();
 80012f0:	f000 f822 	bl	8001338 <set_date_time>
					break;
 80012f4:	e008      	b.n	8001308 <main_menu+0x10c>
					break;
				case STATE_LED:

					break;
				case STATE_EXIT:
					end_main_menu_loop = true;
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
					break;
 80012fc:	e004      	b.n	8001308 <main_menu+0x10c>
				default:
					break;
			}
		}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	e002      	b.n	8001308 <main_menu+0x10c>
					break;
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	e000      	b.n	8001308 <main_menu+0x10c>
					break;
 8001306:	46c0      	nop			; (mov r8, r8)

		if(end_main_menu_loop == true)
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d092      	beq.n	8001236 <main_menu+0x3a>
		{
			HAL_Delay(100); // debouncing protection
 8001310:	2064      	movs	r0, #100	; 0x64
 8001312:	f000 feab 	bl	800206c <HAL_Delay>
			break;
 8001316:	46c0      	nop			; (mov r8, r8)
		}

	}
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000036c 	.word	0x2000036c
 8001324:	0800581c 	.word	0x0800581c
 8001328:	20000368 	.word	0x20000368
 800132c:	2000004c 	.word	0x2000004c
 8001330:	2000037e 	.word	0x2000037e
 8001334:	08005914 	.word	0x08005914

08001338 <set_date_time>:

void set_date_time(void)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b087      	sub	sp, #28
 800133c:	af02      	add	r7, sp, #8
	RTC_date new_date = {0};
 800133e:	2408      	movs	r4, #8
 8001340:	193b      	adds	r3, r7, r4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
	RTC_time new_time = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	0018      	movs	r0, r3
 800134a:	2303      	movs	r3, #3
 800134c:	001a      	movs	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	f003 fdc3 	bl	8004eda <memset>

	new_date.date = 1;
 8001354:	193b      	adds	r3, r7, r4
 8001356:	2201      	movs	r2, #1
 8001358:	705a      	strb	r2, [r3, #1]
	new_date.month = DS3231_RTC_JANUARY;
 800135a:	193b      	adds	r3, r7, r4
 800135c:	2201      	movs	r2, #1
 800135e:	709a      	strb	r2, [r3, #2]
	new_date.year = 10;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	220a      	movs	r2, #10
 8001364:	70da      	strb	r2, [r3, #3]
	new_date.day = DS3231_RTC_SUNDAY;
 8001366:	193b      	adds	r3, r7, r4
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]

	sprintf(display.line_1st, "    SET DATE    ");
 800136c:	4bcf      	ldr	r3, [pc, #828]	; (80016ac <set_date_time+0x374>)
 800136e:	2201      	movs	r2, #1
 8001370:	49cf      	ldr	r1, [pc, #828]	; (80016b0 <set_date_time+0x378>)
 8001372:	189b      	adds	r3, r3, r2
 8001374:	2211      	movs	r2, #17
 8001376:	0018      	movs	r0, r3
 8001378:	f003 fda6 	bl	8004ec8 <memcpy>
	sprintf(display.line_2nd, "%d.%s.20%dr   %s", new_date.date, rtc_month_roman[new_date.month], new_date.year, rtc_day_str[new_date.day]);
 800137c:	0021      	movs	r1, r4
 800137e:	187b      	adds	r3, r7, r1
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	001e      	movs	r6, r3
 8001384:	187b      	adds	r3, r7, r1
 8001386:	789b      	ldrb	r3, [r3, #2]
 8001388:	001a      	movs	r2, r3
 800138a:	4bca      	ldr	r3, [pc, #808]	; (80016b4 <set_date_time+0x37c>)
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	58d4      	ldr	r4, [r2, r3]
 8001390:	187b      	adds	r3, r7, r1
 8001392:	78db      	ldrb	r3, [r3, #3]
 8001394:	001d      	movs	r5, r3
 8001396:	187b      	adds	r3, r7, r1
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	001a      	movs	r2, r3
 800139c:	4bc6      	ldr	r3, [pc, #792]	; (80016b8 <set_date_time+0x380>)
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	58d3      	ldr	r3, [r2, r3]
 80013a2:	49c6      	ldr	r1, [pc, #792]	; (80016bc <set_date_time+0x384>)
 80013a4:	48c6      	ldr	r0, [pc, #792]	; (80016c0 <set_date_time+0x388>)
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	9500      	str	r5, [sp, #0]
 80013aa:	0023      	movs	r3, r4
 80013ac:	0032      	movs	r2, r6
 80013ae:	f003 fd9d 	bl	8004eec <siprintf>
	lcd_clear_and_update(&display);
 80013b2:	4bbe      	ldr	r3, [pc, #760]	; (80016ac <set_date_time+0x374>)
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff fc29 	bl	8000c0c <lcd_clear_and_update>

	current_substate = STATE_DATE;
 80013ba:	4bc2      	ldr	r3, [pc, #776]	; (80016c4 <set_date_time+0x38c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]

	bool end_date_time_loop = false;
 80013c0:	230f      	movs	r3, #15
 80013c2:	18fb      	adds	r3, r7, r3
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(button_read(BUTTON_UP) == BUTTON_PUSHED)
 80013c8:	2004      	movs	r0, #4
 80013ca:	f7ff fa6f 	bl	80008ac <button_read>
 80013ce:	0003      	movs	r3, r0
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d165      	bne.n	80014a0 <set_date_time+0x168>
		{
			if(current_substate == STATE_DATE)
 80013d4:	4bbb      	ldr	r3, [pc, #748]	; (80016c4 <set_date_time+0x38c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d10c      	bne.n	80013f6 <set_date_time+0xbe>
			{
				if(new_date.date < 31)
 80013dc:	2308      	movs	r3, #8
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	2b1e      	cmp	r3, #30
 80013e4:	d839      	bhi.n	800145a <set_date_time+0x122>
				{
					new_date.date++;
 80013e6:	2108      	movs	r1, #8
 80013e8:	187b      	adds	r3, r7, r1
 80013ea:	785b      	ldrb	r3, [r3, #1]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	705a      	strb	r2, [r3, #1]
 80013f4:	e031      	b.n	800145a <set_date_time+0x122>
				}
			}
			else if(current_substate == STATE_MONTH)
 80013f6:	4bb3      	ldr	r3, [pc, #716]	; (80016c4 <set_date_time+0x38c>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10c      	bne.n	8001418 <set_date_time+0xe0>
			{
				if(new_date.month < 12)
 80013fe:	2308      	movs	r3, #8
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	789b      	ldrb	r3, [r3, #2]
 8001404:	2b0b      	cmp	r3, #11
 8001406:	d828      	bhi.n	800145a <set_date_time+0x122>
				{
					new_date.date++;
 8001408:	2108      	movs	r1, #8
 800140a:	187b      	adds	r3, r7, r1
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	3301      	adds	r3, #1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	187b      	adds	r3, r7, r1
 8001414:	705a      	strb	r2, [r3, #1]
 8001416:	e020      	b.n	800145a <set_date_time+0x122>
				}
			}
			else if(current_substate == STATE_YEAR)
 8001418:	4baa      	ldr	r3, [pc, #680]	; (80016c4 <set_date_time+0x38c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b02      	cmp	r3, #2
 800141e:	d10c      	bne.n	800143a <set_date_time+0x102>
			{
				if(new_date.year < 99)
 8001420:	2308      	movs	r3, #8
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	2b62      	cmp	r3, #98	; 0x62
 8001428:	d817      	bhi.n	800145a <set_date_time+0x122>
				{
					new_date.year++;
 800142a:	2108      	movs	r1, #8
 800142c:	187b      	adds	r3, r7, r1
 800142e:	78db      	ldrb	r3, [r3, #3]
 8001430:	3301      	adds	r3, #1
 8001432:	b2da      	uxtb	r2, r3
 8001434:	187b      	adds	r3, r7, r1
 8001436:	70da      	strb	r2, [r3, #3]
 8001438:	e00f      	b.n	800145a <set_date_time+0x122>
				}
			}
			else if(current_substate == STATE_DAY)
 800143a:	4ba2      	ldr	r3, [pc, #648]	; (80016c4 <set_date_time+0x38c>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d10b      	bne.n	800145a <set_date_time+0x122>
			{
				if(new_date.day < 7)
 8001442:	2308      	movs	r3, #8
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b06      	cmp	r3, #6
 800144a:	d806      	bhi.n	800145a <set_date_time+0x122>
				{
					new_date.day++;
 800144c:	2108      	movs	r1, #8
 800144e:	187b      	adds	r3, r7, r1
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3301      	adds	r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	187b      	adds	r3, r7, r1
 8001458:	701a      	strb	r2, [r3, #0]
				}
			}

			sprintf(display.line_2nd, "%d.%s.20%dr   %s", new_date.date, rtc_month_roman[new_date.month], new_date.year, rtc_day_str[new_date.day]);
 800145a:	2108      	movs	r1, #8
 800145c:	187b      	adds	r3, r7, r1
 800145e:	785b      	ldrb	r3, [r3, #1]
 8001460:	001e      	movs	r6, r3
 8001462:	187b      	adds	r3, r7, r1
 8001464:	789b      	ldrb	r3, [r3, #2]
 8001466:	001a      	movs	r2, r3
 8001468:	4b92      	ldr	r3, [pc, #584]	; (80016b4 <set_date_time+0x37c>)
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	58d4      	ldr	r4, [r2, r3]
 800146e:	187b      	adds	r3, r7, r1
 8001470:	78db      	ldrb	r3, [r3, #3]
 8001472:	001d      	movs	r5, r3
 8001474:	187b      	adds	r3, r7, r1
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	001a      	movs	r2, r3
 800147a:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <set_date_time+0x380>)
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	58d3      	ldr	r3, [r2, r3]
 8001480:	498e      	ldr	r1, [pc, #568]	; (80016bc <set_date_time+0x384>)
 8001482:	488f      	ldr	r0, [pc, #572]	; (80016c0 <set_date_time+0x388>)
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	9500      	str	r5, [sp, #0]
 8001488:	0023      	movs	r3, r4
 800148a:	0032      	movs	r2, r6
 800148c:	f003 fd2e 	bl	8004eec <siprintf>
			lcd_update(&display, LINE_SECOND);
 8001490:	4b86      	ldr	r3, [pc, #536]	; (80016ac <set_date_time+0x374>)
 8001492:	2102      	movs	r1, #2
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff fc45 	bl	8000d24 <lcd_update>
			HAL_Delay(100); // debouncing protection
 800149a:	2064      	movs	r0, #100	; 0x64
 800149c:	f000 fde6 	bl	800206c <HAL_Delay>

		}

		if(button_read(BUTTON_DOWN) == BUTTON_PUSHED)
 80014a0:	2005      	movs	r0, #5
 80014a2:	f7ff fa03 	bl	80008ac <button_read>
 80014a6:	0003      	movs	r3, r0
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d165      	bne.n	8001578 <set_date_time+0x240>
		{
			if(current_substate == STATE_DATE)
 80014ac:	4b85      	ldr	r3, [pc, #532]	; (80016c4 <set_date_time+0x38c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d10c      	bne.n	80014ce <set_date_time+0x196>
			{
				if(new_date.date > 1)
 80014b4:	2308      	movs	r3, #8
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d939      	bls.n	8001532 <set_date_time+0x1fa>
				{
					new_date.date--;
 80014be:	2108      	movs	r1, #8
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	785b      	ldrb	r3, [r3, #1]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	705a      	strb	r2, [r3, #1]
 80014cc:	e031      	b.n	8001532 <set_date_time+0x1fa>
				}
			}
			else if(current_substate == STATE_MONTH)
 80014ce:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <set_date_time+0x38c>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d10c      	bne.n	80014f0 <set_date_time+0x1b8>
			{
				if(new_date.month > 1)
 80014d6:	2308      	movs	r3, #8
 80014d8:	18fb      	adds	r3, r7, r3
 80014da:	789b      	ldrb	r3, [r3, #2]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d928      	bls.n	8001532 <set_date_time+0x1fa>
				{
					new_date.date--;
 80014e0:	2108      	movs	r1, #8
 80014e2:	187b      	adds	r3, r7, r1
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	705a      	strb	r2, [r3, #1]
 80014ee:	e020      	b.n	8001532 <set_date_time+0x1fa>
				}
			}
			else if(current_substate == STATE_YEAR)
 80014f0:	4b74      	ldr	r3, [pc, #464]	; (80016c4 <set_date_time+0x38c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d10c      	bne.n	8001512 <set_date_time+0x1da>
			{
				if(new_date.year > 10)
 80014f8:	2308      	movs	r3, #8
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	78db      	ldrb	r3, [r3, #3]
 80014fe:	2b0a      	cmp	r3, #10
 8001500:	d917      	bls.n	8001532 <set_date_time+0x1fa>
				{
					new_date.year--;
 8001502:	2108      	movs	r1, #8
 8001504:	187b      	adds	r3, r7, r1
 8001506:	78db      	ldrb	r3, [r3, #3]
 8001508:	3b01      	subs	r3, #1
 800150a:	b2da      	uxtb	r2, r3
 800150c:	187b      	adds	r3, r7, r1
 800150e:	70da      	strb	r2, [r3, #3]
 8001510:	e00f      	b.n	8001532 <set_date_time+0x1fa>
				}
			}
			else if(current_substate == STATE_DAY)
 8001512:	4b6c      	ldr	r3, [pc, #432]	; (80016c4 <set_date_time+0x38c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b03      	cmp	r3, #3
 8001518:	d10b      	bne.n	8001532 <set_date_time+0x1fa>
			{
				if(new_date.day > 1)
 800151a:	2308      	movs	r3, #8
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d906      	bls.n	8001532 <set_date_time+0x1fa>
				{
					new_date.day--;
 8001524:	2108      	movs	r1, #8
 8001526:	187b      	adds	r3, r7, r1
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	187b      	adds	r3, r7, r1
 8001530:	701a      	strb	r2, [r3, #0]
				}
			}

			sprintf(display.line_2nd, "%d.%s.20%dr   %s", new_date.date, rtc_month_roman[new_date.month], new_date.year, rtc_day_str[new_date.day]);
 8001532:	2108      	movs	r1, #8
 8001534:	187b      	adds	r3, r7, r1
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	001e      	movs	r6, r3
 800153a:	187b      	adds	r3, r7, r1
 800153c:	789b      	ldrb	r3, [r3, #2]
 800153e:	001a      	movs	r2, r3
 8001540:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <set_date_time+0x37c>)
 8001542:	0092      	lsls	r2, r2, #2
 8001544:	58d4      	ldr	r4, [r2, r3]
 8001546:	187b      	adds	r3, r7, r1
 8001548:	78db      	ldrb	r3, [r3, #3]
 800154a:	001d      	movs	r5, r3
 800154c:	187b      	adds	r3, r7, r1
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	001a      	movs	r2, r3
 8001552:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <set_date_time+0x380>)
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	58d3      	ldr	r3, [r2, r3]
 8001558:	4958      	ldr	r1, [pc, #352]	; (80016bc <set_date_time+0x384>)
 800155a:	4859      	ldr	r0, [pc, #356]	; (80016c0 <set_date_time+0x388>)
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	9500      	str	r5, [sp, #0]
 8001560:	0023      	movs	r3, r4
 8001562:	0032      	movs	r2, r6
 8001564:	f003 fcc2 	bl	8004eec <siprintf>
			lcd_update(&display, LINE_SECOND);
 8001568:	4b50      	ldr	r3, [pc, #320]	; (80016ac <set_date_time+0x374>)
 800156a:	2102      	movs	r1, #2
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff fbd9 	bl	8000d24 <lcd_update>
			HAL_Delay(100); // debouncing protection
 8001572:	2064      	movs	r0, #100	; 0x64
 8001574:	f000 fd7a 	bl	800206c <HAL_Delay>
		}

		if(button_read(BUTTON_RIGHT) == BUTTON_PUSHED)
 8001578:	2003      	movs	r0, #3
 800157a:	f7ff f997 	bl	80008ac <button_read>
 800157e:	0003      	movs	r3, r0
 8001580:	2b01      	cmp	r3, #1
 8001582:	d10c      	bne.n	800159e <set_date_time+0x266>
		{
			if(current_substate < 3)
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <set_date_time+0x38c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d808      	bhi.n	800159e <set_date_time+0x266>
			{
				current_substate++;
 800158c:	4b4d      	ldr	r3, [pc, #308]	; (80016c4 <set_date_time+0x38c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	3301      	adds	r3, #1
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <set_date_time+0x38c>)
 8001596:	701a      	strb	r2, [r3, #0]
				HAL_Delay(100); // debouncing protection
 8001598:	2064      	movs	r0, #100	; 0x64
 800159a:	f000 fd67 	bl	800206c <HAL_Delay>
			}
		}

		if(button_read(BUTTON_LEFT) == BUTTON_PUSHED)
 800159e:	2002      	movs	r0, #2
 80015a0:	f7ff f984 	bl	80008ac <button_read>
 80015a4:	0003      	movs	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10c      	bne.n	80015c4 <set_date_time+0x28c>
		{
			if(current_substate > 0)
 80015aa:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <set_date_time+0x38c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d008      	beq.n	80015c4 <set_date_time+0x28c>
			{
				current_substate--;
 80015b2:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <set_date_time+0x38c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <set_date_time+0x38c>)
 80015bc:	701a      	strb	r2, [r3, #0]
				HAL_Delay(100); // debouncing protection
 80015be:	2064      	movs	r0, #100	; 0x64
 80015c0:	f000 fd54 	bl	800206c <HAL_Delay>
			}
		}

		if(button_read(BUTTON_ACCEPT) == BUTTON_PUSHED)
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff f971 	bl	80008ac <button_read>
 80015ca:	0003      	movs	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d000      	beq.n	80015d2 <set_date_time+0x29a>
 80015d0:	e0e2      	b.n	8001798 <set_date_time+0x460>
		{
			sprintf(display.line_1st, "    SET TIME    ");
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <set_date_time+0x374>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	493c      	ldr	r1, [pc, #240]	; (80016c8 <set_date_time+0x390>)
 80015d8:	189b      	adds	r3, r3, r2
 80015da:	2211      	movs	r2, #17
 80015dc:	0018      	movs	r0, r3
 80015de:	f003 fc73 	bl	8004ec8 <memcpy>
			lcd_clear_and_update(&display);
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <set_date_time+0x374>)
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff fb11 	bl	8000c0c <lcd_clear_and_update>

			while(1)
			{
				current_substate = STATE_HOURS;
 80015ea:	4b36      	ldr	r3, [pc, #216]	; (80016c4 <set_date_time+0x38c>)
 80015ec:	2204      	movs	r2, #4
 80015ee:	701a      	strb	r2, [r3, #0]

				if(button_read(BUTTON_UP) == BUTTON_PUSHED)
 80015f0:	2004      	movs	r0, #4
 80015f2:	f7ff f95b 	bl	80008ac <button_read>
 80015f6:	0003      	movs	r3, r0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d141      	bne.n	8001680 <set_date_time+0x348>
				{
					if(current_substate == STATE_HOURS)
 80015fc:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <set_date_time+0x38c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b04      	cmp	r3, #4
 8001602:	d10a      	bne.n	800161a <set_date_time+0x2e2>
					{
						if(new_time.hours < 24)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	789b      	ldrb	r3, [r3, #2]
 8001608:	2b17      	cmp	r3, #23
 800160a:	d823      	bhi.n	8001654 <set_date_time+0x31c>
						{
							new_time.hours++;
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	789b      	ldrb	r3, [r3, #2]
 8001610:	3301      	adds	r3, #1
 8001612:	b2da      	uxtb	r2, r3
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	709a      	strb	r2, [r3, #2]
 8001618:	e01c      	b.n	8001654 <set_date_time+0x31c>
						}
					}
					else if(current_substate == STATE_MINUTES)
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <set_date_time+0x38c>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b05      	cmp	r3, #5
 8001620:	d10a      	bne.n	8001638 <set_date_time+0x300>
					{
						if(new_time.minutes < 59)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	785b      	ldrb	r3, [r3, #1]
 8001626:	2b3a      	cmp	r3, #58	; 0x3a
 8001628:	d814      	bhi.n	8001654 <set_date_time+0x31c>
						{
							new_time.minutes++;
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	785b      	ldrb	r3, [r3, #1]
 800162e:	3301      	adds	r3, #1
 8001630:	b2da      	uxtb	r2, r3
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	705a      	strb	r2, [r3, #1]
 8001636:	e00d      	b.n	8001654 <set_date_time+0x31c>
						}
					}
					else if(current_substate == STATE_SECONDS)
 8001638:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <set_date_time+0x38c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b06      	cmp	r3, #6
 800163e:	d109      	bne.n	8001654 <set_date_time+0x31c>
					{
						if(new_time.seconds < 59)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b3a      	cmp	r3, #58	; 0x3a
 8001646:	d805      	bhi.n	8001654 <set_date_time+0x31c>
						{
							new_time.seconds++;
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	b2da      	uxtb	r2, r3
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	701a      	strb	r2, [r3, #0]
						}
					}

					sprintf(display.line_2nd, "    %d:%d:%d", new_time.hours, new_time.minutes, new_time.seconds);
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	001a      	movs	r2, r3
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	785b      	ldrb	r3, [r3, #1]
 800165e:	001c      	movs	r4, r3
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4919      	ldr	r1, [pc, #100]	; (80016cc <set_date_time+0x394>)
 8001666:	4816      	ldr	r0, [pc, #88]	; (80016c0 <set_date_time+0x388>)
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	0023      	movs	r3, r4
 800166c:	f003 fc3e 	bl	8004eec <siprintf>
					lcd_update(&display, LINE_SECOND);
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <set_date_time+0x374>)
 8001672:	2102      	movs	r1, #2
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff fb55 	bl	8000d24 <lcd_update>
					HAL_Delay(100); // debouncing protection
 800167a:	2064      	movs	r0, #100	; 0x64
 800167c:	f000 fcf6 	bl	800206c <HAL_Delay>

				}

				if(button_read(BUTTON_DOWN) == BUTTON_PUSHED)
 8001680:	2005      	movs	r0, #5
 8001682:	f7ff f913 	bl	80008ac <button_read>
 8001686:	0003      	movs	r3, r0
 8001688:	2b01      	cmp	r3, #1
 800168a:	d154      	bne.n	8001736 <set_date_time+0x3fe>
				{
					if(current_substate == STATE_HOURS)
 800168c:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <set_date_time+0x38c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d11d      	bne.n	80016d0 <set_date_time+0x398>
					{
						if(new_time.hours > 0)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	789b      	ldrb	r3, [r3, #2]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d036      	beq.n	800170a <set_date_time+0x3d2>
						{
							new_time.hours--;
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	789b      	ldrb	r3, [r3, #2]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	709a      	strb	r2, [r3, #2]
 80016a8:	e02f      	b.n	800170a <set_date_time+0x3d2>
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	2000036c 	.word	0x2000036c
 80016b0:	08005830 	.word	0x08005830
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000030 	.word	0x20000030
 80016bc:	08005844 	.word	0x08005844
 80016c0:	2000037e 	.word	0x2000037e
 80016c4:	2000038f 	.word	0x2000038f
 80016c8:	08005858 	.word	0x08005858
 80016cc:	0800586c 	.word	0x0800586c
						}
					}
					else if(current_substate == STATE_MINUTES)
 80016d0:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <set_date_time+0x488>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d10a      	bne.n	80016ee <set_date_time+0x3b6>
					{
						if(new_time.minutes > 0)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d014      	beq.n	800170a <set_date_time+0x3d2>
						{
							new_time.minutes--;
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	705a      	strb	r2, [r3, #1]
 80016ec:	e00d      	b.n	800170a <set_date_time+0x3d2>
						}
					}
					else if(current_substate == STATE_SECONDS)
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <set_date_time+0x488>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d109      	bne.n	800170a <set_date_time+0x3d2>
					{
						if(new_time.seconds > 0)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <set_date_time+0x3d2>
						{
							new_time.seconds--;
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	3b01      	subs	r3, #1
 8001704:	b2da      	uxtb	r2, r3
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	701a      	strb	r2, [r3, #0]
						}
					}

					sprintf(display.line_2nd, "    %d:%d:%d", new_time.hours, new_time.minutes, new_time.seconds);
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	789b      	ldrb	r3, [r3, #2]
 800170e:	001a      	movs	r2, r3
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	001c      	movs	r4, r3
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	492a      	ldr	r1, [pc, #168]	; (80017c4 <set_date_time+0x48c>)
 800171c:	482a      	ldr	r0, [pc, #168]	; (80017c8 <set_date_time+0x490>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	0023      	movs	r3, r4
 8001722:	f003 fbe3 	bl	8004eec <siprintf>
					lcd_update(&display, LINE_SECOND);
 8001726:	4b29      	ldr	r3, [pc, #164]	; (80017cc <set_date_time+0x494>)
 8001728:	2102      	movs	r1, #2
 800172a:	0018      	movs	r0, r3
 800172c:	f7ff fafa 	bl	8000d24 <lcd_update>
					HAL_Delay(100); // debouncing protection
 8001730:	2064      	movs	r0, #100	; 0x64
 8001732:	f000 fc9b 	bl	800206c <HAL_Delay>

				}

				if(button_read(BUTTON_RIGHT) == BUTTON_PUSHED)
 8001736:	2003      	movs	r0, #3
 8001738:	f7ff f8b8 	bl	80008ac <button_read>
 800173c:	0003      	movs	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	d10c      	bne.n	800175c <set_date_time+0x424>
				{
					if(current_substate < 6)
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <set_date_time+0x488>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d808      	bhi.n	800175c <set_date_time+0x424>
					{
						current_substate++;
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <set_date_time+0x488>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	3301      	adds	r3, #1
 8001750:	b2da      	uxtb	r2, r3
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <set_date_time+0x488>)
 8001754:	701a      	strb	r2, [r3, #0]
						HAL_Delay(100); // debouncing protection
 8001756:	2064      	movs	r0, #100	; 0x64
 8001758:	f000 fc88 	bl	800206c <HAL_Delay>
					}
				}

				if(button_read(BUTTON_LEFT) == BUTTON_PUSHED)
 800175c:	2002      	movs	r0, #2
 800175e:	f7ff f8a5 	bl	80008ac <button_read>
 8001762:	0003      	movs	r3, r0
 8001764:	2b01      	cmp	r3, #1
 8001766:	d10c      	bne.n	8001782 <set_date_time+0x44a>
				{
					if(current_substate > 4)
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <set_date_time+0x488>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d908      	bls.n	8001782 <set_date_time+0x44a>
					{
						current_substate--;
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <set_date_time+0x488>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3b01      	subs	r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <set_date_time+0x488>)
 800177a:	701a      	strb	r2, [r3, #0]
						HAL_Delay(100); // debouncing protection
 800177c:	2064      	movs	r0, #100	; 0x64
 800177e:	f000 fc75 	bl	800206c <HAL_Delay>
					}
				}

				if(button_read(BUTTON_ACCEPT) == BUTTON_PUSHED)
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff f892 	bl	80008ac <button_read>
 8001788:	0003      	movs	r3, r0
 800178a:	2b01      	cmp	r3, #1
 800178c:	d000      	beq.n	8001790 <set_date_time+0x458>
 800178e:	e72c      	b.n	80015ea <set_date_time+0x2b2>
				{
					end_date_time_loop = true;
 8001790:	230f      	movs	r3, #15
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
					break;
				}
			}
		}

		if(end_date_time_loop == true)
 8001798:	230f      	movs	r3, #15
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d100      	bne.n	80017a4 <set_date_time+0x46c>
 80017a2:	e611      	b.n	80013c8 <set_date_time+0x90>
		{
			rtc_set_time(&new_time);
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	0018      	movs	r0, r3
 80017a8:	f000 f9c6 	bl	8001b38 <rtc_set_time>
			rtc_set_date(&new_date);
 80017ac:	2308      	movs	r3, #8
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	0018      	movs	r0, r3
 80017b2:	f000 fa4b 	bl	8001c4c <rtc_set_date>
			break;
 80017b6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b005      	add	sp, #20
 80017be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c0:	2000038f 	.word	0x2000038f
 80017c4:	0800586c 	.word	0x0800586c
 80017c8:	2000037e 	.word	0x2000037e
 80017cc:	2000036c 	.word	0x2000036c

080017d0 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Callback will be trigger every 1s (set by timer 6)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d102      	bne.n	80017e8 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		IT_every_1s = 1;
 80017e2:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	701a      	strb	r2, [r3, #0]
	}
}
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b002      	add	sp, #8
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40001000 	.word	0x40001000
 80017f4:	200001d9 	.word	0x200001d9

080017f8 <HAL_MspInit>:
#include "main.h"

DMA_HandleTypeDef hdma_tim3_ch1_trig;

void HAL_MspInit(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_MspInit+0x44>)
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_MspInit+0x44>)
 8001804:	2101      	movs	r1, #1
 8001806:	430a      	orrs	r2, r1
 8001808:	619a      	str	r2, [r3, #24]
 800180a:	4b0c      	ldr	r3, [pc, #48]	; (800183c <HAL_MspInit+0x44>)
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2201      	movs	r2, #1
 8001810:	4013      	ands	r3, r2
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_MspInit+0x44>)
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_MspInit+0x44>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0549      	lsls	r1, r1, #21
 8001820:	430a      	orrs	r2, r1
 8001822:	61da      	str	r2, [r3, #28]
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_MspInit+0x44>)
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	055b      	lsls	r3, r3, #21
 800182c:	4013      	ands	r3, r2
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b002      	add	sp, #8
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	40021000 	.word	0x40021000

08001840 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b090      	sub	sp, #64	; 0x40
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_i2c1 = {0};
 8001848:	232c      	movs	r3, #44	; 0x2c
 800184a:	18fb      	adds	r3, r7, r3
 800184c:	0018      	movs	r0, r3
 800184e:	2314      	movs	r3, #20
 8001850:	001a      	movs	r2, r3
 8001852:	2100      	movs	r1, #0
 8001854:	f003 fb41 	bl	8004eda <memset>
	GPIO_InitTypeDef GPIO_i2c2 = {0};
 8001858:	2318      	movs	r3, #24
 800185a:	18fb      	adds	r3, r7, r3
 800185c:	0018      	movs	r0, r3
 800185e:	2314      	movs	r3, #20
 8001860:	001a      	movs	r2, r3
 8001862:	2100      	movs	r1, #0
 8001864:	f003 fb39 	bl	8004eda <memset>

	if(hi2c->Instance == I2C1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a38      	ldr	r2, [pc, #224]	; (8001950 <HAL_I2C_MspInit+0x110>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d131      	bne.n	80018d6 <HAL_I2C_MspInit+0x96>
	{
		/*
		 * PB6 --> I2C1_SCL
		 * PB7 --> I2C1_SDA
		 */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8001872:	4b38      	ldr	r3, [pc, #224]	; (8001954 <HAL_I2C_MspInit+0x114>)
 8001874:	69da      	ldr	r2, [r3, #28]
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_I2C_MspInit+0x114>)
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	0389      	lsls	r1, r1, #14
 800187c:	430a      	orrs	r2, r1
 800187e:	61da      	str	r2, [r3, #28]
 8001880:	4b34      	ldr	r3, [pc, #208]	; (8001954 <HAL_I2C_MspInit+0x114>)
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	039b      	lsls	r3, r3, #14
 8001888:	4013      	ands	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <HAL_I2C_MspInit+0x114>)
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_I2C_MspInit+0x114>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	02c9      	lsls	r1, r1, #11
 8001898:	430a      	orrs	r2, r1
 800189a:	615a      	str	r2, [r3, #20]
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_I2C_MspInit+0x114>)
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	02db      	lsls	r3, r3, #11
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

		GPIO_i2c1.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	22c0      	movs	r2, #192	; 0xc0
 80018b0:	601a      	str	r2, [r3, #0]
		GPIO_i2c1.Pull = GPIO_NOPULL;
 80018b2:	187b      	adds	r3, r7, r1
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
		GPIO_i2c1.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018b8:	187b      	adds	r3, r7, r1
 80018ba:	2201      	movs	r2, #1
 80018bc:	60da      	str	r2, [r3, #12]
		GPIO_i2c1.Mode = GPIO_MODE_AF_OD;
 80018be:	187b      	adds	r3, r7, r1
 80018c0:	2212      	movs	r2, #18
 80018c2:	605a      	str	r2, [r3, #4]
		GPIO_i2c1.Alternate = GPIO_AF1_I2C1;
 80018c4:	187b      	adds	r3, r7, r1
 80018c6:	2201      	movs	r2, #1
 80018c8:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_i2c1);
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	4a22      	ldr	r2, [pc, #136]	; (8001958 <HAL_I2C_MspInit+0x118>)
 80018ce:	0019      	movs	r1, r3
 80018d0:	0010      	movs	r0, r2
 80018d2:	f000 fdd1 	bl	8002478 <HAL_GPIO_Init>
	}

	if(hi2c->Instance == I2C2)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a20      	ldr	r2, [pc, #128]	; (800195c <HAL_I2C_MspInit+0x11c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d132      	bne.n	8001946 <HAL_I2C_MspInit+0x106>
		/*
		 * PB13 --> I2C2_SCL
		 * PB14 --> I2C2_SDA
		 */

		__HAL_RCC_I2C2_CLK_ENABLE();
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <HAL_I2C_MspInit+0x114>)
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_I2C_MspInit+0x114>)
 80018e6:	2180      	movs	r1, #128	; 0x80
 80018e8:	03c9      	lsls	r1, r1, #15
 80018ea:	430a      	orrs	r2, r1
 80018ec:	61da      	str	r2, [r3, #28]
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_I2C_MspInit+0x114>)
 80018f0:	69da      	ldr	r2, [r3, #28]
 80018f2:	2380      	movs	r3, #128	; 0x80
 80018f4:	03db      	lsls	r3, r3, #15
 80018f6:	4013      	ands	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_I2C_MspInit+0x114>)
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <HAL_I2C_MspInit+0x114>)
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	02c9      	lsls	r1, r1, #11
 8001906:	430a      	orrs	r2, r1
 8001908:	615a      	str	r2, [r3, #20]
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_I2C_MspInit+0x114>)
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	02db      	lsls	r3, r3, #11
 8001912:	4013      	ands	r3, r2
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]

		GPIO_i2c2.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8001918:	2118      	movs	r1, #24
 800191a:	187b      	adds	r3, r7, r1
 800191c:	22c0      	movs	r2, #192	; 0xc0
 800191e:	01d2      	lsls	r2, r2, #7
 8001920:	601a      	str	r2, [r3, #0]
		GPIO_i2c2.Pull = GPIO_PULLUP;
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2201      	movs	r2, #1
 8001926:	609a      	str	r2, [r3, #8]
		GPIO_i2c2.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001928:	187b      	adds	r3, r7, r1
 800192a:	2201      	movs	r2, #1
 800192c:	60da      	str	r2, [r3, #12]
		GPIO_i2c2.Mode = GPIO_MODE_AF_OD;
 800192e:	187b      	adds	r3, r7, r1
 8001930:	2212      	movs	r2, #18
 8001932:	605a      	str	r2, [r3, #4]
		GPIO_i2c2.Alternate = GPIO_AF5_I2C2;
 8001934:	187b      	adds	r3, r7, r1
 8001936:	2205      	movs	r2, #5
 8001938:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOB, &GPIO_i2c2);
 800193a:	187b      	adds	r3, r7, r1
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_I2C_MspInit+0x118>)
 800193e:	0019      	movs	r1, r3
 8001940:	0010      	movs	r0, r2
 8001942:	f000 fd99 	bl	8002478 <HAL_GPIO_Init>
	}
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b010      	add	sp, #64	; 0x40
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40005400 	.word	0x40005400
 8001954:	40021000 	.word	0x40021000
 8001958:	48000400 	.word	0x48000400
 800195c:	40005800 	.word	0x40005800

08001960 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_tim2;

	// Enable the peripheral clock for timer2 peripheral
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001968:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <HAL_TIM_OC_MspInit+0x84>)
 800196a:	69da      	ldr	r2, [r3, #28]
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_TIM_OC_MspInit+0x84>)
 800196e:	2101      	movs	r1, #1
 8001970:	430a      	orrs	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_TIM_OC_MspInit+0x84>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2201      	movs	r2, #1
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_TIM_OC_MspInit+0x84>)
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	4b17      	ldr	r3, [pc, #92]	; (80019e4 <HAL_TIM_OC_MspInit+0x84>)
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	0289      	lsls	r1, r1, #10
 800198a:	430a      	orrs	r2, r1
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <HAL_TIM_OC_MspInit+0x84>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	029b      	lsls	r3, r3, #10
 8001996:	4013      	ands	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]

	/*
	 *  PA5 --> TIM2_CH2
	 */

	GPIO_tim2.Pin = GPIO_PIN_1;
 800199c:	2114      	movs	r1, #20
 800199e:	187b      	adds	r3, r7, r1
 80019a0:	2202      	movs	r2, #2
 80019a2:	601a      	str	r2, [r3, #0]
	GPIO_tim2.Mode = GPIO_MODE_AF_PP;
 80019a4:	187b      	adds	r3, r7, r1
 80019a6:	2202      	movs	r2, #2
 80019a8:	605a      	str	r2, [r3, #4]
	GPIO_tim2.Pull = GPIO_NOPULL;
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
	GPIO_tim2.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
	GPIO_tim2.Alternate = GPIO_AF2_TIM2;
 80019b6:	187b      	adds	r3, r7, r1
 80019b8:	2202      	movs	r2, #2
 80019ba:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_tim2);
 80019bc:	187a      	adds	r2, r7, r1
 80019be:	2390      	movs	r3, #144	; 0x90
 80019c0:	05db      	lsls	r3, r3, #23
 80019c2:	0011      	movs	r1, r2
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 fd57 	bl	8002478 <HAL_GPIO_Init>


	// NVIC settings
	HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2103      	movs	r1, #3
 80019ce:	200f      	movs	r0, #15
 80019d0:	f000 fc1a 	bl	8002208 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019d4:	200f      	movs	r0, #15
 80019d6:	f000 fc2c 	bl	8002232 <HAL_NVIC_EnableIRQ>
}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b00a      	add	sp, #40	; 0x28
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40021000 	.word	0x40021000

080019e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM3)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2c      	ldr	r2, [pc, #176]	; (8001aa8 <HAL_TIM_Base_MspInit+0xc0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d138      	bne.n	8001a6c <HAL_TIM_Base_MspInit+0x84>
  {

    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <HAL_TIM_Base_MspInit+0xc4>)
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <HAL_TIM_Base_MspInit+0xc4>)
 8001a00:	2102      	movs	r1, #2
 8001a02:	430a      	orrs	r2, r1
 8001a04:	61da      	str	r2, [r3, #28]
 8001a06:	4b29      	ldr	r3, [pc, #164]	; (8001aac <HAL_TIM_Base_MspInit+0xc4>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]

    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a14:	4a27      	ldr	r2, [pc, #156]	; (8001ab4 <HAL_TIM_Base_MspInit+0xcc>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	0052      	lsls	r2, r2, #1
 8001a30:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 fc10 	bl	800226c <HAL_DMA_Init>
 8001a4c:	1e03      	subs	r3, r0, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_TIM_Base_MspInit+0x6c>
    {
    	error_handler();
 8001a50:	f7fe fe4a 	bl	80006e8 <error_handler>
    }

    __HAL_LINKDMA(htim,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a64:	639a      	str	r2, [r3, #56]	; 0x38
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_TIM_Base_MspInit+0xc8>)
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  if(htim->Instance == TIM6)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <HAL_TIM_Base_MspInit+0xd0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d113      	bne.n	8001a9e <HAL_TIM_Base_MspInit+0xb6>
  {
	__HAL_RCC_TIM6_CLK_ENABLE();
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_TIM_Base_MspInit+0xc4>)
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_TIM_Base_MspInit+0xc4>)
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	61da      	str	r2, [r3, #28]
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_TIM_Base_MspInit+0xc4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	2210      	movs	r2, #16
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]

	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2102      	movs	r1, #2
 8001a92:	2011      	movs	r0, #17
 8001a94:	f000 fbb8 	bl	8002208 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a98:	2011      	movs	r0, #17
 8001a9a:	f000 fbca 	bl	8002232 <HAL_NVIC_EnableIRQ>
  }
}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b004      	add	sp, #16
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	40000400 	.word	0x40000400
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	200003b8 	.word	0x200003b8
 8001ab4:	40020044 	.word	0x40020044
 8001ab8:	40001000 	.word	0x40001000

08001abc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	0018      	movs	r0, r3
 8001aca:	2314      	movs	r3, #20
 8001acc:	001a      	movs	r2, r3
 8001ace:	2100      	movs	r1, #0
 8001ad0:	f003 fa03 	bl	8004eda <memset>
  if(htim->Instance == TIM3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a15      	ldr	r2, [pc, #84]	; (8001b30 <HAL_TIM_MspPostInit+0x74>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d124      	bne.n	8001b28 <HAL_TIM_MspPostInit+0x6c>
  {
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_TIM_MspPostInit+0x78>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_TIM_MspPostInit+0x78>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0289      	lsls	r1, r1, #10
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_TIM_MspPostInit+0x78>)
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]

    /*
     * PA6 --> TIM3_CH1
    */

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001afa:	210c      	movs	r1, #12
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2202      	movs	r2, #2
 8001b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2200      	movs	r2, #0
 8001b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2201      	movs	r2, #1
 8001b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	187a      	adds	r2, r7, r1
 8001b1c:	2390      	movs	r3, #144	; 0x90
 8001b1e:	05db      	lsls	r3, r3, #23
 8001b20:	0011      	movs	r1, r2
 8001b22:	0018      	movs	r0, r3
 8001b24:	f000 fca8 	bl	8002478 <HAL_GPIO_Init>
  }

}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b008      	add	sp, #32
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40000400 	.word	0x40000400
 8001b34:	40021000 	.word	0x40021000

08001b38 <rtc_set_time>:
 * @return            - None
 *
 * @Note              - This function set time in the DS3231 RTC
 */
void rtc_set_time(RTC_time *time)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	rtc_write(DS3231_RTC_SECONDS, bin_to_bcd(time->seconds) & DS3231_RTC_SECONDS_MASK);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	0018      	movs	r0, r3
 8001b46:	f000 f989 	bl	8001e5c <bin_to_bcd>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	237f      	movs	r3, #127	; 0x7f
 8001b50:	4013      	ands	r3, r2
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	0019      	movs	r1, r3
 8001b56:	2000      	movs	r0, #0
 8001b58:	f000 f91a 	bl	8001d90 <rtc_write>

	rtc_write(DS3231_RTC_MINUTES, bin_to_bcd(time->minutes) & DS3231_RTC_MINUTES_MASK);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	785b      	ldrb	r3, [r3, #1]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f000 f97b 	bl	8001e5c <bin_to_bcd>
 8001b66:	0003      	movs	r3, r0
 8001b68:	001a      	movs	r2, r3
 8001b6a:	237f      	movs	r3, #127	; 0x7f
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	0019      	movs	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f000 f90c 	bl	8001d90 <rtc_write>

	uint8_t hours = DS3231_RTC_24_HOURS_FORMAT | ( bin_to_bcd(time->hours) & DS3231_RTC_HOURS_MASK );
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f000 f96d 	bl	8001e5c <bin_to_bcd>
 8001b82:	0003      	movs	r3, r0
 8001b84:	0019      	movs	r1, r3
 8001b86:	200f      	movs	r0, #15
 8001b88:	183b      	adds	r3, r7, r0
 8001b8a:	223f      	movs	r2, #63	; 0x3f
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	701a      	strb	r2, [r3, #0]
	rtc_write(DS3231_RTC_HOURS, hours);
 8001b90:	183b      	adds	r3, r7, r0
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	0019      	movs	r1, r3
 8001b96:	2002      	movs	r0, #2
 8001b98:	f000 f8fa 	bl	8001d90 <rtc_write>
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b004      	add	sp, #16
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <rtc_get_time>:
 * @return            - RTC_time structure
 *
 * @Note              - This function return time from the DS3231 RTC
 */
RTC_time rtc_get_time(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
	RTC_time time;

	time.seconds = bcd_to_bin(rtc_read(DS3231_RTC_SECONDS) & DS3231_RTC_SECONDS_MASK);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f000 f912 	bl	8001dd4 <rtc_read>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	001a      	movs	r2, r3
 8001bb4:	237f      	movs	r3, #127	; 0x7f
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f000 f92c 	bl	8001e18 <bcd_to_bin>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	003b      	movs	r3, r7
 8001bc6:	701a      	strb	r2, [r3, #0]
	time.minutes = bcd_to_bin(rtc_read(DS3231_RTC_MINUTES) & DS3231_RTC_MINUTES_MASK);
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f000 f903 	bl	8001dd4 <rtc_read>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	237f      	movs	r3, #127	; 0x7f
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f000 f91d 	bl	8001e18 <bcd_to_bin>
 8001bde:	0003      	movs	r3, r0
 8001be0:	001a      	movs	r2, r3
 8001be2:	003b      	movs	r3, r7
 8001be4:	705a      	strb	r2, [r3, #1]
	time.hours = bcd_to_bin(rtc_read(DS3231_RTC_HOURS) & DS3231_RTC_HOURS_MASK);
 8001be6:	2002      	movs	r0, #2
 8001be8:	f000 f8f4 	bl	8001dd4 <rtc_read>
 8001bec:	0003      	movs	r3, r0
 8001bee:	001a      	movs	r2, r3
 8001bf0:	233f      	movs	r3, #63	; 0x3f
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f000 f90e 	bl	8001e18 <bcd_to_bin>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	001a      	movs	r2, r3
 8001c00:	003b      	movs	r3, r7
 8001c02:	709a      	strb	r2, [r3, #2]

	return time;
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	003a      	movs	r2, r7
 8001c08:	8811      	ldrh	r1, [r2, #0]
 8001c0a:	8019      	strh	r1, [r3, #0]
 8001c0c:	7892      	ldrb	r2, [r2, #2]
 8001c0e:	709a      	strb	r2, [r3, #2]
 8001c10:	1d3a      	adds	r2, r7, #4
 8001c12:	2300      	movs	r3, #0
 8001c14:	7811      	ldrb	r1, [r2, #0]
 8001c16:	20ff      	movs	r0, #255	; 0xff
 8001c18:	4001      	ands	r1, r0
 8001c1a:	20ff      	movs	r0, #255	; 0xff
 8001c1c:	4383      	bics	r3, r0
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	7851      	ldrb	r1, [r2, #1]
 8001c22:	20ff      	movs	r0, #255	; 0xff
 8001c24:	4001      	ands	r1, r0
 8001c26:	0209      	lsls	r1, r1, #8
 8001c28:	4806      	ldr	r0, [pc, #24]	; (8001c44 <rtc_get_time+0xa0>)
 8001c2a:	4003      	ands	r3, r0
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	7892      	ldrb	r2, [r2, #2]
 8001c30:	21ff      	movs	r1, #255	; 0xff
 8001c32:	400a      	ands	r2, r1
 8001c34:	0412      	lsls	r2, r2, #16
 8001c36:	4904      	ldr	r1, [pc, #16]	; (8001c48 <rtc_get_time+0xa4>)
 8001c38:	400b      	ands	r3, r1
 8001c3a:	4313      	orrs	r3, r2
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b002      	add	sp, #8
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	ffff00ff 	.word	0xffff00ff
 8001c48:	ff00ffff 	.word	0xff00ffff

08001c4c <rtc_set_date>:
 * @return            - None
 *
 * @Note              - This function set date in the DS3231 RTC
 */
void rtc_set_date(RTC_date *date)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	rtc_write(DS3231_RTC_DAY, bin_to_bcd(date->day) & DS3231_RTC_DAY_MASK);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 f8ff 	bl	8001e5c <bin_to_bcd>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	001a      	movs	r2, r3
 8001c62:	2307      	movs	r3, #7
 8001c64:	4013      	ands	r3, r2
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	0019      	movs	r1, r3
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f000 f890 	bl	8001d90 <rtc_write>

	rtc_write(DS3231_RTC_DATE, bin_to_bcd(date->date) & DS3231_RTC_DATE_MASK);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	785b      	ldrb	r3, [r3, #1]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 f8f1 	bl	8001e5c <bin_to_bcd>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	233f      	movs	r3, #63	; 0x3f
 8001c80:	4013      	ands	r3, r2
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	0019      	movs	r1, r3
 8001c86:	2004      	movs	r0, #4
 8001c88:	f000 f882 	bl	8001d90 <rtc_write>

	uint8_t months = DS3231_RTC_21_CENTURY | ( bin_to_bcd(date->month) & DS3231_RTC_MONTH_MASK );
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	789b      	ldrb	r3, [r3, #2]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 f8e3 	bl	8001e5c <bin_to_bcd>
 8001c96:	0003      	movs	r3, r0
 8001c98:	0019      	movs	r1, r3
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	183b      	adds	r3, r7, r0
 8001c9e:	221f      	movs	r2, #31
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	701a      	strb	r2, [r3, #0]
	rtc_write(DS3231_RTC_MONTH_CTR, months);
 8001ca4:	183b      	adds	r3, r7, r0
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	0019      	movs	r1, r3
 8001caa:	2005      	movs	r0, #5
 8001cac:	f000 f870 	bl	8001d90 <rtc_write>

	rtc_write(DS3231_RTC_YEAR, bin_to_bcd(date->year));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	78db      	ldrb	r3, [r3, #3]
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f000 f8d1 	bl	8001e5c <bin_to_bcd>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	2006      	movs	r0, #6
 8001cc0:	f000 f866 	bl	8001d90 <rtc_write>
}
 8001cc4:	46c0      	nop			; (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b004      	add	sp, #16
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <rtc_get_date>:
 * @return            - RTC_date structure
 *
 * @Note              - This function return date from the DS3231 RTC
 */
RTC_date rtc_get_date(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
	RTC_date date;

	date.day = bcd_to_bin(rtc_read(DS3231_RTC_DAY) & DS3231_RTC_DAY_MASK);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f000 f87e 	bl	8001dd4 <rtc_read>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	001a      	movs	r2, r3
 8001cdc:	2307      	movs	r3, #7
 8001cde:	4013      	ands	r3, r2
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f000 f898 	bl	8001e18 <bcd_to_bin>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	001a      	movs	r2, r3
 8001cec:	003b      	movs	r3, r7
 8001cee:	701a      	strb	r2, [r3, #0]
	date.date = bcd_to_bin(rtc_read(DS3231_RTC_DATE) & DS3231_RTC_DATE_MASK);
 8001cf0:	2004      	movs	r0, #4
 8001cf2:	f000 f86f 	bl	8001dd4 <rtc_read>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	001a      	movs	r2, r3
 8001cfa:	233f      	movs	r3, #63	; 0x3f
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	0018      	movs	r0, r3
 8001d02:	f000 f889 	bl	8001e18 <bcd_to_bin>
 8001d06:	0003      	movs	r3, r0
 8001d08:	001a      	movs	r2, r3
 8001d0a:	003b      	movs	r3, r7
 8001d0c:	705a      	strb	r2, [r3, #1]
	date.month = bcd_to_bin(rtc_read(DS3231_RTC_MONTH_CTR) & DS3231_RTC_MONTH_MASK);
 8001d0e:	2005      	movs	r0, #5
 8001d10:	f000 f860 	bl	8001dd4 <rtc_read>
 8001d14:	0003      	movs	r3, r0
 8001d16:	001a      	movs	r2, r3
 8001d18:	231f      	movs	r3, #31
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 f87a 	bl	8001e18 <bcd_to_bin>
 8001d24:	0003      	movs	r3, r0
 8001d26:	001a      	movs	r2, r3
 8001d28:	003b      	movs	r3, r7
 8001d2a:	709a      	strb	r2, [r3, #2]
	date.year = bcd_to_bin(rtc_read(DS3231_RTC_YEAR));
 8001d2c:	2006      	movs	r0, #6
 8001d2e:	f000 f851 	bl	8001dd4 <rtc_read>
 8001d32:	0003      	movs	r3, r0
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 f86f 	bl	8001e18 <bcd_to_bin>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	003b      	movs	r3, r7
 8001d40:	70da      	strb	r2, [r3, #3]

	return date;
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	003a      	movs	r2, r7
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	1d3a      	adds	r2, r7, #4
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	7811      	ldrb	r1, [r2, #0]
 8001d50:	20ff      	movs	r0, #255	; 0xff
 8001d52:	4001      	ands	r1, r0
 8001d54:	20ff      	movs	r0, #255	; 0xff
 8001d56:	4383      	bics	r3, r0
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	7851      	ldrb	r1, [r2, #1]
 8001d5c:	20ff      	movs	r0, #255	; 0xff
 8001d5e:	4001      	ands	r1, r0
 8001d60:	0209      	lsls	r1, r1, #8
 8001d62:	4809      	ldr	r0, [pc, #36]	; (8001d88 <rtc_get_date+0xbc>)
 8001d64:	4003      	ands	r3, r0
 8001d66:	430b      	orrs	r3, r1
 8001d68:	7891      	ldrb	r1, [r2, #2]
 8001d6a:	20ff      	movs	r0, #255	; 0xff
 8001d6c:	4001      	ands	r1, r0
 8001d6e:	0409      	lsls	r1, r1, #16
 8001d70:	4806      	ldr	r0, [pc, #24]	; (8001d8c <rtc_get_date+0xc0>)
 8001d72:	4003      	ands	r3, r0
 8001d74:	430b      	orrs	r3, r1
 8001d76:	78d2      	ldrb	r2, [r2, #3]
 8001d78:	0612      	lsls	r2, r2, #24
 8001d7a:	021b      	lsls	r3, r3, #8
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	4313      	orrs	r3, r2
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	b002      	add	sp, #8
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	ffff00ff 	.word	0xffff00ff
 8001d8c:	ff00ffff 	.word	0xff00ffff

08001d90 <rtc_write>:




static void rtc_write(uint8_t reg, uint8_t data)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af04      	add	r7, sp, #16
 8001d96:	0002      	movs	r2, r0
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	1dbb      	adds	r3, r7, #6
 8001d9e:	1c0a      	adds	r2, r1, #0
 8001da0:	701a      	strb	r2, [r3, #0]
	if(HAL_I2C_Mem_Write(&DS3231_RTC_I2C_HANDLE, DS3231_RTC_I2C_ADDR, reg, 1, &data, 1, HAL_MAX_DELAY) != HAL_OK)
 8001da2:	1dfb      	adds	r3, r7, #7
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <rtc_write+0x40>)
 8001daa:	2301      	movs	r3, #1
 8001dac:	425b      	negs	r3, r3
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	2301      	movs	r3, #1
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	1dbb      	adds	r3, r7, #6
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2301      	movs	r3, #1
 8001dba:	21d0      	movs	r1, #208	; 0xd0
 8001dbc:	f000 fe90 	bl	8002ae0 <HAL_I2C_Mem_Write>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d001      	beq.n	8001dc8 <rtc_write+0x38>
	{
		error_handler();
 8001dc4:	f7fe fc90 	bl	80006e8 <error_handler>
	}
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200002d4 	.word	0x200002d4

08001dd4 <rtc_read>:


static uint8_t rtc_read(uint8_t reg)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af04      	add	r7, sp, #16
 8001dda:	0002      	movs	r2, r0
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;

	if(HAL_I2C_Mem_Read(&DS3231_RTC_I2C_HANDLE, DS3231_RTC_I2C_ADDR, reg, 1, &rx_data, 1, 50) != HAL_OK)
 8001de0:	1dfb      	adds	r3, r7, #7
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	480b      	ldr	r0, [pc, #44]	; (8001e14 <rtc_read+0x40>)
 8001de8:	2332      	movs	r3, #50	; 0x32
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	2301      	movs	r3, #1
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	230f      	movs	r3, #15
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	21d0      	movs	r1, #208	; 0xd0
 8001dfa:	f000 ff9f 	bl	8002d3c <HAL_I2C_Mem_Read>
 8001dfe:	1e03      	subs	r3, r0, #0
 8001e00:	d001      	beq.n	8001e06 <rtc_read+0x32>
	{
		error_handler();
 8001e02:	f7fe fc71 	bl	80006e8 <error_handler>
	}

	return rx_data;
 8001e06:	230f      	movs	r3, #15
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
}
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b004      	add	sp, #16
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200002d4 	.word	0x200002d4

08001e18 <bcd_to_bin>:

static uint8_t bcd_to_bin(uint8_t bcd_number)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	0002      	movs	r2, r0
 8001e20:	1dfb      	adds	r3, r7, #7
 8001e22:	701a      	strb	r2, [r3, #0]
	uint8_t unity = bcd_number & 0x0F;
 8001e24:	200f      	movs	r0, #15
 8001e26:	183b      	adds	r3, r7, r0
 8001e28:	1dfa      	adds	r2, r7, #7
 8001e2a:	7812      	ldrb	r2, [r2, #0]
 8001e2c:	210f      	movs	r1, #15
 8001e2e:	400a      	ands	r2, r1
 8001e30:	701a      	strb	r2, [r3, #0]
	uint8_t dozens = (bcd_number >> 4) * 10;
 8001e32:	1dfb      	adds	r3, r7, #7
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	240e      	movs	r4, #14
 8001e3c:	193a      	adds	r2, r7, r4
 8001e3e:	1c19      	adds	r1, r3, #0
 8001e40:	0089      	lsls	r1, r1, #2
 8001e42:	18cb      	adds	r3, r1, r3
 8001e44:	18db      	adds	r3, r3, r3
 8001e46:	7013      	strb	r3, [r2, #0]

	return dozens + unity;
 8001e48:	193a      	adds	r2, r7, r4
 8001e4a:	183b      	adds	r3, r7, r0
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	18d3      	adds	r3, r2, r3
 8001e52:	b2db      	uxtb	r3, r3
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b005      	add	sp, #20
 8001e5a:	bd90      	pop	{r4, r7, pc}

08001e5c <bin_to_bcd>:

static uint8_t bin_to_bcd(uint8_t bin_number)
{
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	0002      	movs	r2, r0
 8001e64:	1dfb      	adds	r3, r7, #7
 8001e66:	701a      	strb	r2, [r3, #0]
	uint8_t unity = 0;
 8001e68:	230e      	movs	r3, #14
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
	uint8_t dozens = 0;
 8001e70:	230d      	movs	r3, #13
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
	uint8_t bcd_number = bin_number;
 8001e78:	210f      	movs	r1, #15
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	1dfa      	adds	r2, r7, #7
 8001e7e:	7812      	ldrb	r2, [r2, #0]
 8001e80:	701a      	strb	r2, [r3, #0]

	if(bcd_number >= 10)
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b09      	cmp	r3, #9
 8001e88:	d91f      	bls.n	8001eca <bin_to_bcd+0x6e>
	{
		unity = bin_number % 10;
 8001e8a:	250e      	movs	r5, #14
 8001e8c:	197c      	adds	r4, r7, r5
 8001e8e:	1dfb      	adds	r3, r7, #7
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	210a      	movs	r1, #10
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7fe f9c5 	bl	8000224 <__aeabi_uidivmod>
 8001e9a:	000b      	movs	r3, r1
 8001e9c:	7023      	strb	r3, [r4, #0]
		dozens = bin_number / 10;
 8001e9e:	260d      	movs	r6, #13
 8001ea0:	19bc      	adds	r4, r7, r6
 8001ea2:	1dfb      	adds	r3, r7, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	210a      	movs	r1, #10
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7fe f935 	bl	8000118 <__udivsi3>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	7023      	strb	r3, [r4, #0]
		bcd_number = unity | (dozens << 4);
 8001eb2:	19bb      	adds	r3, r7, r6
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	b25a      	sxtb	r2, r3
 8001eba:	197b      	adds	r3, r7, r5
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	b25b      	sxtb	r3, r3
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	b25a      	sxtb	r2, r3
 8001ec4:	230f      	movs	r3, #15
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	701a      	strb	r2, [r3, #0]
	}
	return bcd_number;
 8001eca:	230f      	movs	r3, #15
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b005      	add	sp, #20
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	18d3      	adds	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f002 ffb4 	bl	8004e74 <__errno>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	220c      	movs	r2, #12
 8001f10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	425b      	negs	r3, r3
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	18d2      	adds	r2, r2, r3
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <_sbrk+0x64>)
 8001f28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b006      	add	sp, #24
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20004000 	.word	0x20004000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	200001e4 	.word	0x200001e4
 8001f40:	20000408 	.word	0x20000408

08001f44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f54:	480d      	ldr	r0, [pc, #52]	; (8001f8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f56:	490e      	ldr	r1, [pc, #56]	; (8001f90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f58:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <LoopForever+0xe>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f6c:	4c0b      	ldr	r4, [pc, #44]	; (8001f9c <LoopForever+0x16>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f7a:	f7ff ffe3 	bl	8001f44 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f7e:	f002 ff7f 	bl	8004e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f82:	f7fe ffd7 	bl	8000f34 <main>

08001f86 <LoopForever>:

LoopForever:
    b LoopForever
 8001f86:	e7fe      	b.n	8001f86 <LoopForever>
  ldr   r0, =_estack
 8001f88:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001f94:	08005978 	.word	0x08005978
  ldr r2, =_sbss
 8001f98:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001f9c:	20000404 	.word	0x20000404

08001fa0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC1_COMP_IRQHandler>
	...

08001fa4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_Init+0x24>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_Init+0x24>)
 8001fae:	2110      	movs	r1, #16
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f000 f809 	bl	8001fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fba:	f7ff fc1d 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_InitTick+0x5c>)
 8001fd6:	681c      	ldr	r4, [r3, #0]
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_InitTick+0x60>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	0019      	movs	r1, r3
 8001fde:	23fa      	movs	r3, #250	; 0xfa
 8001fe0:	0098      	lsls	r0, r3, #2
 8001fe2:	f7fe f899 	bl	8000118 <__udivsi3>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	0019      	movs	r1, r3
 8001fea:	0020      	movs	r0, r4
 8001fec:	f7fe f894 	bl	8000118 <__udivsi3>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 f92d 	bl	8002252 <HAL_SYSTICK_Config>
 8001ff8:	1e03      	subs	r3, r0, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e00f      	b.n	8002020 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d80b      	bhi.n	800201e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	2301      	movs	r3, #1
 800200a:	425b      	negs	r3, r3
 800200c:	2200      	movs	r2, #0
 800200e:	0018      	movs	r0, r3
 8002010:	f000 f8fa 	bl	8002208 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_InitTick+0x64>)
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	0018      	movs	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	b003      	add	sp, #12
 8002026:	bd90      	pop	{r4, r7, pc}
 8002028:	20000064 	.word	0x20000064
 800202c:	2000006c 	.word	0x2000006c
 8002030:	20000068 	.word	0x20000068

08002034 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_IncTick+0x1c>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	001a      	movs	r2, r3
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <HAL_IncTick+0x20>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	18d2      	adds	r2, r2, r3
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_IncTick+0x20>)
 8002046:	601a      	str	r2, [r3, #0]
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	2000006c 	.word	0x2000006c
 8002054:	200003fc 	.word	0x200003fc

08002058 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  return uwTick;
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_GetTick+0x10>)
 800205e:	681b      	ldr	r3, [r3, #0]
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	200003fc 	.word	0x200003fc

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff fff0 	bl	8002058 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3301      	adds	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_Delay+0x40>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	001a      	movs	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	189b      	adds	r3, r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	f7ff ffe0 	bl	8002058 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d8f7      	bhi.n	8002094 <HAL_Delay+0x28>
  {
  }
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	2000006c 	.word	0x2000006c

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	0002      	movs	r2, r0
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b7f      	cmp	r3, #127	; 0x7f
 80020c2:	d809      	bhi.n	80020d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	001a      	movs	r2, r3
 80020ca:	231f      	movs	r3, #31
 80020cc:	401a      	ands	r2, r3
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_EnableIRQ+0x30>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	4091      	lsls	r1, r2
 80020d4:	000a      	movs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
  }
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	0002      	movs	r2, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b7f      	cmp	r3, #127	; 0x7f
 80020f8:	d828      	bhi.n	800214c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fa:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <__NVIC_SetPriority+0xd4>)
 80020fc:	1dfb      	adds	r3, r7, #7
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b25b      	sxtb	r3, r3
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	33c0      	adds	r3, #192	; 0xc0
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	589b      	ldr	r3, [r3, r2]
 800210a:	1dfa      	adds	r2, r7, #7
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	0011      	movs	r1, r2
 8002110:	2203      	movs	r2, #3
 8002112:	400a      	ands	r2, r1
 8002114:	00d2      	lsls	r2, r2, #3
 8002116:	21ff      	movs	r1, #255	; 0xff
 8002118:	4091      	lsls	r1, r2
 800211a:	000a      	movs	r2, r1
 800211c:	43d2      	mvns	r2, r2
 800211e:	401a      	ands	r2, r3
 8002120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	22ff      	movs	r2, #255	; 0xff
 8002128:	401a      	ands	r2, r3
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	0018      	movs	r0, r3
 8002130:	2303      	movs	r3, #3
 8002132:	4003      	ands	r3, r0
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002138:	481f      	ldr	r0, [pc, #124]	; (80021b8 <__NVIC_SetPriority+0xd4>)
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b25b      	sxtb	r3, r3
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	430a      	orrs	r2, r1
 8002144:	33c0      	adds	r3, #192	; 0xc0
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800214a:	e031      	b.n	80021b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <__NVIC_SetPriority+0xd8>)
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	0019      	movs	r1, r3
 8002154:	230f      	movs	r3, #15
 8002156:	400b      	ands	r3, r1
 8002158:	3b08      	subs	r3, #8
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3306      	adds	r3, #6
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	3304      	adds	r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1dfa      	adds	r2, r7, #7
 8002168:	7812      	ldrb	r2, [r2, #0]
 800216a:	0011      	movs	r1, r2
 800216c:	2203      	movs	r2, #3
 800216e:	400a      	ands	r2, r1
 8002170:	00d2      	lsls	r2, r2, #3
 8002172:	21ff      	movs	r1, #255	; 0xff
 8002174:	4091      	lsls	r1, r2
 8002176:	000a      	movs	r2, r1
 8002178:	43d2      	mvns	r2, r2
 800217a:	401a      	ands	r2, r3
 800217c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	22ff      	movs	r2, #255	; 0xff
 8002184:	401a      	ands	r2, r3
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	0018      	movs	r0, r3
 800218c:	2303      	movs	r3, #3
 800218e:	4003      	ands	r3, r0
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002194:	4809      	ldr	r0, [pc, #36]	; (80021bc <__NVIC_SetPriority+0xd8>)
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	001c      	movs	r4, r3
 800219c:	230f      	movs	r3, #15
 800219e:	4023      	ands	r3, r4
 80021a0:	3b08      	subs	r3, #8
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	430a      	orrs	r2, r1
 80021a6:	3306      	adds	r3, #6
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	18c3      	adds	r3, r0, r3
 80021ac:	3304      	adds	r3, #4
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b003      	add	sp, #12
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <SysTick_Config+0x40>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e010      	b.n	80021f8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <SysTick_Config+0x44>)
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	3a01      	subs	r2, #1
 80021dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	2301      	movs	r3, #1
 80021e0:	425b      	negs	r3, r3
 80021e2:	2103      	movs	r1, #3
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff ff7d 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <SysTick_Config+0x44>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SysTick_Config+0x44>)
 80021f2:	2207      	movs	r2, #7
 80021f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	00ffffff 	.word	0x00ffffff
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	210f      	movs	r1, #15
 8002214:	187b      	adds	r3, r7, r1
 8002216:	1c02      	adds	r2, r0, #0
 8002218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	187b      	adds	r3, r7, r1
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b25b      	sxtb	r3, r3
 8002222:	0011      	movs	r1, r2
 8002224:	0018      	movs	r0, r3
 8002226:	f7ff ff5d 	bl	80020e4 <__NVIC_SetPriority>
}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b004      	add	sp, #16
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	0002      	movs	r2, r0
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff ff33 	bl	80020b0 <__NVIC_EnableIRQ>
}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff ffaf 	bl	80021c0 <SysTick_Config>
 8002262:	0003      	movs	r3, r0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e036      	b.n	80022f0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2221      	movs	r2, #33	; 0x21
 8002286:	2102      	movs	r1, #2
 8002288:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_DMA_Init+0x8c>)
 8002296:	4013      	ands	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f8b4 	bl	8002440 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2221      	movs	r2, #33	; 0x21
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	2100      	movs	r1, #0
 80022ec:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}  
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b004      	add	sp, #16
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	ffffc00f 	.word	0xffffc00f

080022fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	2204      	movs	r2, #4
 800231a:	409a      	lsls	r2, r3
 800231c:	0013      	movs	r3, r2
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4013      	ands	r3, r2
 8002322:	d024      	beq.n	800236e <HAL_DMA_IRQHandler+0x72>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2204      	movs	r2, #4
 8002328:	4013      	ands	r3, r2
 800232a:	d020      	beq.n	800236e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2220      	movs	r2, #32
 8002334:	4013      	ands	r3, r2
 8002336:	d107      	bne.n	8002348 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2104      	movs	r1, #4
 8002344:	438a      	bics	r2, r1
 8002346:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	2104      	movs	r1, #4
 8002352:	4091      	lsls	r1, r2
 8002354:	000a      	movs	r2, r1
 8002356:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2b00      	cmp	r3, #0
 800235e:	d100      	bne.n	8002362 <HAL_DMA_IRQHandler+0x66>
 8002360:	e06a      	b.n	8002438 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	0010      	movs	r0, r2
 800236a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800236c:	e064      	b.n	8002438 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2202      	movs	r2, #2
 8002374:	409a      	lsls	r2, r3
 8002376:	0013      	movs	r3, r2
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4013      	ands	r3, r2
 800237c:	d02b      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xda>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2202      	movs	r2, #2
 8002382:	4013      	ands	r3, r2
 8002384:	d027      	beq.n	80023d6 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2220      	movs	r2, #32
 800238e:	4013      	ands	r3, r2
 8002390:	d10b      	bne.n	80023aa <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	210a      	movs	r1, #10
 800239e:	438a      	bics	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2221      	movs	r2, #33	; 0x21
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b2:	2102      	movs	r1, #2
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	2100      	movs	r1, #0
 80023c0:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d036      	beq.n	8002438 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	0010      	movs	r0, r2
 80023d2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80023d4:	e030      	b.n	8002438 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2208      	movs	r2, #8
 80023dc:	409a      	lsls	r2, r3
 80023de:	0013      	movs	r3, r2
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4013      	ands	r3, r2
 80023e4:	d028      	beq.n	8002438 <HAL_DMA_IRQHandler+0x13c>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2208      	movs	r2, #8
 80023ea:	4013      	ands	r3, r2
 80023ec:	d024      	beq.n	8002438 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	210e      	movs	r1, #14
 80023fa:	438a      	bics	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	2101      	movs	r1, #1
 8002408:	4091      	lsls	r1, r2
 800240a:	000a      	movs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2221      	movs	r2, #33	; 0x21
 8002418:	2101      	movs	r1, #1
 800241a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	0010      	movs	r0, r2
 8002434:	4798      	blx	r3
    }
   }
}  
 8002436:	e7ff      	b.n	8002438 <HAL_DMA_IRQHandler+0x13c>
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b004      	add	sp, #16
 800243e:	bd80      	pop	{r7, pc}

08002440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a08      	ldr	r2, [pc, #32]	; (8002470 <DMA_CalcBaseAndBitshift+0x30>)
 800244e:	4694      	mov	ip, r2
 8002450:	4463      	add	r3, ip
 8002452:	2114      	movs	r1, #20
 8002454:	0018      	movs	r0, r3
 8002456:	f7fd fe5f 	bl	8000118 <__udivsi3>
 800245a:	0003      	movs	r3, r0
 800245c:	009a      	lsls	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a03      	ldr	r2, [pc, #12]	; (8002474 <DMA_CalcBaseAndBitshift+0x34>)
 8002466:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002468:	46c0      	nop			; (mov r8, r8)
 800246a:	46bd      	mov	sp, r7
 800246c:	b002      	add	sp, #8
 800246e:	bd80      	pop	{r7, pc}
 8002470:	bffdfff8 	.word	0xbffdfff8
 8002474:	40020000 	.word	0x40020000

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002486:	e155      	b.n	8002734 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2101      	movs	r1, #1
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4091      	lsls	r1, r2
 8002492:	000a      	movs	r2, r1
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d100      	bne.n	80024a0 <HAL_GPIO_Init+0x28>
 800249e:	e146      	b.n	800272e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2203      	movs	r2, #3
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d005      	beq.n	80024b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2203      	movs	r2, #3
 80024b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d130      	bne.n	800251a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	2203      	movs	r2, #3
 80024c4:	409a      	lsls	r2, r3
 80024c6:	0013      	movs	r3, r2
 80024c8:	43da      	mvns	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	409a      	lsls	r2, r3
 80024da:	0013      	movs	r3, r2
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ee:	2201      	movs	r2, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	43da      	mvns	r2, r3
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	2201      	movs	r2, #1
 8002506:	401a      	ands	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	409a      	lsls	r2, r3
 800250c:	0013      	movs	r3, r2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2203      	movs	r2, #3
 8002520:	4013      	ands	r3, r2
 8002522:	2b03      	cmp	r3, #3
 8002524:	d017      	beq.n	8002556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	2203      	movs	r2, #3
 8002532:	409a      	lsls	r2, r3
 8002534:	0013      	movs	r3, r2
 8002536:	43da      	mvns	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	409a      	lsls	r2, r3
 8002548:	0013      	movs	r3, r2
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2203      	movs	r2, #3
 800255c:	4013      	ands	r3, r2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d123      	bne.n	80025aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	0092      	lsls	r2, r2, #2
 800256c:	58d3      	ldr	r3, [r2, r3]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2207      	movs	r2, #7
 8002574:	4013      	ands	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	409a      	lsls	r2, r3
 800257c:	0013      	movs	r3, r2
 800257e:	43da      	mvns	r2, r3
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2107      	movs	r1, #7
 800258e:	400b      	ands	r3, r1
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	409a      	lsls	r2, r3
 8002594:	0013      	movs	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	08da      	lsrs	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3208      	adds	r2, #8
 80025a4:	0092      	lsls	r2, r2, #2
 80025a6:	6939      	ldr	r1, [r7, #16]
 80025a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	409a      	lsls	r2, r3
 80025b8:	0013      	movs	r3, r2
 80025ba:	43da      	mvns	r2, r3
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2203      	movs	r2, #3
 80025c8:	401a      	ands	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	409a      	lsls	r2, r3
 80025d0:	0013      	movs	r3, r2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	23c0      	movs	r3, #192	; 0xc0
 80025e4:	029b      	lsls	r3, r3, #10
 80025e6:	4013      	ands	r3, r2
 80025e8:	d100      	bne.n	80025ec <HAL_GPIO_Init+0x174>
 80025ea:	e0a0      	b.n	800272e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ec:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_GPIO_Init+0x2d4>)
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	4b56      	ldr	r3, [pc, #344]	; (800274c <HAL_GPIO_Init+0x2d4>)
 80025f2:	2101      	movs	r1, #1
 80025f4:	430a      	orrs	r2, r1
 80025f6:	619a      	str	r2, [r3, #24]
 80025f8:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_GPIO_Init+0x2d4>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2201      	movs	r2, #1
 80025fe:	4013      	ands	r3, r2
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002604:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_GPIO_Init+0x2d8>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	3302      	adds	r3, #2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	589b      	ldr	r3, [r3, r2]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2203      	movs	r2, #3
 8002616:	4013      	ands	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	220f      	movs	r2, #15
 800261c:	409a      	lsls	r2, r3
 800261e:	0013      	movs	r3, r2
 8002620:	43da      	mvns	r2, r3
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	2390      	movs	r3, #144	; 0x90
 800262c:	05db      	lsls	r3, r3, #23
 800262e:	429a      	cmp	r2, r3
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x1ee>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a47      	ldr	r2, [pc, #284]	; (8002754 <HAL_GPIO_Init+0x2dc>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x1ea>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a46      	ldr	r2, [pc, #280]	; (8002758 <HAL_GPIO_Init+0x2e0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x1e6>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a45      	ldr	r2, [pc, #276]	; (800275c <HAL_GPIO_Init+0x2e4>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x1e2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a44      	ldr	r2, [pc, #272]	; (8002760 <HAL_GPIO_Init+0x2e8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x1de>
 8002652:	2304      	movs	r3, #4
 8002654:	e008      	b.n	8002668 <HAL_GPIO_Init+0x1f0>
 8002656:	2305      	movs	r3, #5
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x1f0>
 800265a:	2303      	movs	r3, #3
 800265c:	e004      	b.n	8002668 <HAL_GPIO_Init+0x1f0>
 800265e:	2302      	movs	r3, #2
 8002660:	e002      	b.n	8002668 <HAL_GPIO_Init+0x1f0>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_GPIO_Init+0x1f0>
 8002666:	2300      	movs	r3, #0
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	2103      	movs	r1, #3
 800266c:	400a      	ands	r2, r1
 800266e:	0092      	lsls	r2, r2, #2
 8002670:	4093      	lsls	r3, r2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002678:	4935      	ldr	r1, [pc, #212]	; (8002750 <HAL_GPIO_Init+0x2d8>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002686:	4b37      	ldr	r3, [pc, #220]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	43da      	mvns	r2, r3
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	025b      	lsls	r3, r3, #9
 800269e:	4013      	ands	r3, r2
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80026aa:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80026b0:	4b2c      	ldr	r3, [pc, #176]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	43da      	mvns	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4013      	ands	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b22      	ldr	r3, [pc, #136]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	43da      	mvns	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4013      	ands	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	035b      	lsls	r3, r3, #13
 80026f2:	4013      	ands	r3, r2
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43da      	mvns	r2, r3
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	039b      	lsls	r3, r3, #14
 800271c:	4013      	ands	r3, r2
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002728:	4b0e      	ldr	r3, [pc, #56]	; (8002764 <HAL_GPIO_Init+0x2ec>)
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3301      	adds	r3, #1
 8002732:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	40da      	lsrs	r2, r3
 800273c:	1e13      	subs	r3, r2, #0
 800273e:	d000      	beq.n	8002742 <HAL_GPIO_Init+0x2ca>
 8002740:	e6a2      	b.n	8002488 <HAL_GPIO_Init+0x10>
  } 
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b006      	add	sp, #24
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	40021000 	.word	0x40021000
 8002750:	40010000 	.word	0x40010000
 8002754:	48000400 	.word	0x48000400
 8002758:	48000800 	.word	0x48000800
 800275c:	48000c00 	.word	0x48000c00
 8002760:	48001000 	.word	0x48001000
 8002764:	40010400 	.word	0x40010400

08002768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	000a      	movs	r2, r1
 8002772:	1cbb      	adds	r3, r7, #2
 8002774:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	1cba      	adds	r2, r7, #2
 800277c:	8812      	ldrh	r2, [r2, #0]
 800277e:	4013      	ands	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002782:	230f      	movs	r3, #15
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e003      	b.n	8002794 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800278c:	230f      	movs	r3, #15
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002794:	230f      	movs	r3, #15
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	781b      	ldrb	r3, [r3, #0]
  }
 800279a:	0018      	movs	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	b004      	add	sp, #16
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e082      	b.n	80028bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2241      	movs	r2, #65	; 0x41
 80027ba:	5c9b      	ldrb	r3, [r3, r2]
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d107      	bne.n	80027d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2240      	movs	r2, #64	; 0x40
 80027c6:	2100      	movs	r1, #0
 80027c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7ff f837 	bl	8001840 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2241      	movs	r2, #65	; 0x41
 80027d6:	2124      	movs	r1, #36	; 0x24
 80027d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2101      	movs	r1, #1
 80027e6:	438a      	bics	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4934      	ldr	r1, [pc, #208]	; (80028c4 <HAL_I2C_Init+0x120>)
 80027f4:	400a      	ands	r2, r1
 80027f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689a      	ldr	r2, [r3, #8]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4931      	ldr	r1, [pc, #196]	; (80028c8 <HAL_I2C_Init+0x124>)
 8002804:	400a      	ands	r2, r1
 8002806:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d108      	bne.n	8002822 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	0209      	lsls	r1, r1, #8
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	e007      	b.n	8002832 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2184      	movs	r1, #132	; 0x84
 800282c:	0209      	lsls	r1, r1, #8
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d104      	bne.n	8002844 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	491f      	ldr	r1, [pc, #124]	; (80028cc <HAL_I2C_Init+0x128>)
 8002850:	430a      	orrs	r2, r1
 8002852:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	491a      	ldr	r1, [pc, #104]	; (80028c8 <HAL_I2C_Init+0x124>)
 8002860:	400a      	ands	r2, r1
 8002862:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	431a      	orrs	r2, r3
 800286e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69d9      	ldr	r1, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1a      	ldr	r2, [r3, #32]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2101      	movs	r1, #1
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2241      	movs	r2, #65	; 0x41
 80028a8:	2120      	movs	r1, #32
 80028aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2242      	movs	r2, #66	; 0x42
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b002      	add	sp, #8
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	f0ffffff 	.word	0xf0ffffff
 80028c8:	ffff7fff 	.word	0xffff7fff
 80028cc:	02008000 	.word	0x02008000

080028d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b089      	sub	sp, #36	; 0x24
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	0008      	movs	r0, r1
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	0019      	movs	r1, r3
 80028de:	230a      	movs	r3, #10
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	1c02      	adds	r2, r0, #0
 80028e4:	801a      	strh	r2, [r3, #0]
 80028e6:	2308      	movs	r3, #8
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	1c0a      	adds	r2, r1, #0
 80028ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2241      	movs	r2, #65	; 0x41
 80028f2:	5c9b      	ldrb	r3, [r3, r2]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	d000      	beq.n	80028fc <HAL_I2C_Master_Transmit+0x2c>
 80028fa:	e0e7      	b.n	8002acc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	5c9b      	ldrb	r3, [r3, r2]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_I2C_Master_Transmit+0x3a>
 8002906:	2302      	movs	r3, #2
 8002908:	e0e1      	b.n	8002ace <HAL_I2C_Master_Transmit+0x1fe>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2240      	movs	r2, #64	; 0x40
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002912:	f7ff fba1 	bl	8002058 <HAL_GetTick>
 8002916:	0003      	movs	r3, r0
 8002918:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	0219      	lsls	r1, r3, #8
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	2319      	movs	r3, #25
 8002926:	2201      	movs	r2, #1
 8002928:	f000 fc24 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 800292c:	1e03      	subs	r3, r0, #0
 800292e:	d001      	beq.n	8002934 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0cc      	b.n	8002ace <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2241      	movs	r2, #65	; 0x41
 8002938:	2121      	movs	r1, #33	; 0x21
 800293a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2242      	movs	r2, #66	; 0x42
 8002940:	2110      	movs	r1, #16
 8002942:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2208      	movs	r2, #8
 8002954:	18ba      	adds	r2, r7, r2
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2bff      	cmp	r3, #255	; 0xff
 8002968:	d911      	bls.n	800298e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	22ff      	movs	r2, #255	; 0xff
 800296e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	b2da      	uxtb	r2, r3
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	045c      	lsls	r4, r3, #17
 800297a:	230a      	movs	r3, #10
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	8819      	ldrh	r1, [r3, #0]
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	4b55      	ldr	r3, [pc, #340]	; (8002ad8 <HAL_I2C_Master_Transmit+0x208>)
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	0023      	movs	r3, r4
 8002988:	f000 fd28 	bl	80033dc <I2C_TransferConfig>
 800298c:	e075      	b.n	8002a7a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299c:	b2da      	uxtb	r2, r3
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	049c      	lsls	r4, r3, #18
 80029a2:	230a      	movs	r3, #10
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	8819      	ldrh	r1, [r3, #0]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	4b4b      	ldr	r3, [pc, #300]	; (8002ad8 <HAL_I2C_Master_Transmit+0x208>)
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	0023      	movs	r3, r4
 80029b0:	f000 fd14 	bl	80033dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80029b4:	e061      	b.n	8002a7a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 fc18 	bl	80031f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80029c2:	1e03      	subs	r3, r0, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e081      	b.n	8002ace <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	781a      	ldrb	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d03a      	beq.n	8002a7a <HAL_I2C_Master_Transmit+0x1aa>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d136      	bne.n	8002a7a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	0013      	movs	r3, r2
 8002a16:	2200      	movs	r2, #0
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	f000 fbab 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002a1e:	1e03      	subs	r3, r0, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e053      	b.n	8002ace <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	2bff      	cmp	r3, #255	; 0xff
 8002a2e:	d911      	bls.n	8002a54 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	22ff      	movs	r2, #255	; 0xff
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	2380      	movs	r3, #128	; 0x80
 8002a3e:	045c      	lsls	r4, r3, #17
 8002a40:	230a      	movs	r3, #10
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	8819      	ldrh	r1, [r3, #0]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	0023      	movs	r3, r4
 8002a4e:	f000 fcc5 	bl	80033dc <I2C_TransferConfig>
 8002a52:	e012      	b.n	8002a7a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	049c      	lsls	r4, r3, #18
 8002a68:	230a      	movs	r3, #10
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	8819      	ldrh	r1, [r3, #0]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	2300      	movs	r3, #0
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	0023      	movs	r3, r4
 8002a76:	f000 fcb1 	bl	80033dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d198      	bne.n	80029b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 fbf0 	bl	8003270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a90:	1e03      	subs	r3, r0, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e01a      	b.n	8002ace <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	490c      	ldr	r1, [pc, #48]	; (8002adc <HAL_I2C_Master_Transmit+0x20c>)
 8002aac:	400a      	ands	r2, r1
 8002aae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2241      	movs	r2, #65	; 0x41
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2242      	movs	r2, #66	; 0x42
 8002abc:	2100      	movs	r1, #0
 8002abe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2240      	movs	r2, #64	; 0x40
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b007      	add	sp, #28
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	80002000 	.word	0x80002000
 8002adc:	fe00e800 	.word	0xfe00e800

08002ae0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b089      	sub	sp, #36	; 0x24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	000c      	movs	r4, r1
 8002aea:	0010      	movs	r0, r2
 8002aec:	0019      	movs	r1, r3
 8002aee:	230a      	movs	r3, #10
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	1c22      	adds	r2, r4, #0
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	2308      	movs	r3, #8
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	1c02      	adds	r2, r0, #0
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	1dbb      	adds	r3, r7, #6
 8002b00:	1c0a      	adds	r2, r1, #0
 8002b02:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2241      	movs	r2, #65	; 0x41
 8002b08:	5c9b      	ldrb	r3, [r3, r2]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d000      	beq.n	8002b12 <HAL_I2C_Mem_Write+0x32>
 8002b10:	e10c      	b.n	8002d2c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_I2C_Mem_Write+0x42>
 8002b18:	232c      	movs	r3, #44	; 0x2c
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	0092      	lsls	r2, r2, #2
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e0ff      	b.n	8002d2e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	5c9b      	ldrb	r3, [r3, r2]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_I2C_Mem_Write+0x5c>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e0f8      	b.n	8002d2e <HAL_I2C_Mem_Write+0x24e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2240      	movs	r2, #64	; 0x40
 8002b40:	2101      	movs	r1, #1
 8002b42:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b44:	f7ff fa88 	bl	8002058 <HAL_GetTick>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b4c:	2380      	movs	r3, #128	; 0x80
 8002b4e:	0219      	lsls	r1, r3, #8
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	2319      	movs	r3, #25
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f000 fb0b 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002b5e:	1e03      	subs	r3, r0, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e0e3      	b.n	8002d2e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2241      	movs	r2, #65	; 0x41
 8002b6a:	2121      	movs	r1, #33	; 0x21
 8002b6c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2242      	movs	r2, #66	; 0x42
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	222c      	movs	r2, #44	; 0x2c
 8002b86:	18ba      	adds	r2, r7, r2
 8002b88:	8812      	ldrh	r2, [r2, #0]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b92:	1dbb      	adds	r3, r7, #6
 8002b94:	881c      	ldrh	r4, [r3, #0]
 8002b96:	2308      	movs	r3, #8
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	230a      	movs	r3, #10
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	8819      	ldrh	r1, [r3, #0]
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	0023      	movs	r3, r4
 8002bae:	f000 f9f9 	bl	8002fa4 <I2C_RequestMemoryWrite>
 8002bb2:	1e03      	subs	r3, r0, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2240      	movs	r2, #64	; 0x40
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e0b5      	b.n	8002d2e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2bff      	cmp	r3, #255	; 0xff
 8002bca:	d911      	bls.n	8002bf0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	045c      	lsls	r4, r3, #17
 8002bdc:	230a      	movs	r3, #10
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	8819      	ldrh	r1, [r3, #0]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	2300      	movs	r3, #0
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	0023      	movs	r3, r4
 8002bea:	f000 fbf7 	bl	80033dc <I2C_TransferConfig>
 8002bee:	e012      	b.n	8002c16 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	2380      	movs	r3, #128	; 0x80
 8002c02:	049c      	lsls	r4, r3, #18
 8002c04:	230a      	movs	r3, #10
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	8819      	ldrh	r1, [r3, #0]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	0023      	movs	r3, r4
 8002c12:	f000 fbe3 	bl	80033dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f000 fae8 	bl	80031f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c22:	1e03      	subs	r3, r0, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e081      	b.n	8002d2e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	781a      	ldrb	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d03a      	beq.n	8002cda <HAL_I2C_Mem_Write+0x1fa>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d136      	bne.n	8002cda <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	0013      	movs	r3, r2
 8002c76:	2200      	movs	r2, #0
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	f000 fa7b 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002c7e:	1e03      	subs	r3, r0, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e053      	b.n	8002d2e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	2bff      	cmp	r3, #255	; 0xff
 8002c8e:	d911      	bls.n	8002cb4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	22ff      	movs	r2, #255	; 0xff
 8002c94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	045c      	lsls	r4, r3, #17
 8002ca0:	230a      	movs	r3, #10
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	8819      	ldrh	r1, [r3, #0]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	0023      	movs	r3, r4
 8002cae:	f000 fb95 	bl	80033dc <I2C_TransferConfig>
 8002cb2:	e012      	b.n	8002cda <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	049c      	lsls	r4, r3, #18
 8002cc8:	230a      	movs	r3, #10
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	8819      	ldrh	r1, [r3, #0]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	0023      	movs	r3, r4
 8002cd6:	f000 fb81 	bl	80033dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d198      	bne.n	8002c16 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 fac0 	bl	8003270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e01a      	b.n	8002d2e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	490b      	ldr	r1, [pc, #44]	; (8002d38 <HAL_I2C_Mem_Write+0x258>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2241      	movs	r2, #65	; 0x41
 8002d14:	2120      	movs	r1, #32
 8002d16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2242      	movs	r2, #66	; 0x42
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2240      	movs	r2, #64	; 0x40
 8002d24:	2100      	movs	r1, #0
 8002d26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e000      	b.n	8002d2e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002d2c:	2302      	movs	r3, #2
  }
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b007      	add	sp, #28
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	fe00e800 	.word	0xfe00e800

08002d3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b089      	sub	sp, #36	; 0x24
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	000c      	movs	r4, r1
 8002d46:	0010      	movs	r0, r2
 8002d48:	0019      	movs	r1, r3
 8002d4a:	230a      	movs	r3, #10
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	1c22      	adds	r2, r4, #0
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	2308      	movs	r3, #8
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	1c02      	adds	r2, r0, #0
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	1dbb      	adds	r3, r7, #6
 8002d5c:	1c0a      	adds	r2, r1, #0
 8002d5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2241      	movs	r2, #65	; 0x41
 8002d64:	5c9b      	ldrb	r3, [r3, r2]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d000      	beq.n	8002d6e <HAL_I2C_Mem_Read+0x32>
 8002d6c:	e110      	b.n	8002f90 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d004      	beq.n	8002d7e <HAL_I2C_Mem_Read+0x42>
 8002d74:	232c      	movs	r3, #44	; 0x2c
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d105      	bne.n	8002d8a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	0092      	lsls	r2, r2, #2
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e103      	b.n	8002f92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2240      	movs	r2, #64	; 0x40
 8002d8e:	5c9b      	ldrb	r3, [r3, r2]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2C_Mem_Read+0x5c>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e0fc      	b.n	8002f92 <HAL_I2C_Mem_Read+0x256>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002da0:	f7ff f95a 	bl	8002058 <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	0219      	lsls	r1, r3, #8
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	2319      	movs	r3, #25
 8002db4:	2201      	movs	r2, #1
 8002db6:	f000 f9dd 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002dba:	1e03      	subs	r3, r0, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0e7      	b.n	8002f92 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2241      	movs	r2, #65	; 0x41
 8002dc6:	2122      	movs	r1, #34	; 0x22
 8002dc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2242      	movs	r2, #66	; 0x42
 8002dce:	2140      	movs	r1, #64	; 0x40
 8002dd0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	222c      	movs	r2, #44	; 0x2c
 8002de2:	18ba      	adds	r2, r7, r2
 8002de4:	8812      	ldrh	r2, [r2, #0]
 8002de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dee:	1dbb      	adds	r3, r7, #6
 8002df0:	881c      	ldrh	r4, [r3, #0]
 8002df2:	2308      	movs	r3, #8
 8002df4:	18fb      	adds	r3, r7, r3
 8002df6:	881a      	ldrh	r2, [r3, #0]
 8002df8:	230a      	movs	r3, #10
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	8819      	ldrh	r1, [r3, #0]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	0023      	movs	r3, r4
 8002e0a:	f000 f92f 	bl	800306c <I2C_RequestMemoryRead>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2240      	movs	r2, #64	; 0x40
 8002e16:	2100      	movs	r1, #0
 8002e18:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0b9      	b.n	8002f92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2bff      	cmp	r3, #255	; 0xff
 8002e26:	d911      	bls.n	8002e4c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	22ff      	movs	r2, #255	; 0xff
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	045c      	lsls	r4, r3, #17
 8002e38:	230a      	movs	r3, #10
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	8819      	ldrh	r1, [r3, #0]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <HAL_I2C_Mem_Read+0x260>)
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	0023      	movs	r3, r4
 8002e46:	f000 fac9 	bl	80033dc <I2C_TransferConfig>
 8002e4a:	e012      	b.n	8002e72 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	049c      	lsls	r4, r3, #18
 8002e60:	230a      	movs	r3, #10
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	8819      	ldrh	r1, [r3, #0]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	4b4c      	ldr	r3, [pc, #304]	; (8002f9c <HAL_I2C_Mem_Read+0x260>)
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	0023      	movs	r3, r4
 8002e6e:	f000 fab5 	bl	80033dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2104      	movs	r1, #4
 8002e80:	f000 f978 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d001      	beq.n	8002e8c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e082      	b.n	8002f92 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d03a      	beq.n	8002f3e <HAL_I2C_Mem_Read+0x202>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d136      	bne.n	8002f3e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	0013      	movs	r3, r2
 8002eda:	2200      	movs	r2, #0
 8002edc:	2180      	movs	r1, #128	; 0x80
 8002ede:	f000 f949 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e053      	b.n	8002f92 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2bff      	cmp	r3, #255	; 0xff
 8002ef2:	d911      	bls.n	8002f18 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	045c      	lsls	r4, r3, #17
 8002f04:	230a      	movs	r3, #10
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	8819      	ldrh	r1, [r3, #0]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	0023      	movs	r3, r4
 8002f12:	f000 fa63 	bl	80033dc <I2C_TransferConfig>
 8002f16:	e012      	b.n	8002f3e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	049c      	lsls	r4, r3, #18
 8002f2c:	230a      	movs	r3, #10
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	8819      	ldrh	r1, [r3, #0]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	0023      	movs	r3, r4
 8002f3a:	f000 fa4f 	bl	80033dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d194      	bne.n	8002e72 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 f98e 	bl	8003270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e01a      	b.n	8002f92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2220      	movs	r2, #32
 8002f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	490c      	ldr	r1, [pc, #48]	; (8002fa0 <HAL_I2C_Mem_Read+0x264>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2241      	movs	r2, #65	; 0x41
 8002f78:	2120      	movs	r1, #32
 8002f7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2242      	movs	r2, #66	; 0x42
 8002f80:	2100      	movs	r1, #0
 8002f82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2240      	movs	r2, #64	; 0x40
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b007      	add	sp, #28
 8002f98:	bd90      	pop	{r4, r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	80002400 	.word	0x80002400
 8002fa0:	fe00e800 	.word	0xfe00e800

08002fa4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fa4:	b5b0      	push	{r4, r5, r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	000c      	movs	r4, r1
 8002fae:	0010      	movs	r0, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	250a      	movs	r5, #10
 8002fb4:	197b      	adds	r3, r7, r5
 8002fb6:	1c22      	adds	r2, r4, #0
 8002fb8:	801a      	strh	r2, [r3, #0]
 8002fba:	2308      	movs	r3, #8
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	1c02      	adds	r2, r0, #0
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	1dbb      	adds	r3, r7, #6
 8002fc4:	1c0a      	adds	r2, r1, #0
 8002fc6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fc8:	1dbb      	adds	r3, r7, #6
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	2380      	movs	r3, #128	; 0x80
 8002fd0:	045c      	lsls	r4, r3, #17
 8002fd2:	197b      	adds	r3, r7, r5
 8002fd4:	8819      	ldrh	r1, [r3, #0]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <I2C_RequestMemoryWrite+0xc4>)
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	0023      	movs	r3, r4
 8002fde:	f000 f9fd 	bl	80033dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe4:	6a39      	ldr	r1, [r7, #32]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 f902 	bl	80031f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e033      	b.n	800305e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff6:	1dbb      	adds	r3, r7, #6
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d107      	bne.n	800300e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ffe:	2308      	movs	r3, #8
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
 800300c:	e019      	b.n	8003042 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800300e:	2308      	movs	r3, #8
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	b29b      	uxth	r3, r3
 8003018:	b2da      	uxtb	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003022:	6a39      	ldr	r1, [r7, #32]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	0018      	movs	r0, r3
 8003028:	f000 f8e3 	bl	80031f2 <I2C_WaitOnTXISFlagUntilTimeout>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e014      	b.n	800305e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003034:	2308      	movs	r3, #8
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003042:	6a3a      	ldr	r2, [r7, #32]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	0013      	movs	r3, r2
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	f000 f890 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d001      	beq.n	800305c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bdb0      	pop	{r4, r5, r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	80002000 	.word	0x80002000

0800306c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	000c      	movs	r4, r1
 8003076:	0010      	movs	r0, r2
 8003078:	0019      	movs	r1, r3
 800307a:	250a      	movs	r5, #10
 800307c:	197b      	adds	r3, r7, r5
 800307e:	1c22      	adds	r2, r4, #0
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	2308      	movs	r3, #8
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	1c02      	adds	r2, r0, #0
 8003088:	801a      	strh	r2, [r3, #0]
 800308a:	1dbb      	adds	r3, r7, #6
 800308c:	1c0a      	adds	r2, r1, #0
 800308e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003090:	1dbb      	adds	r3, r7, #6
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	197b      	adds	r3, r7, r5
 8003098:	8819      	ldrh	r1, [r3, #0]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	4b23      	ldr	r3, [pc, #140]	; (800312c <I2C_RequestMemoryRead+0xc0>)
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2300      	movs	r3, #0
 80030a2:	f000 f99b 	bl	80033dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a8:	6a39      	ldr	r1, [r7, #32]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 f8a0 	bl	80031f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80030b2:	1e03      	subs	r3, r0, #0
 80030b4:	d001      	beq.n	80030ba <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e033      	b.n	8003122 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030ba:	1dbb      	adds	r3, r7, #6
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d107      	bne.n	80030d2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c2:	2308      	movs	r3, #8
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
 80030d0:	e019      	b.n	8003106 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030d2:	2308      	movs	r3, #8
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	0a1b      	lsrs	r3, r3, #8
 80030da:	b29b      	uxth	r3, r3
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	6a39      	ldr	r1, [r7, #32]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f000 f881 	bl	80031f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d001      	beq.n	80030f8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e014      	b.n	8003122 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030f8:	2308      	movs	r3, #8
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003106:	6a3a      	ldr	r2, [r7, #32]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	0013      	movs	r3, r2
 8003110:	2200      	movs	r2, #0
 8003112:	2140      	movs	r1, #64	; 0x40
 8003114:	f000 f82e 	bl	8003174 <I2C_WaitOnFlagUntilTimeout>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d001      	beq.n	8003120 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	0018      	movs	r0, r3
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	80002000 	.word	0x80002000

08003130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2202      	movs	r2, #2
 8003140:	4013      	ands	r3, r2
 8003142:	2b02      	cmp	r3, #2
 8003144:	d103      	bne.n	800314e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2200      	movs	r2, #0
 800314c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2201      	movs	r2, #1
 8003156:	4013      	ands	r3, r2
 8003158:	2b01      	cmp	r3, #1
 800315a:	d007      	beq.n	800316c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	430a      	orrs	r2, r1
 800316a:	619a      	str	r2, [r3, #24]
  }
}
 800316c:	46c0      	nop			; (mov r8, r8)
 800316e:	46bd      	mov	sp, r7
 8003170:	b002      	add	sp, #8
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003184:	e021      	b.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	3301      	adds	r3, #1
 800318a:	d01e      	beq.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318c:	f7fe ff64 	bl	8002058 <HAL_GetTick>
 8003190:	0002      	movs	r2, r0
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d302      	bcc.n	80031a2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d113      	bne.n	80031ca <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	2220      	movs	r2, #32
 80031a8:	431a      	orrs	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2241      	movs	r2, #65	; 0x41
 80031b2:	2120      	movs	r1, #32
 80031b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2242      	movs	r2, #66	; 0x42
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2240      	movs	r2, #64	; 0x40
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00f      	b.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	425a      	negs	r2, r3
 80031da:	4153      	adcs	r3, r2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	001a      	movs	r2, r3
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d0ce      	beq.n	8003186 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031fe:	e02b      	b.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	0018      	movs	r0, r3
 8003208:	f000 f86e 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 800320c:	1e03      	subs	r3, r0, #0
 800320e:	d001      	beq.n	8003214 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e029      	b.n	8003268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3301      	adds	r3, #1
 8003218:	d01e      	beq.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321a:	f7fe ff1d 	bl	8002058 <HAL_GetTick>
 800321e:	0002      	movs	r2, r0
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d113      	bne.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003234:	2220      	movs	r2, #32
 8003236:	431a      	orrs	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2241      	movs	r2, #65	; 0x41
 8003240:	2120      	movs	r1, #32
 8003242:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2242      	movs	r2, #66	; 0x42
 8003248:	2100      	movs	r1, #0
 800324a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2240      	movs	r2, #64	; 0x40
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2202      	movs	r2, #2
 8003260:	4013      	ands	r3, r2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d1cc      	bne.n	8003200 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b004      	add	sp, #16
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800327c:	e028      	b.n	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	0018      	movs	r0, r3
 8003286:	f000 f82f 	bl	80032e8 <I2C_IsAcknowledgeFailed>
 800328a:	1e03      	subs	r3, r0, #0
 800328c:	d001      	beq.n	8003292 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e026      	b.n	80032e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003292:	f7fe fee1 	bl	8002058 <HAL_GetTick>
 8003296:	0002      	movs	r2, r0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d302      	bcc.n	80032a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d113      	bne.n	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	2220      	movs	r2, #32
 80032ae:	431a      	orrs	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2241      	movs	r2, #65	; 0x41
 80032b8:	2120      	movs	r1, #32
 80032ba:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2242      	movs	r2, #66	; 0x42
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2240      	movs	r2, #64	; 0x40
 80032c8:	2100      	movs	r1, #0
 80032ca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e007      	b.n	80032e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2220      	movs	r2, #32
 80032d8:	4013      	ands	r3, r2
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d1cf      	bne.n	800327e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b004      	add	sp, #16
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2210      	movs	r2, #16
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b10      	cmp	r3, #16
 8003300:	d164      	bne.n	80033cc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	049b      	lsls	r3, r3, #18
 800330c:	401a      	ands	r2, r3
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	049b      	lsls	r3, r3, #18
 8003312:	429a      	cmp	r2, r3
 8003314:	d02b      	beq.n	800336e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	01c9      	lsls	r1, r1, #7
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003328:	e021      	b.n	800336e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	3301      	adds	r3, #1
 800332e:	d01e      	beq.n	800336e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003330:	f7fe fe92 	bl	8002058 <HAL_GetTick>
 8003334:	0002      	movs	r2, r0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	d302      	bcc.n	8003346 <I2C_IsAcknowledgeFailed+0x5e>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d113      	bne.n	800336e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	2220      	movs	r2, #32
 800334c:	431a      	orrs	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2241      	movs	r2, #65	; 0x41
 8003356:	2120      	movs	r1, #32
 8003358:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2242      	movs	r2, #66	; 0x42
 800335e:	2100      	movs	r1, #0
 8003360:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2240      	movs	r2, #64	; 0x40
 8003366:	2100      	movs	r1, #0
 8003368:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e02f      	b.n	80033ce <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2220      	movs	r2, #32
 8003376:	4013      	ands	r3, r2
 8003378:	2b20      	cmp	r3, #32
 800337a:	d1d6      	bne.n	800332a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2210      	movs	r2, #16
 8003382:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2220      	movs	r2, #32
 800338a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	0018      	movs	r0, r3
 8003390:	f7ff fece 	bl	8003130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	490e      	ldr	r1, [pc, #56]	; (80033d8 <I2C_IsAcknowledgeFailed+0xf0>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	2204      	movs	r2, #4
 80033aa:	431a      	orrs	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2241      	movs	r2, #65	; 0x41
 80033b4:	2120      	movs	r1, #32
 80033b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2242      	movs	r2, #66	; 0x42
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2240      	movs	r2, #64	; 0x40
 80033c4:	2100      	movs	r1, #0
 80033c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e000      	b.n	80033ce <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b004      	add	sp, #16
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	fe00e800 	.word	0xfe00e800

080033dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	0008      	movs	r0, r1
 80033e6:	0011      	movs	r1, r2
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	240a      	movs	r4, #10
 80033ec:	193b      	adds	r3, r7, r4
 80033ee:	1c02      	adds	r2, r0, #0
 80033f0:	801a      	strh	r2, [r3, #0]
 80033f2:	2009      	movs	r0, #9
 80033f4:	183b      	adds	r3, r7, r0
 80033f6:	1c0a      	adds	r2, r1, #0
 80033f8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	0d51      	lsrs	r1, r2, #21
 8003404:	2280      	movs	r2, #128	; 0x80
 8003406:	00d2      	lsls	r2, r2, #3
 8003408:	400a      	ands	r2, r1
 800340a:	490e      	ldr	r1, [pc, #56]	; (8003444 <I2C_TransferConfig+0x68>)
 800340c:	430a      	orrs	r2, r1
 800340e:	43d2      	mvns	r2, r2
 8003410:	401a      	ands	r2, r3
 8003412:	0011      	movs	r1, r2
 8003414:	193b      	adds	r3, r7, r4
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	059b      	lsls	r3, r3, #22
 800341a:	0d9a      	lsrs	r2, r3, #22
 800341c:	183b      	adds	r3, r7, r0
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	0418      	lsls	r0, r3, #16
 8003422:	23ff      	movs	r3, #255	; 0xff
 8003424:	041b      	lsls	r3, r3, #16
 8003426:	4003      	ands	r3, r0
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	431a      	orrs	r2, r3
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b005      	add	sp, #20
 8003440:	bd90      	pop	{r4, r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	03ff63ff 	.word	0x03ff63ff

08003448 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2241      	movs	r2, #65	; 0x41
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b20      	cmp	r3, #32
 800345c:	d138      	bne.n	80034d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2240      	movs	r2, #64	; 0x40
 8003462:	5c9b      	ldrb	r3, [r3, r2]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003468:	2302      	movs	r3, #2
 800346a:	e032      	b.n	80034d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	2101      	movs	r1, #1
 8003472:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2241      	movs	r2, #65	; 0x41
 8003478:	2124      	movs	r1, #36	; 0x24
 800347a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2101      	movs	r1, #1
 8003488:	438a      	bics	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4911      	ldr	r1, [pc, #68]	; (80034dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003498:	400a      	ands	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6819      	ldr	r1, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2241      	movs	r2, #65	; 0x41
 80034c0:	2120      	movs	r1, #32
 80034c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2240      	movs	r2, #64	; 0x40
 80034c8:	2100      	movs	r1, #0
 80034ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e000      	b.n	80034d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
  }
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b002      	add	sp, #8
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	ffffefff 	.word	0xffffefff

080034e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	f000 fb76 	bl	8003be0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2201      	movs	r2, #1
 80034fa:	4013      	ands	r3, r2
 80034fc:	d100      	bne.n	8003500 <HAL_RCC_OscConfig+0x20>
 80034fe:	e08e      	b.n	800361e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003500:	4bc5      	ldr	r3, [pc, #788]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	220c      	movs	r2, #12
 8003506:	4013      	ands	r3, r2
 8003508:	2b04      	cmp	r3, #4
 800350a:	d00e      	beq.n	800352a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800350c:	4bc2      	ldr	r3, [pc, #776]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	220c      	movs	r2, #12
 8003512:	4013      	ands	r3, r2
 8003514:	2b08      	cmp	r3, #8
 8003516:	d117      	bne.n	8003548 <HAL_RCC_OscConfig+0x68>
 8003518:	4bbf      	ldr	r3, [pc, #764]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	23c0      	movs	r3, #192	; 0xc0
 800351e:	025b      	lsls	r3, r3, #9
 8003520:	401a      	ands	r2, r3
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	025b      	lsls	r3, r3, #9
 8003526:	429a      	cmp	r2, r3
 8003528:	d10e      	bne.n	8003548 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352a:	4bbb      	ldr	r3, [pc, #748]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	029b      	lsls	r3, r3, #10
 8003532:	4013      	ands	r3, r2
 8003534:	d100      	bne.n	8003538 <HAL_RCC_OscConfig+0x58>
 8003536:	e071      	b.n	800361c <HAL_RCC_OscConfig+0x13c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d000      	beq.n	8003542 <HAL_RCC_OscConfig+0x62>
 8003540:	e06c      	b.n	800361c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f000 fb4c 	bl	8003be0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_RCC_OscConfig+0x80>
 8003550:	4bb1      	ldr	r3, [pc, #708]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4bb0      	ldr	r3, [pc, #704]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003556:	2180      	movs	r1, #128	; 0x80
 8003558:	0249      	lsls	r1, r1, #9
 800355a:	430a      	orrs	r2, r1
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e02f      	b.n	80035c0 <HAL_RCC_OscConfig+0xe0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d10c      	bne.n	8003582 <HAL_RCC_OscConfig+0xa2>
 8003568:	4bab      	ldr	r3, [pc, #684]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4baa      	ldr	r3, [pc, #680]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800356e:	49ab      	ldr	r1, [pc, #684]	; (800381c <HAL_RCC_OscConfig+0x33c>)
 8003570:	400a      	ands	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	4ba8      	ldr	r3, [pc, #672]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4ba7      	ldr	r3, [pc, #668]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800357a:	49a9      	ldr	r1, [pc, #676]	; (8003820 <HAL_RCC_OscConfig+0x340>)
 800357c:	400a      	ands	r2, r1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	e01e      	b.n	80035c0 <HAL_RCC_OscConfig+0xe0>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b05      	cmp	r3, #5
 8003588:	d10e      	bne.n	80035a8 <HAL_RCC_OscConfig+0xc8>
 800358a:	4ba3      	ldr	r3, [pc, #652]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	4ba2      	ldr	r3, [pc, #648]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003590:	2180      	movs	r1, #128	; 0x80
 8003592:	02c9      	lsls	r1, r1, #11
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	4b9f      	ldr	r3, [pc, #636]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b9e      	ldr	r3, [pc, #632]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800359e:	2180      	movs	r1, #128	; 0x80
 80035a0:	0249      	lsls	r1, r1, #9
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]
 80035a6:	e00b      	b.n	80035c0 <HAL_RCC_OscConfig+0xe0>
 80035a8:	4b9b      	ldr	r3, [pc, #620]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b9a      	ldr	r3, [pc, #616]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80035ae:	499b      	ldr	r1, [pc, #620]	; (800381c <HAL_RCC_OscConfig+0x33c>)
 80035b0:	400a      	ands	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	4b98      	ldr	r3, [pc, #608]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b97      	ldr	r3, [pc, #604]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80035ba:	4999      	ldr	r1, [pc, #612]	; (8003820 <HAL_RCC_OscConfig+0x340>)
 80035bc:	400a      	ands	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d014      	beq.n	80035f2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fe fd46 	bl	8002058 <HAL_GetTick>
 80035cc:	0003      	movs	r3, r0
 80035ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d2:	f7fe fd41 	bl	8002058 <HAL_GetTick>
 80035d6:	0002      	movs	r2, r0
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b64      	cmp	r3, #100	; 0x64
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e2fd      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e4:	4b8c      	ldr	r3, [pc, #560]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	029b      	lsls	r3, r3, #10
 80035ec:	4013      	ands	r3, r2
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0xf2>
 80035f0:	e015      	b.n	800361e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f2:	f7fe fd31 	bl	8002058 <HAL_GetTick>
 80035f6:	0003      	movs	r3, r0
 80035f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035fa:	e008      	b.n	800360e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035fc:	f7fe fd2c 	bl	8002058 <HAL_GetTick>
 8003600:	0002      	movs	r2, r0
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	2b64      	cmp	r3, #100	; 0x64
 8003608:	d901      	bls.n	800360e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e2e8      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800360e:	4b82      	ldr	r3, [pc, #520]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	029b      	lsls	r3, r3, #10
 8003616:	4013      	ands	r3, r2
 8003618:	d1f0      	bne.n	80035fc <HAL_RCC_OscConfig+0x11c>
 800361a:	e000      	b.n	800361e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800361c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2202      	movs	r2, #2
 8003624:	4013      	ands	r3, r2
 8003626:	d100      	bne.n	800362a <HAL_RCC_OscConfig+0x14a>
 8003628:	e06c      	b.n	8003704 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800362a:	4b7b      	ldr	r3, [pc, #492]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	220c      	movs	r2, #12
 8003630:	4013      	ands	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003634:	4b78      	ldr	r3, [pc, #480]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	220c      	movs	r2, #12
 800363a:	4013      	ands	r3, r2
 800363c:	2b08      	cmp	r3, #8
 800363e:	d11f      	bne.n	8003680 <HAL_RCC_OscConfig+0x1a0>
 8003640:	4b75      	ldr	r3, [pc, #468]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	23c0      	movs	r3, #192	; 0xc0
 8003646:	025b      	lsls	r3, r3, #9
 8003648:	401a      	ands	r2, r3
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	429a      	cmp	r2, r3
 8003650:	d116      	bne.n	8003680 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	4b71      	ldr	r3, [pc, #452]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2202      	movs	r2, #2
 8003658:	4013      	ands	r3, r2
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x188>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d001      	beq.n	8003668 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e2bb      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4b6b      	ldr	r3, [pc, #428]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	22f8      	movs	r2, #248	; 0xf8
 800366e:	4393      	bics	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00da      	lsls	r2, r3, #3
 8003678:	4b67      	ldr	r3, [pc, #412]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	e041      	b.n	8003704 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d024      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003688:	4b63      	ldr	r3, [pc, #396]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b62      	ldr	r3, [pc, #392]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fce0 	bl	8002058 <HAL_GetTick>
 8003698:	0003      	movs	r3, r0
 800369a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800369e:	f7fe fcdb 	bl	8002058 <HAL_GetTick>
 80036a2:	0002      	movs	r2, r0
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e297      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	4b59      	ldr	r3, [pc, #356]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2202      	movs	r2, #2
 80036b6:	4013      	ands	r3, r2
 80036b8:	d0f1      	beq.n	800369e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b57      	ldr	r3, [pc, #348]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	22f8      	movs	r2, #248	; 0xf8
 80036c0:	4393      	bics	r3, r2
 80036c2:	0019      	movs	r1, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	00da      	lsls	r2, r3, #3
 80036ca:	4b53      	ldr	r3, [pc, #332]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e018      	b.n	8003704 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d2:	4b51      	ldr	r3, [pc, #324]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b50      	ldr	r3, [pc, #320]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80036d8:	2101      	movs	r1, #1
 80036da:	438a      	bics	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fe fcbb 	bl	8002058 <HAL_GetTick>
 80036e2:	0003      	movs	r3, r0
 80036e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e8:	f7fe fcb6 	bl	8002058 <HAL_GetTick>
 80036ec:	0002      	movs	r2, r0
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e272      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fa:	4b47      	ldr	r3, [pc, #284]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2202      	movs	r2, #2
 8003700:	4013      	ands	r3, r2
 8003702:	d1f1      	bne.n	80036e8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2208      	movs	r2, #8
 800370a:	4013      	ands	r3, r2
 800370c:	d036      	beq.n	800377c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d019      	beq.n	800374a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003716:	4b40      	ldr	r3, [pc, #256]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800371a:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800371c:	2101      	movs	r1, #1
 800371e:	430a      	orrs	r2, r1
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003722:	f7fe fc99 	bl	8002058 <HAL_GetTick>
 8003726:	0003      	movs	r3, r0
 8003728:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fc94 	bl	8002058 <HAL_GetTick>
 8003730:	0002      	movs	r2, r0
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e250      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b36      	ldr	r3, [pc, #216]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2202      	movs	r2, #2
 8003744:	4013      	ands	r3, r2
 8003746:	d0f1      	beq.n	800372c <HAL_RCC_OscConfig+0x24c>
 8003748:	e018      	b.n	800377c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800374c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800374e:	4b32      	ldr	r3, [pc, #200]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003750:	2101      	movs	r1, #1
 8003752:	438a      	bics	r2, r1
 8003754:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fe fc7f 	bl	8002058 <HAL_GetTick>
 800375a:	0003      	movs	r3, r0
 800375c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003760:	f7fe fc7a 	bl	8002058 <HAL_GetTick>
 8003764:	0002      	movs	r2, r0
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e236      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003776:	2202      	movs	r2, #2
 8003778:	4013      	ands	r3, r2
 800377a:	d1f1      	bne.n	8003760 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2204      	movs	r2, #4
 8003782:	4013      	ands	r3, r2
 8003784:	d100      	bne.n	8003788 <HAL_RCC_OscConfig+0x2a8>
 8003786:	e0b5      	b.n	80038f4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003788:	231f      	movs	r3, #31
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	055b      	lsls	r3, r3, #21
 8003798:	4013      	ands	r3, r2
 800379a:	d111      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800379c:	4b1e      	ldr	r3, [pc, #120]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	0549      	lsls	r1, r1, #21
 80037a6:	430a      	orrs	r2, r1
 80037a8:	61da      	str	r2, [r3, #28]
 80037aa:	4b1b      	ldr	r3, [pc, #108]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	055b      	lsls	r3, r3, #21
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037b8:	231f      	movs	r3, #31
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	2201      	movs	r2, #1
 80037be:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b18      	ldr	r3, [pc, #96]	; (8003824 <HAL_RCC_OscConfig+0x344>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	d11a      	bne.n	8003802 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <HAL_RCC_OscConfig+0x344>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <HAL_RCC_OscConfig+0x344>)
 80037d2:	2180      	movs	r1, #128	; 0x80
 80037d4:	0049      	lsls	r1, r1, #1
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037da:	f7fe fc3d 	bl	8002058 <HAL_GetTick>
 80037de:	0003      	movs	r3, r0
 80037e0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e4:	f7fe fc38 	bl	8002058 <HAL_GetTick>
 80037e8:	0002      	movs	r2, r0
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1f4      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f6:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_OscConfig+0x344>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4013      	ands	r3, r2
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10e      	bne.n	8003828 <HAL_RCC_OscConfig+0x348>
 800380a:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 800380c:	6a1a      	ldr	r2, [r3, #32]
 800380e:	4b02      	ldr	r3, [pc, #8]	; (8003818 <HAL_RCC_OscConfig+0x338>)
 8003810:	2101      	movs	r1, #1
 8003812:	430a      	orrs	r2, r1
 8003814:	621a      	str	r2, [r3, #32]
 8003816:	e035      	b.n	8003884 <HAL_RCC_OscConfig+0x3a4>
 8003818:	40021000 	.word	0x40021000
 800381c:	fffeffff 	.word	0xfffeffff
 8003820:	fffbffff 	.word	0xfffbffff
 8003824:	40007000 	.word	0x40007000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10c      	bne.n	800384a <HAL_RCC_OscConfig+0x36a>
 8003830:	4bca      	ldr	r3, [pc, #808]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	4bc9      	ldr	r3, [pc, #804]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003836:	2101      	movs	r1, #1
 8003838:	438a      	bics	r2, r1
 800383a:	621a      	str	r2, [r3, #32]
 800383c:	4bc7      	ldr	r3, [pc, #796]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	4bc6      	ldr	r3, [pc, #792]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003842:	2104      	movs	r1, #4
 8003844:	438a      	bics	r2, r1
 8003846:	621a      	str	r2, [r3, #32]
 8003848:	e01c      	b.n	8003884 <HAL_RCC_OscConfig+0x3a4>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b05      	cmp	r3, #5
 8003850:	d10c      	bne.n	800386c <HAL_RCC_OscConfig+0x38c>
 8003852:	4bc2      	ldr	r3, [pc, #776]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003854:	6a1a      	ldr	r2, [r3, #32]
 8003856:	4bc1      	ldr	r3, [pc, #772]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003858:	2104      	movs	r1, #4
 800385a:	430a      	orrs	r2, r1
 800385c:	621a      	str	r2, [r3, #32]
 800385e:	4bbf      	ldr	r3, [pc, #764]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003860:	6a1a      	ldr	r2, [r3, #32]
 8003862:	4bbe      	ldr	r3, [pc, #760]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003864:	2101      	movs	r1, #1
 8003866:	430a      	orrs	r2, r1
 8003868:	621a      	str	r2, [r3, #32]
 800386a:	e00b      	b.n	8003884 <HAL_RCC_OscConfig+0x3a4>
 800386c:	4bbb      	ldr	r3, [pc, #748]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800386e:	6a1a      	ldr	r2, [r3, #32]
 8003870:	4bba      	ldr	r3, [pc, #744]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003872:	2101      	movs	r1, #1
 8003874:	438a      	bics	r2, r1
 8003876:	621a      	str	r2, [r3, #32]
 8003878:	4bb8      	ldr	r3, [pc, #736]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800387a:	6a1a      	ldr	r2, [r3, #32]
 800387c:	4bb7      	ldr	r3, [pc, #732]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800387e:	2104      	movs	r1, #4
 8003880:	438a      	bics	r2, r1
 8003882:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d014      	beq.n	80038b6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388c:	f7fe fbe4 	bl	8002058 <HAL_GetTick>
 8003890:	0003      	movs	r3, r0
 8003892:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003894:	e009      	b.n	80038aa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003896:	f7fe fbdf 	bl	8002058 <HAL_GetTick>
 800389a:	0002      	movs	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	4aaf      	ldr	r2, [pc, #700]	; (8003b60 <HAL_RCC_OscConfig+0x680>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e19a      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038aa:	4bac      	ldr	r3, [pc, #688]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	2202      	movs	r2, #2
 80038b0:	4013      	ands	r3, r2
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x3b6>
 80038b4:	e013      	b.n	80038de <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b6:	f7fe fbcf 	bl	8002058 <HAL_GetTick>
 80038ba:	0003      	movs	r3, r0
 80038bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038be:	e009      	b.n	80038d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c0:	f7fe fbca 	bl	8002058 <HAL_GetTick>
 80038c4:	0002      	movs	r2, r0
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	4aa5      	ldr	r2, [pc, #660]	; (8003b60 <HAL_RCC_OscConfig+0x680>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e185      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d4:	4ba1      	ldr	r3, [pc, #644]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	2202      	movs	r2, #2
 80038da:	4013      	ands	r3, r2
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038de:	231f      	movs	r3, #31
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d105      	bne.n	80038f4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e8:	4b9c      	ldr	r3, [pc, #624]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	4b9b      	ldr	r3, [pc, #620]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 80038ee:	499d      	ldr	r1, [pc, #628]	; (8003b64 <HAL_RCC_OscConfig+0x684>)
 80038f0:	400a      	ands	r2, r1
 80038f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2210      	movs	r2, #16
 80038fa:	4013      	ands	r3, r2
 80038fc:	d063      	beq.n	80039c6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d12a      	bne.n	800395c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003906:	4b95      	ldr	r3, [pc, #596]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800390a:	4b94      	ldr	r3, [pc, #592]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800390c:	2104      	movs	r1, #4
 800390e:	430a      	orrs	r2, r1
 8003910:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003912:	4b92      	ldr	r3, [pc, #584]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003916:	4b91      	ldr	r3, [pc, #580]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003918:	2101      	movs	r1, #1
 800391a:	430a      	orrs	r2, r1
 800391c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391e:	f7fe fb9b 	bl	8002058 <HAL_GetTick>
 8003922:	0003      	movs	r3, r0
 8003924:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003928:	f7fe fb96 	bl	8002058 <HAL_GetTick>
 800392c:	0002      	movs	r2, r0
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e152      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800393a:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	2202      	movs	r2, #2
 8003940:	4013      	ands	r3, r2
 8003942:	d0f1      	beq.n	8003928 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003944:	4b85      	ldr	r3, [pc, #532]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	22f8      	movs	r2, #248	; 0xf8
 800394a:	4393      	bics	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	00da      	lsls	r2, r3, #3
 8003954:	4b81      	ldr	r3, [pc, #516]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003956:	430a      	orrs	r2, r1
 8003958:	635a      	str	r2, [r3, #52]	; 0x34
 800395a:	e034      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	3305      	adds	r3, #5
 8003962:	d111      	bne.n	8003988 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003964:	4b7d      	ldr	r3, [pc, #500]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003968:	4b7c      	ldr	r3, [pc, #496]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800396a:	2104      	movs	r1, #4
 800396c:	438a      	bics	r2, r1
 800396e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003970:	4b7a      	ldr	r3, [pc, #488]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	22f8      	movs	r2, #248	; 0xf8
 8003976:	4393      	bics	r3, r2
 8003978:	0019      	movs	r1, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	00da      	lsls	r2, r3, #3
 8003980:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003982:	430a      	orrs	r2, r1
 8003984:	635a      	str	r2, [r3, #52]	; 0x34
 8003986:	e01e      	b.n	80039c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003988:	4b74      	ldr	r3, [pc, #464]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800398a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800398c:	4b73      	ldr	r3, [pc, #460]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800398e:	2104      	movs	r1, #4
 8003990:	430a      	orrs	r2, r1
 8003992:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003994:	4b71      	ldr	r3, [pc, #452]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003998:	4b70      	ldr	r3, [pc, #448]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 800399a:	2101      	movs	r1, #1
 800399c:	438a      	bics	r2, r1
 800399e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a0:	f7fe fb5a 	bl	8002058 <HAL_GetTick>
 80039a4:	0003      	movs	r3, r0
 80039a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80039aa:	f7fe fb55 	bl	8002058 <HAL_GetTick>
 80039ae:	0002      	movs	r2, r0
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e111      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80039bc:	4b67      	ldr	r3, [pc, #412]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 80039be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c0:	2202      	movs	r2, #2
 80039c2:	4013      	ands	r3, r2
 80039c4:	d1f1      	bne.n	80039aa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2220      	movs	r2, #32
 80039cc:	4013      	ands	r3, r2
 80039ce:	d05c      	beq.n	8003a8a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80039d0:	4b62      	ldr	r3, [pc, #392]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	220c      	movs	r2, #12
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b0c      	cmp	r3, #12
 80039da:	d00e      	beq.n	80039fa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80039dc:	4b5f      	ldr	r3, [pc, #380]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	220c      	movs	r2, #12
 80039e2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d114      	bne.n	8003a12 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80039e8:	4b5c      	ldr	r3, [pc, #368]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	23c0      	movs	r3, #192	; 0xc0
 80039ee:	025b      	lsls	r3, r3, #9
 80039f0:	401a      	ands	r2, r3
 80039f2:	23c0      	movs	r3, #192	; 0xc0
 80039f4:	025b      	lsls	r3, r3, #9
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80039fa:	4b58      	ldr	r3, [pc, #352]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 80039fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	025b      	lsls	r3, r3, #9
 8003a02:	4013      	ands	r3, r2
 8003a04:	d040      	beq.n	8003a88 <HAL_RCC_OscConfig+0x5a8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d03c      	beq.n	8003a88 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0e6      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01b      	beq.n	8003a52 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a1a:	4b50      	ldr	r3, [pc, #320]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1e:	4b4f      	ldr	r3, [pc, #316]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003a20:	2180      	movs	r1, #128	; 0x80
 8003a22:	0249      	lsls	r1, r1, #9
 8003a24:	430a      	orrs	r2, r1
 8003a26:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fe fb16 	bl	8002058 <HAL_GetTick>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a32:	f7fe fb11 	bl	8002058 <HAL_GetTick>
 8003a36:	0002      	movs	r2, r0
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e0cd      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003a44:	4b45      	ldr	r3, [pc, #276]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	025b      	lsls	r3, r3, #9
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x552>
 8003a50:	e01b      	b.n	8003a8a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003a52:	4b42      	ldr	r3, [pc, #264]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a56:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003a58:	4943      	ldr	r1, [pc, #268]	; (8003b68 <HAL_RCC_OscConfig+0x688>)
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5e:	f7fe fafb 	bl	8002058 <HAL_GetTick>
 8003a62:	0003      	movs	r3, r0
 8003a64:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a68:	f7fe faf6 	bl	8002058 <HAL_GetTick>
 8003a6c:	0002      	movs	r2, r0
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0b2      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a7a:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	025b      	lsls	r3, r3, #9
 8003a82:	4013      	ands	r3, r2
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x588>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003a88:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d100      	bne.n	8003a94 <HAL_RCC_OscConfig+0x5b4>
 8003a92:	e0a4      	b.n	8003bde <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a94:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	220c      	movs	r2, #12
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d100      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x5c2>
 8003aa0:	e078      	b.n	8003b94 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d14c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b2b      	ldr	r3, [pc, #172]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003ab0:	492e      	ldr	r1, [pc, #184]	; (8003b6c <HAL_RCC_OscConfig+0x68c>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab6:	f7fe facf 	bl	8002058 <HAL_GetTick>
 8003aba:	0003      	movs	r3, r0
 8003abc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe faca 	bl	8002058 <HAL_GetTick>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e086      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad2:	4b22      	ldr	r3, [pc, #136]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	049b      	lsls	r3, r3, #18
 8003ada:	4013      	ands	r3, r2
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	220f      	movs	r2, #15
 8003ae4:	4393      	bics	r3, r2
 8003ae6:	0019      	movs	r1, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003aee:	430a      	orrs	r2, r1
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c
 8003af2:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <HAL_RCC_OscConfig+0x690>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	431a      	orrs	r2, r3
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003b12:	2180      	movs	r1, #128	; 0x80
 8003b14:	0449      	lsls	r1, r1, #17
 8003b16:	430a      	orrs	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fa9d 	bl	8002058 <HAL_GetTick>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fa98 	bl	8002058 <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e054      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	049b      	lsls	r3, r3, #18
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x644>
 8003b42:	e04c      	b.n	8003bde <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <HAL_RCC_OscConfig+0x67c>)
 8003b4a:	4908      	ldr	r1, [pc, #32]	; (8003b6c <HAL_RCC_OscConfig+0x68c>)
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe fa82 	bl	8002058 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	e015      	b.n	8003b86 <HAL_RCC_OscConfig+0x6a6>
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	00001388 	.word	0x00001388
 8003b64:	efffffff 	.word	0xefffffff
 8003b68:	fffeffff 	.word	0xfffeffff
 8003b6c:	feffffff 	.word	0xfeffffff
 8003b70:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b74:	f7fe fa70 	bl	8002058 <HAL_GetTick>
 8003b78:	0002      	movs	r2, r0
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e02c      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b86:	4b18      	ldr	r3, [pc, #96]	; (8003be8 <HAL_RCC_OscConfig+0x708>)
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	049b      	lsls	r3, r3, #18
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x694>
 8003b92:	e024      	b.n	8003bde <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e01f      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_RCC_OscConfig+0x708>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <HAL_RCC_OscConfig+0x708>)
 8003ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003baa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	23c0      	movs	r3, #192	; 0xc0
 8003bb0:	025b      	lsls	r3, r3, #9
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d10e      	bne.n	8003bda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	220f      	movs	r2, #15
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	23f0      	movs	r3, #240	; 0xf0
 8003bce:	039b      	lsls	r3, r3, #14
 8003bd0:	401a      	ands	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d001      	beq.n	8003bde <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b008      	add	sp, #32
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40021000 	.word	0x40021000

08003bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0bf      	b.n	8003d80 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b61      	ldr	r3, [pc, #388]	; (8003d88 <HAL_RCC_ClockConfig+0x19c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2201      	movs	r2, #1
 8003c06:	4013      	ands	r3, r2
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d911      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b5e      	ldr	r3, [pc, #376]	; (8003d88 <HAL_RCC_ClockConfig+0x19c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2201      	movs	r2, #1
 8003c14:	4393      	bics	r3, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	4b5b      	ldr	r3, [pc, #364]	; (8003d88 <HAL_RCC_ClockConfig+0x19c>)
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c20:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <HAL_RCC_ClockConfig+0x19c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2201      	movs	r2, #1
 8003c26:	4013      	ands	r3, r2
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d001      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e0a6      	b.n	8003d80 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2202      	movs	r2, #2
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d015      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2204      	movs	r2, #4
 8003c42:	4013      	ands	r3, r2
 8003c44:	d006      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003c46:	4b51      	ldr	r3, [pc, #324]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4b50      	ldr	r3, [pc, #320]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003c4c:	21e0      	movs	r1, #224	; 0xe0
 8003c4e:	00c9      	lsls	r1, r1, #3
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c54:	4b4d      	ldr	r3, [pc, #308]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	22f0      	movs	r2, #240	; 0xf0
 8003c5a:	4393      	bics	r3, r2
 8003c5c:	0019      	movs	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689a      	ldr	r2, [r3, #8]
 8003c62:	4b4a      	ldr	r3, [pc, #296]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003c64:	430a      	orrs	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d04c      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	4b44      	ldr	r3, [pc, #272]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	2380      	movs	r3, #128	; 0x80
 8003c80:	029b      	lsls	r3, r3, #10
 8003c82:	4013      	ands	r3, r2
 8003c84:	d120      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e07a      	b.n	8003d80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	049b      	lsls	r3, r3, #18
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	d114      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06e      	b.n	8003d80 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003caa:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cae:	2380      	movs	r3, #128	; 0x80
 8003cb0:	025b      	lsls	r3, r3, #9
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d108      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e062      	b.n	8003d80 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b34      	ldr	r3, [pc, #208]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e05b      	b.n	8003d80 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cc8:	4b30      	ldr	r3, [pc, #192]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	4393      	bics	r3, r2
 8003cd0:	0019      	movs	r1, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4b2d      	ldr	r3, [pc, #180]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fe f9bc 	bl	8002058 <HAL_GetTick>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce4:	e009      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce6:	f7fe f9b7 	bl	8002058 <HAL_GetTick>
 8003cea:	0002      	movs	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	4a27      	ldr	r2, [pc, #156]	; (8003d90 <HAL_RCC_ClockConfig+0x1a4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e042      	b.n	8003d80 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	220c      	movs	r2, #12
 8003d00:	401a      	ands	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1ec      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <HAL_RCC_ClockConfig+0x19c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2201      	movs	r2, #1
 8003d12:	4013      	ands	r3, r2
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d211      	bcs.n	8003d3e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_RCC_ClockConfig+0x19c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4393      	bics	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <HAL_RCC_ClockConfig+0x19c>)
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2c:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <HAL_RCC_ClockConfig+0x19c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	4013      	ands	r3, r2
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d001      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e020      	b.n	8003d80 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2204      	movs	r2, #4
 8003d44:	4013      	ands	r3, r2
 8003d46:	d009      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <HAL_RCC_ClockConfig+0x1a8>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	0019      	movs	r1, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d5c:	f000 f820 	bl	8003da0 <HAL_RCC_GetSysClockFreq>
 8003d60:	0001      	movs	r1, r0
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_RCC_ClockConfig+0x1a0>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	220f      	movs	r2, #15
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <HAL_RCC_ClockConfig+0x1ac>)
 8003d6e:	5cd3      	ldrb	r3, [r2, r3]
 8003d70:	000a      	movs	r2, r1
 8003d72:	40da      	lsrs	r2, r3
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1b0>)
 8003d76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7fe f927 	bl	8001fcc <HAL_InitTick>
  
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	0018      	movs	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b004      	add	sp, #16
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40022000 	.word	0x40022000
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	00001388 	.word	0x00001388
 8003d94:	fffff8ff 	.word	0xfffff8ff
 8003d98:	0800592c 	.word	0x0800592c
 8003d9c:	20000064 	.word	0x20000064

08003da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b08f      	sub	sp, #60	; 0x3c
 8003da4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003da6:	2314      	movs	r3, #20
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	4a37      	ldr	r2, [pc, #220]	; (8003e88 <HAL_RCC_GetSysClockFreq+0xe8>)
 8003dac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003dae:	c313      	stmia	r3!, {r0, r1, r4}
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003db4:	1d3b      	adds	r3, r7, #4
 8003db6:	4a35      	ldr	r2, [pc, #212]	; (8003e8c <HAL_RCC_GetSysClockFreq+0xec>)
 8003db8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003dba:	c313      	stmia	r3!, {r0, r1, r4}
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc8:	2300      	movs	r3, #0
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
 8003dcc:	2300      	movs	r3, #0
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003dd4:	4b2e      	ldr	r3, [pc, #184]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	220c      	movs	r2, #12
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d006      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x52>
 8003de4:	2b0c      	cmp	r3, #12
 8003de6:	d043      	beq.n	8003e70 <HAL_RCC_GetSysClockFreq+0xd0>
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d144      	bne.n	8003e76 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dec:	4b29      	ldr	r3, [pc, #164]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003dee:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003df0:	e044      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df4:	0c9b      	lsrs	r3, r3, #18
 8003df6:	220f      	movs	r2, #15
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2214      	movs	r2, #20
 8003dfc:	18ba      	adds	r2, r7, r2
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <HAL_RCC_GetSysClockFreq+0xf0>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	220f      	movs	r2, #15
 8003e08:	4013      	ands	r3, r2
 8003e0a:	1d3a      	adds	r2, r7, #4
 8003e0c:	5cd3      	ldrb	r3, [r2, r3]
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e12:	23c0      	movs	r3, #192	; 0xc0
 8003e14:	025b      	lsls	r3, r3, #9
 8003e16:	401a      	ands	r2, r3
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	025b      	lsls	r3, r3, #9
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d109      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e22:	481c      	ldr	r0, [pc, #112]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e24:	f7fc f978 	bl	8000118 <__udivsi3>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	001a      	movs	r2, r3
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	4353      	muls	r3, r2
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
 8003e32:	e01a      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e36:	23c0      	movs	r3, #192	; 0xc0
 8003e38:	025b      	lsls	r3, r3, #9
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	23c0      	movs	r3, #192	; 0xc0
 8003e3e:	025b      	lsls	r3, r3, #9
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d109      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e46:	4814      	ldr	r0, [pc, #80]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e48:	f7fc f966 	bl	8000118 <__udivsi3>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	001a      	movs	r2, r3
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	4353      	muls	r3, r2
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e5a:	480e      	ldr	r0, [pc, #56]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e5c:	f7fc f95c 	bl	8000118 <__udivsi3>
 8003e60:	0003      	movs	r3, r0
 8003e62:	001a      	movs	r2, r3
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	4353      	muls	r3, r2
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e6e:	e005      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e72:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e74:	e002      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003e7a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b00f      	add	sp, #60	; 0x3c
 8003e84:	bd90      	pop	{r4, r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	080058f4 	.word	0x080058f4
 8003e8c:	08005904 	.word	0x08005904
 8003e90:	40021000 	.word	0x40021000
 8003e94:	007a1200 	.word	0x007a1200
 8003e98:	02dc6c00 	.word	0x02dc6c00

08003e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e042      	b.n	8003f34 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223d      	movs	r2, #61	; 0x3d
 8003eb2:	5c9b      	ldrb	r3, [r3, r2]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d107      	bne.n	8003eca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	223c      	movs	r2, #60	; 0x3c
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7fd fd8f 	bl	80019e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	223d      	movs	r2, #61	; 0x3d
 8003ece:	2102      	movs	r1, #2
 8003ed0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	0019      	movs	r1, r3
 8003edc:	0010      	movs	r0, r2
 8003ede:	f000 fca3 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2246      	movs	r2, #70	; 0x46
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	223e      	movs	r2, #62	; 0x3e
 8003eee:	2101      	movs	r1, #1
 8003ef0:	5499      	strb	r1, [r3, r2]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	223f      	movs	r2, #63	; 0x3f
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	5499      	strb	r1, [r3, r2]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2240      	movs	r2, #64	; 0x40
 8003efe:	2101      	movs	r1, #1
 8003f00:	5499      	strb	r1, [r3, r2]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2241      	movs	r2, #65	; 0x41
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2242      	movs	r2, #66	; 0x42
 8003f0e:	2101      	movs	r1, #1
 8003f10:	5499      	strb	r1, [r3, r2]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2243      	movs	r2, #67	; 0x43
 8003f16:	2101      	movs	r1, #1
 8003f18:	5499      	strb	r1, [r3, r2]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2244      	movs	r2, #68	; 0x44
 8003f1e:	2101      	movs	r1, #1
 8003f20:	5499      	strb	r1, [r3, r2]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2245      	movs	r2, #69	; 0x45
 8003f26:	2101      	movs	r1, #1
 8003f28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	223d      	movs	r2, #61	; 0x3d
 8003f2e:	2101      	movs	r1, #1
 8003f30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	223d      	movs	r2, #61	; 0x3d
 8003f48:	5c9b      	ldrb	r3, [r3, r2]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d001      	beq.n	8003f54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e033      	b.n	8003fbc <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	223d      	movs	r2, #61	; 0x3d
 8003f58:	2102      	movs	r1, #2
 8003f5a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <HAL_TIM_Base_Start+0x88>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00f      	beq.n	8003f86 <HAL_TIM_Base_Start+0x4a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	05db      	lsls	r3, r3, #23
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d009      	beq.n	8003f86 <HAL_TIM_Base_Start+0x4a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <HAL_TIM_Base_Start+0x8c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_TIM_Base_Start+0x4a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <HAL_TIM_Base_Start+0x90>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d111      	bne.n	8003faa <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	4013      	ands	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2b06      	cmp	r3, #6
 8003f96:	d010      	beq.n	8003fba <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa8:	e007      	b.n	8003fba <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b004      	add	sp, #16
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40014000 	.word	0x40014000

08003fd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	223d      	movs	r2, #61	; 0x3d
 8003fdc:	5c9b      	ldrb	r3, [r3, r2]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d001      	beq.n	8003fe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e03b      	b.n	8004060 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	223d      	movs	r2, #61	; 0x3d
 8003fec:	2102      	movs	r1, #2
 8003fee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a18      	ldr	r2, [pc, #96]	; (8004068 <HAL_TIM_Base_Start_IT+0x98>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00f      	beq.n	800402a <HAL_TIM_Base_Start_IT+0x5a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	05db      	lsls	r3, r3, #23
 8004012:	429a      	cmp	r2, r3
 8004014:	d009      	beq.n	800402a <HAL_TIM_Base_Start_IT+0x5a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_TIM_Base_Start_IT+0x9c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_TIM_Base_Start_IT+0x5a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a12      	ldr	r2, [pc, #72]	; (8004070 <HAL_TIM_Base_Start_IT+0xa0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d111      	bne.n	800404e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2207      	movs	r2, #7
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b06      	cmp	r3, #6
 800403a:	d010      	beq.n	800405e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2101      	movs	r1, #1
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404c:	e007      	b.n	800405e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2101      	movs	r1, #1
 800405a:	430a      	orrs	r2, r1
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b004      	add	sp, #16
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40000400 	.word	0x40000400
 8004070:	40014000 	.word	0x40014000

08004074 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e042      	b.n	800410c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	223d      	movs	r2, #61	; 0x3d
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	223c      	movs	r2, #60	; 0x3c
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0018      	movs	r0, r3
 800409e:	f7fd fc5f 	bl	8001960 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	223d      	movs	r2, #61	; 0x3d
 80040a6:	2102      	movs	r1, #2
 80040a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3304      	adds	r3, #4
 80040b2:	0019      	movs	r1, r3
 80040b4:	0010      	movs	r0, r2
 80040b6:	f000 fbb7 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2246      	movs	r2, #70	; 0x46
 80040be:	2101      	movs	r1, #1
 80040c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223e      	movs	r2, #62	; 0x3e
 80040c6:	2101      	movs	r1, #1
 80040c8:	5499      	strb	r1, [r3, r2]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	223f      	movs	r2, #63	; 0x3f
 80040ce:	2101      	movs	r1, #1
 80040d0:	5499      	strb	r1, [r3, r2]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2240      	movs	r2, #64	; 0x40
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2241      	movs	r2, #65	; 0x41
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2242      	movs	r2, #66	; 0x42
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2243      	movs	r2, #67	; 0x43
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2244      	movs	r2, #68	; 0x44
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2245      	movs	r2, #69	; 0x45
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	223d      	movs	r2, #61	; 0x3d
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e042      	b.n	80041ac <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	223d      	movs	r2, #61	; 0x3d
 800412a:	5c9b      	ldrb	r3, [r3, r2]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d107      	bne.n	8004142 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	223c      	movs	r2, #60	; 0x3c
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	0018      	movs	r0, r3
 800413e:	f000 f839 	bl	80041b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	223d      	movs	r2, #61	; 0x3d
 8004146:	2102      	movs	r1, #2
 8004148:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	0019      	movs	r1, r3
 8004154:	0010      	movs	r0, r2
 8004156:	f000 fb67 	bl	8004828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2246      	movs	r2, #70	; 0x46
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	223e      	movs	r2, #62	; 0x3e
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	223f      	movs	r2, #63	; 0x3f
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2240      	movs	r2, #64	; 0x40
 8004176:	2101      	movs	r1, #1
 8004178:	5499      	strb	r1, [r3, r2]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2241      	movs	r2, #65	; 0x41
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2242      	movs	r2, #66	; 0x42
 8004186:	2101      	movs	r1, #1
 8004188:	5499      	strb	r1, [r3, r2]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2243      	movs	r2, #67	; 0x43
 800418e:	2101      	movs	r1, #1
 8004190:	5499      	strb	r1, [r3, r2]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2244      	movs	r2, #68	; 0x44
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2245      	movs	r2, #69	; 0x45
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	223d      	movs	r2, #61	; 0x3d
 80041a6:	2101      	movs	r1, #1
 80041a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	0018      	movs	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	b002      	add	sp, #8
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	2202      	movs	r2, #2
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d124      	bne.n	8004224 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2202      	movs	r2, #2
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d11d      	bne.n	8004224 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2203      	movs	r2, #3
 80041ee:	4252      	negs	r2, r2
 80041f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2203      	movs	r2, #3
 8004200:	4013      	ands	r3, r2
 8004202:	d004      	beq.n	800420e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	0018      	movs	r0, r3
 8004208:	f000 faf6 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 800420c:	e007      	b.n	800421e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	0018      	movs	r0, r3
 8004212:	f7fc faa9 	bl	8000768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 faf5 	bl	8004808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2204      	movs	r2, #4
 800422c:	4013      	ands	r3, r2
 800422e:	2b04      	cmp	r3, #4
 8004230:	d125      	bne.n	800427e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	2204      	movs	r2, #4
 800423a:	4013      	ands	r3, r2
 800423c:	2b04      	cmp	r3, #4
 800423e:	d11e      	bne.n	800427e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2205      	movs	r2, #5
 8004246:	4252      	negs	r2, r2
 8004248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	23c0      	movs	r3, #192	; 0xc0
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4013      	ands	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f000 fac9 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 8004266:	e007      	b.n	8004278 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	0018      	movs	r0, r3
 800426c:	f7fc fa7c 	bl	8000768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0018      	movs	r0, r3
 8004274:	f000 fac8 	bl	8004808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	2208      	movs	r2, #8
 8004286:	4013      	ands	r3, r2
 8004288:	2b08      	cmp	r3, #8
 800428a:	d124      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2208      	movs	r2, #8
 8004294:	4013      	ands	r3, r2
 8004296:	2b08      	cmp	r3, #8
 8004298:	d11d      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2209      	movs	r2, #9
 80042a0:	4252      	negs	r2, r2
 80042a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2204      	movs	r2, #4
 80042a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	2203      	movs	r2, #3
 80042b2:	4013      	ands	r3, r2
 80042b4:	d004      	beq.n	80042c0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 fa9d 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 80042be:	e007      	b.n	80042d0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7fc fa50 	bl	8000768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0018      	movs	r0, r3
 80042cc:	f000 fa9c 	bl	8004808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2210      	movs	r2, #16
 80042de:	4013      	ands	r3, r2
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d125      	bne.n	8004330 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2210      	movs	r2, #16
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d11e      	bne.n	8004330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2211      	movs	r2, #17
 80042f8:	4252      	negs	r2, r2
 80042fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2208      	movs	r2, #8
 8004300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	23c0      	movs	r3, #192	; 0xc0
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4013      	ands	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	0018      	movs	r0, r3
 8004314:	f000 fa70 	bl	80047f8 <HAL_TIM_IC_CaptureCallback>
 8004318:	e007      	b.n	800432a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f7fc fa23 	bl	8000768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f000 fa6f 	bl	8004808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2201      	movs	r2, #1
 8004338:	4013      	ands	r3, r2
 800433a:	2b01      	cmp	r3, #1
 800433c:	d10f      	bne.n	800435e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	4013      	ands	r3, r2
 8004348:	2b01      	cmp	r3, #1
 800434a:	d108      	bne.n	800435e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2202      	movs	r2, #2
 8004352:	4252      	negs	r2, r2
 8004354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0018      	movs	r0, r3
 800435a:	f7fd fa39 	bl	80017d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2280      	movs	r2, #128	; 0x80
 8004366:	4013      	ands	r3, r2
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d10f      	bne.n	800438c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2280      	movs	r2, #128	; 0x80
 8004374:	4013      	ands	r3, r2
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d108      	bne.n	800438c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2281      	movs	r2, #129	; 0x81
 8004380:	4252      	negs	r2, r2
 8004382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	0018      	movs	r0, r3
 8004388:	f000 fd6c 	bl	8004e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2240      	movs	r2, #64	; 0x40
 8004394:	4013      	ands	r3, r2
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d10f      	bne.n	80043ba <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	2240      	movs	r2, #64	; 0x40
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b40      	cmp	r3, #64	; 0x40
 80043a6:	d108      	bne.n	80043ba <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2241      	movs	r2, #65	; 0x41
 80043ae:	4252      	negs	r2, r2
 80043b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 fa2f 	bl	8004818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2220      	movs	r2, #32
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d10f      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d108      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2221      	movs	r2, #33	; 0x21
 80043dc:	4252      	negs	r2, r2
 80043de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f000 fd36 	bl	8004e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043fc:	2317      	movs	r3, #23
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	223c      	movs	r2, #60	; 0x3c
 8004408:	5c9b      	ldrb	r3, [r3, r2]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_TIM_OC_ConfigChannel+0x22>
 800440e:	2302      	movs	r3, #2
 8004410:	e03b      	b.n	800448a <HAL_TIM_OC_ConfigChannel+0x9a>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	223c      	movs	r2, #60	; 0x3c
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b04      	cmp	r3, #4
 800441e:	d010      	beq.n	8004442 <HAL_TIM_OC_ConfigChannel+0x52>
 8004420:	d802      	bhi.n	8004428 <HAL_TIM_OC_ConfigChannel+0x38>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_TIM_OC_ConfigChannel+0x42>
 8004426:	e024      	b.n	8004472 <HAL_TIM_OC_ConfigChannel+0x82>
 8004428:	2b08      	cmp	r3, #8
 800442a:	d012      	beq.n	8004452 <HAL_TIM_OC_ConfigChannel+0x62>
 800442c:	2b0c      	cmp	r3, #12
 800442e:	d018      	beq.n	8004462 <HAL_TIM_OC_ConfigChannel+0x72>
 8004430:	e01f      	b.n	8004472 <HAL_TIM_OC_ConfigChannel+0x82>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	0011      	movs	r1, r2
 800443a:	0018      	movs	r0, r3
 800443c:	f000 fa74 	bl	8004928 <TIM_OC1_SetConfig>
      break;
 8004440:	e01c      	b.n	800447c <HAL_TIM_OC_ConfigChannel+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	0011      	movs	r1, r2
 800444a:	0018      	movs	r0, r3
 800444c:	f000 faf4 	bl	8004a38 <TIM_OC2_SetConfig>
      break;
 8004450:	e014      	b.n	800447c <HAL_TIM_OC_ConfigChannel+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	0011      	movs	r1, r2
 800445a:	0018      	movs	r0, r3
 800445c:	f000 fb70 	bl	8004b40 <TIM_OC3_SetConfig>
      break;
 8004460:	e00c      	b.n	800447c <HAL_TIM_OC_ConfigChannel+0x8c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	0011      	movs	r1, r2
 800446a:	0018      	movs	r0, r3
 800446c:	f000 fbee 	bl	8004c4c <TIM_OC4_SetConfig>
      break;
 8004470:	e004      	b.n	800447c <HAL_TIM_OC_ConfigChannel+0x8c>
    }

    default:
      status = HAL_ERROR;
 8004472:	2317      	movs	r3, #23
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	2201      	movs	r2, #1
 8004478:	701a      	strb	r2, [r3, #0]
      break;
 800447a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	223c      	movs	r2, #60	; 0x3c
 8004480:	2100      	movs	r1, #0
 8004482:	5499      	strb	r1, [r3, r2]

  return status;
 8004484:	2317      	movs	r3, #23
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	781b      	ldrb	r3, [r3, #0]
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b006      	add	sp, #24
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a0:	2317      	movs	r3, #23
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	223c      	movs	r2, #60	; 0x3c
 80044ac:	5c9b      	ldrb	r3, [r3, r2]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e0a3      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x16a>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	223c      	movs	r2, #60	; 0x3c
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d029      	beq.n	8004518 <HAL_TIM_PWM_ConfigChannel+0x84>
 80044c4:	d802      	bhi.n	80044cc <HAL_TIM_PWM_ConfigChannel+0x38>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d005      	beq.n	80044d6 <HAL_TIM_PWM_ConfigChannel+0x42>
 80044ca:	e08c      	b.n	80045e6 <HAL_TIM_PWM_ConfigChannel+0x152>
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d046      	beq.n	800455e <HAL_TIM_PWM_ConfigChannel+0xca>
 80044d0:	2b0c      	cmp	r3, #12
 80044d2:	d065      	beq.n	80045a0 <HAL_TIM_PWM_ConfigChannel+0x10c>
 80044d4:	e087      	b.n	80045e6 <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	0011      	movs	r1, r2
 80044de:	0018      	movs	r0, r3
 80044e0:	f000 fa22 	bl	8004928 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2108      	movs	r1, #8
 80044f0:	430a      	orrs	r2, r1
 80044f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2104      	movs	r1, #4
 8004500:	438a      	bics	r2, r1
 8004502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6999      	ldr	r1, [r3, #24]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	619a      	str	r2, [r3, #24]
      break;
 8004516:	e06b      	b.n	80045f0 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	0011      	movs	r1, r2
 8004520:	0018      	movs	r0, r3
 8004522:	f000 fa89 	bl	8004a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699a      	ldr	r2, [r3, #24]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2180      	movs	r1, #128	; 0x80
 8004532:	0109      	lsls	r1, r1, #4
 8004534:	430a      	orrs	r2, r1
 8004536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4931      	ldr	r1, [pc, #196]	; (8004608 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8004544:	400a      	ands	r2, r1
 8004546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	619a      	str	r2, [r3, #24]
      break;
 800455c:	e048      	b.n	80045f0 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	0011      	movs	r1, r2
 8004566:	0018      	movs	r0, r3
 8004568:	f000 faea 	bl	8004b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2108      	movs	r1, #8
 8004578:	430a      	orrs	r2, r1
 800457a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2104      	movs	r1, #4
 8004588:	438a      	bics	r2, r1
 800458a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69d9      	ldr	r1, [r3, #28]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	61da      	str	r2, [r3, #28]
      break;
 800459e:	e027      	b.n	80045f0 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	0011      	movs	r1, r2
 80045a8:	0018      	movs	r0, r3
 80045aa:	f000 fb4f 	bl	8004c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69da      	ldr	r2, [r3, #28]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2180      	movs	r1, #128	; 0x80
 80045ba:	0109      	lsls	r1, r1, #4
 80045bc:	430a      	orrs	r2, r1
 80045be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69da      	ldr	r2, [r3, #28]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	490f      	ldr	r1, [pc, #60]	; (8004608 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80045cc:	400a      	ands	r2, r1
 80045ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69d9      	ldr	r1, [r3, #28]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	021a      	lsls	r2, r3, #8
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	61da      	str	r2, [r3, #28]
      break;
 80045e4:	e004      	b.n	80045f0 <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 80045e6:	2317      	movs	r3, #23
 80045e8:	18fb      	adds	r3, r7, r3
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
      break;
 80045ee:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	223c      	movs	r2, #60	; 0x3c
 80045f4:	2100      	movs	r1, #0
 80045f6:	5499      	strb	r1, [r3, r2]

  return status;
 80045f8:	2317      	movs	r3, #23
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	781b      	ldrb	r3, [r3, #0]
}
 80045fe:	0018      	movs	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	b006      	add	sp, #24
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	fffffbff 	.word	0xfffffbff

0800460c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	230f      	movs	r3, #15
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	223c      	movs	r2, #60	; 0x3c
 8004622:	5c9b      	ldrb	r3, [r3, r2]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_TIM_ConfigClockSource+0x20>
 8004628:	2302      	movs	r3, #2
 800462a:	e0b2      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x186>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	223c      	movs	r2, #60	; 0x3c
 8004630:	2101      	movs	r1, #1
 8004632:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	223d      	movs	r2, #61	; 0x3d
 8004638:	2102      	movs	r1, #2
 800463a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2277      	movs	r2, #119	; 0x77
 8004648:	4393      	bics	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4a53      	ldr	r2, [pc, #332]	; (800479c <HAL_TIM_ConfigClockSource+0x190>)
 8004650:	4013      	ands	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d100      	bne.n	8004666 <HAL_TIM_ConfigClockSource+0x5a>
 8004664:	e06b      	b.n	800473e <HAL_TIM_ConfigClockSource+0x132>
 8004666:	d80e      	bhi.n	8004686 <HAL_TIM_ConfigClockSource+0x7a>
 8004668:	2b10      	cmp	r3, #16
 800466a:	d100      	bne.n	800466e <HAL_TIM_ConfigClockSource+0x62>
 800466c:	e077      	b.n	800475e <HAL_TIM_ConfigClockSource+0x152>
 800466e:	d803      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x6c>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d100      	bne.n	8004676 <HAL_TIM_ConfigClockSource+0x6a>
 8004674:	e073      	b.n	800475e <HAL_TIM_ConfigClockSource+0x152>
 8004676:	e07b      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x164>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d100      	bne.n	800467e <HAL_TIM_ConfigClockSource+0x72>
 800467c:	e06f      	b.n	800475e <HAL_TIM_ConfigClockSource+0x152>
 800467e:	2b30      	cmp	r3, #48	; 0x30
 8004680:	d100      	bne.n	8004684 <HAL_TIM_ConfigClockSource+0x78>
 8004682:	e06c      	b.n	800475e <HAL_TIM_ConfigClockSource+0x152>
 8004684:	e074      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x164>
 8004686:	2b70      	cmp	r3, #112	; 0x70
 8004688:	d00e      	beq.n	80046a8 <HAL_TIM_ConfigClockSource+0x9c>
 800468a:	d804      	bhi.n	8004696 <HAL_TIM_ConfigClockSource+0x8a>
 800468c:	2b50      	cmp	r3, #80	; 0x50
 800468e:	d036      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xf2>
 8004690:	2b60      	cmp	r3, #96	; 0x60
 8004692:	d044      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x112>
 8004694:	e06c      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x164>
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	0152      	lsls	r2, r2, #5
 800469a:	4293      	cmp	r3, r2
 800469c:	d06d      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x16e>
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	0192      	lsls	r2, r2, #6
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d017      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0xca>
 80046a6:	e063      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	6899      	ldr	r1, [r3, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f000 fbac 	bl	8004e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2277      	movs	r2, #119	; 0x77
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	609a      	str	r2, [r3, #8]
      break;
 80046d4:	e052      	b.n	800477c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6899      	ldr	r1, [r3, #8]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f000 fb95 	bl	8004e14 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2180      	movs	r1, #128	; 0x80
 80046f6:	01c9      	lsls	r1, r1, #7
 80046f8:	430a      	orrs	r2, r1
 80046fa:	609a      	str	r2, [r3, #8]
      break;
 80046fc:	e03e      	b.n	800477c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	001a      	movs	r2, r3
 800470c:	f000 fb08 	bl	8004d20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2150      	movs	r1, #80	; 0x50
 8004716:	0018      	movs	r0, r3
 8004718:	f000 fb62 	bl	8004de0 <TIM_ITRx_SetConfig>
      break;
 800471c:	e02e      	b.n	800477c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	001a      	movs	r2, r3
 800472c:	f000 fb26 	bl	8004d7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2160      	movs	r1, #96	; 0x60
 8004736:	0018      	movs	r0, r3
 8004738:	f000 fb52 	bl	8004de0 <TIM_ITRx_SetConfig>
      break;
 800473c:	e01e      	b.n	800477c <HAL_TIM_ConfigClockSource+0x170>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	001a      	movs	r2, r3
 800474c:	f000 fae8 	bl	8004d20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2140      	movs	r1, #64	; 0x40
 8004756:	0018      	movs	r0, r3
 8004758:	f000 fb42 	bl	8004de0 <TIM_ITRx_SetConfig>
      break;
 800475c:	e00e      	b.n	800477c <HAL_TIM_ConfigClockSource+0x170>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	0019      	movs	r1, r3
 8004768:	0010      	movs	r0, r2
 800476a:	f000 fb39 	bl	8004de0 <TIM_ITRx_SetConfig>
      break;
 800476e:	e005      	b.n	800477c <HAL_TIM_ConfigClockSource+0x170>
    }

    default:
      status = HAL_ERROR;
 8004770:	230f      	movs	r3, #15
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
      break;
 8004778:	e000      	b.n	800477c <HAL_TIM_ConfigClockSource+0x170>
      break;
 800477a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	223d      	movs	r2, #61	; 0x3d
 8004780:	2101      	movs	r1, #1
 8004782:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	223c      	movs	r2, #60	; 0x3c
 8004788:	2100      	movs	r1, #0
 800478a:	5499      	strb	r1, [r3, r2]

  return status;
 800478c:	230f      	movs	r3, #15
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	781b      	ldrb	r3, [r3, #0]
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b004      	add	sp, #16
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	ffff00ff 	.word	0xffff00ff

080047a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d00d      	beq.n	80047d0 <HAL_TIM_ReadCapturedValue+0x30>
 80047b4:	d802      	bhi.n	80047bc <HAL_TIM_ReadCapturedValue+0x1c>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <HAL_TIM_ReadCapturedValue+0x26>

      break;
    }

    default:
      break;
 80047ba:	e018      	b.n	80047ee <HAL_TIM_ReadCapturedValue+0x4e>
  switch (Channel)
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d00c      	beq.n	80047da <HAL_TIM_ReadCapturedValue+0x3a>
 80047c0:	2b0c      	cmp	r3, #12
 80047c2:	d00f      	beq.n	80047e4 <HAL_TIM_ReadCapturedValue+0x44>
      break;
 80047c4:	e013      	b.n	80047ee <HAL_TIM_ReadCapturedValue+0x4e>
      tmpreg =  htim->Instance->CCR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	60fb      	str	r3, [r7, #12]
      break;
 80047ce:	e00e      	b.n	80047ee <HAL_TIM_ReadCapturedValue+0x4e>
      tmpreg =   htim->Instance->CCR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	60fb      	str	r3, [r7, #12]
      break;
 80047d8:	e009      	b.n	80047ee <HAL_TIM_ReadCapturedValue+0x4e>
      tmpreg =   htim->Instance->CCR3;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	60fb      	str	r3, [r7, #12]
      break;
 80047e2:	e004      	b.n	80047ee <HAL_TIM_ReadCapturedValue+0x4e>
      tmpreg =   htim->Instance->CCR4;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	60fb      	str	r3, [r7, #12]
      break;
 80047ec:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80047ee:	68fb      	ldr	r3, [r7, #12]
}
 80047f0:	0018      	movs	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	b004      	add	sp, #16
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b002      	add	sp, #8
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004810:	46c0      	nop			; (mov r8, r8)
 8004812:	46bd      	mov	sp, r7
 8004814:	b002      	add	sp, #8
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004820:	46c0      	nop			; (mov r8, r8)
 8004822:	46bd      	mov	sp, r7
 8004824:	b002      	add	sp, #8
 8004826:	bd80      	pop	{r7, pc}

08004828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a34      	ldr	r2, [pc, #208]	; (800490c <TIM_Base_SetConfig+0xe4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d008      	beq.n	8004852 <TIM_Base_SetConfig+0x2a>
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	05db      	lsls	r3, r3, #23
 8004846:	429a      	cmp	r2, r3
 8004848:	d003      	beq.n	8004852 <TIM_Base_SetConfig+0x2a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a30      	ldr	r2, [pc, #192]	; (8004910 <TIM_Base_SetConfig+0xe8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d108      	bne.n	8004864 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2270      	movs	r2, #112	; 0x70
 8004856:	4393      	bics	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4313      	orrs	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a29      	ldr	r2, [pc, #164]	; (800490c <TIM_Base_SetConfig+0xe4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d018      	beq.n	800489e <TIM_Base_SetConfig+0x76>
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	05db      	lsls	r3, r3, #23
 8004872:	429a      	cmp	r2, r3
 8004874:	d013      	beq.n	800489e <TIM_Base_SetConfig+0x76>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a25      	ldr	r2, [pc, #148]	; (8004910 <TIM_Base_SetConfig+0xe8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00f      	beq.n	800489e <TIM_Base_SetConfig+0x76>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a24      	ldr	r2, [pc, #144]	; (8004914 <TIM_Base_SetConfig+0xec>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00b      	beq.n	800489e <TIM_Base_SetConfig+0x76>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a23      	ldr	r2, [pc, #140]	; (8004918 <TIM_Base_SetConfig+0xf0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <TIM_Base_SetConfig+0x76>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a22      	ldr	r2, [pc, #136]	; (800491c <TIM_Base_SetConfig+0xf4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d003      	beq.n	800489e <TIM_Base_SetConfig+0x76>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a21      	ldr	r2, [pc, #132]	; (8004920 <TIM_Base_SetConfig+0xf8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d108      	bne.n	80048b0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4a20      	ldr	r2, [pc, #128]	; (8004924 <TIM_Base_SetConfig+0xfc>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2280      	movs	r2, #128	; 0x80
 80048b4:	4393      	bics	r3, r2
 80048b6:	001a      	movs	r2, r3
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a0c      	ldr	r2, [pc, #48]	; (800490c <TIM_Base_SetConfig+0xe4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00b      	beq.n	80048f6 <TIM_Base_SetConfig+0xce>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <TIM_Base_SetConfig+0xf0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d007      	beq.n	80048f6 <TIM_Base_SetConfig+0xce>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a0c      	ldr	r2, [pc, #48]	; (800491c <TIM_Base_SetConfig+0xf4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d003      	beq.n	80048f6 <TIM_Base_SetConfig+0xce>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <TIM_Base_SetConfig+0xf8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d103      	bne.n	80048fe <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	691a      	ldr	r2, [r3, #16]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	615a      	str	r2, [r3, #20]
}
 8004904:	46c0      	nop			; (mov r8, r8)
 8004906:	46bd      	mov	sp, r7
 8004908:	b004      	add	sp, #16
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40000400 	.word	0x40000400
 8004914:	40002000 	.word	0x40002000
 8004918:	40014000 	.word	0x40014000
 800491c:	40014400 	.word	0x40014400
 8004920:	40014800 	.word	0x40014800
 8004924:	fffffcff 	.word	0xfffffcff

08004928 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	2201      	movs	r2, #1
 8004938:	4393      	bics	r3, r2
 800493a:	001a      	movs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2270      	movs	r2, #112	; 0x70
 8004956:	4393      	bics	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2203      	movs	r2, #3
 800495e:	4393      	bics	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2202      	movs	r2, #2
 8004970:	4393      	bics	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	4313      	orrs	r3, r2
 800497c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a27      	ldr	r2, [pc, #156]	; (8004a20 <TIM_OC1_SetConfig+0xf8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00b      	beq.n	800499e <TIM_OC1_SetConfig+0x76>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <TIM_OC1_SetConfig+0xfc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d007      	beq.n	800499e <TIM_OC1_SetConfig+0x76>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a25      	ldr	r2, [pc, #148]	; (8004a28 <TIM_OC1_SetConfig+0x100>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d003      	beq.n	800499e <TIM_OC1_SetConfig+0x76>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a24      	ldr	r2, [pc, #144]	; (8004a2c <TIM_OC1_SetConfig+0x104>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d10c      	bne.n	80049b8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2208      	movs	r2, #8
 80049a2:	4393      	bics	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2204      	movs	r2, #4
 80049b4:	4393      	bics	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <TIM_OC1_SetConfig+0xf8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00b      	beq.n	80049d8 <TIM_OC1_SetConfig+0xb0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <TIM_OC1_SetConfig+0xfc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d007      	beq.n	80049d8 <TIM_OC1_SetConfig+0xb0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <TIM_OC1_SetConfig+0x100>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d003      	beq.n	80049d8 <TIM_OC1_SetConfig+0xb0>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <TIM_OC1_SetConfig+0x104>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d111      	bne.n	80049fc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <TIM_OC1_SetConfig+0x108>)
 80049dc:	4013      	ands	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <TIM_OC1_SetConfig+0x10c>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b006      	add	sp, #24
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800
 8004a30:	fffffeff 	.word	0xfffffeff
 8004a34:	fffffdff 	.word	0xfffffdff

08004a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	2210      	movs	r2, #16
 8004a48:	4393      	bics	r3, r2
 8004a4a:	001a      	movs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4a2e      	ldr	r2, [pc, #184]	; (8004b20 <TIM_OC2_SetConfig+0xe8>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4a2d      	ldr	r2, [pc, #180]	; (8004b24 <TIM_OC2_SetConfig+0xec>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	2220      	movs	r2, #32
 8004a82:	4393      	bics	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a24      	ldr	r2, [pc, #144]	; (8004b28 <TIM_OC2_SetConfig+0xf0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10d      	bne.n	8004ab6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2280      	movs	r2, #128	; 0x80
 8004a9e:	4393      	bics	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2240      	movs	r2, #64	; 0x40
 8004ab2:	4393      	bics	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <TIM_OC2_SetConfig+0xf0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00b      	beq.n	8004ad6 <TIM_OC2_SetConfig+0x9e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a1a      	ldr	r2, [pc, #104]	; (8004b2c <TIM_OC2_SetConfig+0xf4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d007      	beq.n	8004ad6 <TIM_OC2_SetConfig+0x9e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a19      	ldr	r2, [pc, #100]	; (8004b30 <TIM_OC2_SetConfig+0xf8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d003      	beq.n	8004ad6 <TIM_OC2_SetConfig+0x9e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <TIM_OC2_SetConfig+0xfc>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d113      	bne.n	8004afe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <TIM_OC2_SetConfig+0x100>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <TIM_OC2_SetConfig+0x104>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	621a      	str	r2, [r3, #32]
}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b006      	add	sp, #24
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	ffff8fff 	.word	0xffff8fff
 8004b24:	fffffcff 	.word	0xfffffcff
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40014400 	.word	0x40014400
 8004b34:	40014800 	.word	0x40014800
 8004b38:	fffffbff 	.word	0xfffffbff
 8004b3c:	fffff7ff 	.word	0xfffff7ff

08004b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	4a35      	ldr	r2, [pc, #212]	; (8004c24 <TIM_OC3_SetConfig+0xe4>)
 8004b50:	401a      	ands	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2270      	movs	r2, #112	; 0x70
 8004b6c:	4393      	bics	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2203      	movs	r2, #3
 8004b74:	4393      	bics	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	4a28      	ldr	r2, [pc, #160]	; (8004c28 <TIM_OC3_SetConfig+0xe8>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a24      	ldr	r2, [pc, #144]	; (8004c2c <TIM_OC3_SetConfig+0xec>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d10d      	bne.n	8004bba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	4a23      	ldr	r2, [pc, #140]	; (8004c30 <TIM_OC3_SetConfig+0xf0>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	697a      	ldr	r2, [r7, #20]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <TIM_OC3_SetConfig+0xf4>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <TIM_OC3_SetConfig+0xec>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00b      	beq.n	8004bda <TIM_OC3_SetConfig+0x9a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <TIM_OC3_SetConfig+0xf8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d007      	beq.n	8004bda <TIM_OC3_SetConfig+0x9a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <TIM_OC3_SetConfig+0xfc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_OC3_SetConfig+0x9a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1a      	ldr	r2, [pc, #104]	; (8004c40 <TIM_OC3_SetConfig+0x100>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d113      	bne.n	8004c02 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	; (8004c44 <TIM_OC3_SetConfig+0x104>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <TIM_OC3_SetConfig+0x108>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	011b      	lsls	r3, r3, #4
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	621a      	str	r2, [r3, #32]
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b006      	add	sp, #24
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	fffffeff 	.word	0xfffffeff
 8004c28:	fffffdff 	.word	0xfffffdff
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	fffff7ff 	.word	0xfffff7ff
 8004c34:	fffffbff 	.word	0xfffffbff
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800
 8004c44:	ffffefff 	.word	0xffffefff
 8004c48:	ffffdfff 	.word	0xffffdfff

08004c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	4a28      	ldr	r2, [pc, #160]	; (8004cfc <TIM_OC4_SetConfig+0xb0>)
 8004c5c:	401a      	ands	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4a22      	ldr	r2, [pc, #136]	; (8004d00 <TIM_OC4_SetConfig+0xb4>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4a21      	ldr	r2, [pc, #132]	; (8004d04 <TIM_OC4_SetConfig+0xb8>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	021b      	lsls	r3, r3, #8
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <TIM_OC4_SetConfig+0xbc>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	031b      	lsls	r3, r3, #12
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a19      	ldr	r2, [pc, #100]	; (8004d0c <TIM_OC4_SetConfig+0xc0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <TIM_OC4_SetConfig+0x78>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a18      	ldr	r2, [pc, #96]	; (8004d10 <TIM_OC4_SetConfig+0xc4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_OC4_SetConfig+0x78>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <TIM_OC4_SetConfig+0xc8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <TIM_OC4_SetConfig+0x78>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a16      	ldr	r2, [pc, #88]	; (8004d18 <TIM_OC4_SetConfig+0xcc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d109      	bne.n	8004cd8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <TIM_OC4_SetConfig+0xd0>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	621a      	str	r2, [r3, #32]
}
 8004cf2:	46c0      	nop			; (mov r8, r8)
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	b006      	add	sp, #24
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	ffffefff 	.word	0xffffefff
 8004d00:	ffff8fff 	.word	0xffff8fff
 8004d04:	fffffcff 	.word	0xfffffcff
 8004d08:	ffffdfff 	.word	0xffffdfff
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40014000 	.word	0x40014000
 8004d14:	40014400 	.word	0x40014400
 8004d18:	40014800 	.word	0x40014800
 8004d1c:	ffffbfff 	.word	0xffffbfff

08004d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	2201      	movs	r2, #1
 8004d38:	4393      	bics	r3, r2
 8004d3a:	001a      	movs	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	22f0      	movs	r2, #240	; 0xf0
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	220a      	movs	r2, #10
 8004d5c:	4393      	bics	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	621a      	str	r2, [r3, #32]
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b006      	add	sp, #24
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	4393      	bics	r3, r2
 8004d90:	001a      	movs	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <TIM_TI2_ConfigInputStage+0x60>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	031b      	lsls	r3, r3, #12
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	22a0      	movs	r2, #160	; 0xa0
 8004db8:	4393      	bics	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b006      	add	sp, #24
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	ffff0fff 	.word	0xffff0fff

08004de0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2270      	movs	r2, #112	; 0x70
 8004df4:	4393      	bics	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	2207      	movs	r2, #7
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	609a      	str	r2, [r3, #8]
}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b004      	add	sp, #16
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <TIM_ETR_SetConfig+0x3c>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b006      	add	sp, #24
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	ffff00ff 	.word	0xffff00ff

08004e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e5c:	46c0      	nop			; (mov r8, r8)
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e6c:	46c0      	nop			; (mov r8, r8)
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	b002      	add	sp, #8
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <__errno>:
 8004e74:	4b01      	ldr	r3, [pc, #4]	; (8004e7c <__errno+0x8>)
 8004e76:	6818      	ldr	r0, [r3, #0]
 8004e78:	4770      	bx	lr
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	20000070 	.word	0x20000070

08004e80 <__libc_init_array>:
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	2600      	movs	r6, #0
 8004e84:	4d0c      	ldr	r5, [pc, #48]	; (8004eb8 <__libc_init_array+0x38>)
 8004e86:	4c0d      	ldr	r4, [pc, #52]	; (8004ebc <__libc_init_array+0x3c>)
 8004e88:	1b64      	subs	r4, r4, r5
 8004e8a:	10a4      	asrs	r4, r4, #2
 8004e8c:	42a6      	cmp	r6, r4
 8004e8e:	d109      	bne.n	8004ea4 <__libc_init_array+0x24>
 8004e90:	2600      	movs	r6, #0
 8004e92:	f000 fc7b 	bl	800578c <_init>
 8004e96:	4d0a      	ldr	r5, [pc, #40]	; (8004ec0 <__libc_init_array+0x40>)
 8004e98:	4c0a      	ldr	r4, [pc, #40]	; (8004ec4 <__libc_init_array+0x44>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	42a6      	cmp	r6, r4
 8004ea0:	d105      	bne.n	8004eae <__libc_init_array+0x2e>
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	00b3      	lsls	r3, r6, #2
 8004ea6:	58eb      	ldr	r3, [r5, r3]
 8004ea8:	4798      	blx	r3
 8004eaa:	3601      	adds	r6, #1
 8004eac:	e7ee      	b.n	8004e8c <__libc_init_array+0xc>
 8004eae:	00b3      	lsls	r3, r6, #2
 8004eb0:	58eb      	ldr	r3, [r5, r3]
 8004eb2:	4798      	blx	r3
 8004eb4:	3601      	adds	r6, #1
 8004eb6:	e7f2      	b.n	8004e9e <__libc_init_array+0x1e>
 8004eb8:	08005970 	.word	0x08005970
 8004ebc:	08005970 	.word	0x08005970
 8004ec0:	08005970 	.word	0x08005970
 8004ec4:	08005974 	.word	0x08005974

08004ec8 <memcpy>:
 8004ec8:	2300      	movs	r3, #0
 8004eca:	b510      	push	{r4, lr}
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d100      	bne.n	8004ed2 <memcpy+0xa>
 8004ed0:	bd10      	pop	{r4, pc}
 8004ed2:	5ccc      	ldrb	r4, [r1, r3]
 8004ed4:	54c4      	strb	r4, [r0, r3]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	e7f8      	b.n	8004ecc <memcpy+0x4>

08004eda <memset>:
 8004eda:	0003      	movs	r3, r0
 8004edc:	1812      	adds	r2, r2, r0
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d100      	bne.n	8004ee4 <memset+0xa>
 8004ee2:	4770      	bx	lr
 8004ee4:	7019      	strb	r1, [r3, #0]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	e7f9      	b.n	8004ede <memset+0x4>
	...

08004eec <siprintf>:
 8004eec:	b40e      	push	{r1, r2, r3}
 8004eee:	b500      	push	{lr}
 8004ef0:	490b      	ldr	r1, [pc, #44]	; (8004f20 <siprintf+0x34>)
 8004ef2:	b09c      	sub	sp, #112	; 0x70
 8004ef4:	ab1d      	add	r3, sp, #116	; 0x74
 8004ef6:	9002      	str	r0, [sp, #8]
 8004ef8:	9006      	str	r0, [sp, #24]
 8004efa:	9107      	str	r1, [sp, #28]
 8004efc:	9104      	str	r1, [sp, #16]
 8004efe:	4809      	ldr	r0, [pc, #36]	; (8004f24 <siprintf+0x38>)
 8004f00:	4909      	ldr	r1, [pc, #36]	; (8004f28 <siprintf+0x3c>)
 8004f02:	cb04      	ldmia	r3!, {r2}
 8004f04:	9105      	str	r1, [sp, #20]
 8004f06:	6800      	ldr	r0, [r0, #0]
 8004f08:	a902      	add	r1, sp, #8
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	f000 f87e 	bl	800500c <_svfiprintf_r>
 8004f10:	2300      	movs	r3, #0
 8004f12:	9a02      	ldr	r2, [sp, #8]
 8004f14:	7013      	strb	r3, [r2, #0]
 8004f16:	b01c      	add	sp, #112	; 0x70
 8004f18:	bc08      	pop	{r3}
 8004f1a:	b003      	add	sp, #12
 8004f1c:	4718      	bx	r3
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	7fffffff 	.word	0x7fffffff
 8004f24:	20000070 	.word	0x20000070
 8004f28:	ffff0208 	.word	0xffff0208

08004f2c <strcat>:
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	b510      	push	{r4, lr}
 8004f30:	7813      	ldrb	r3, [r2, #0]
 8004f32:	1c54      	adds	r4, r2, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <strcat+0x18>
 8004f38:	5ccc      	ldrb	r4, [r1, r3]
 8004f3a:	54d4      	strb	r4, [r2, r3]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	2c00      	cmp	r4, #0
 8004f40:	d1fa      	bne.n	8004f38 <strcat+0xc>
 8004f42:	bd10      	pop	{r4, pc}
 8004f44:	0022      	movs	r2, r4
 8004f46:	e7f3      	b.n	8004f30 <strcat+0x4>

08004f48 <__ssputs_r>:
 8004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4a:	688e      	ldr	r6, [r1, #8]
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	0007      	movs	r7, r0
 8004f50:	000c      	movs	r4, r1
 8004f52:	9203      	str	r2, [sp, #12]
 8004f54:	9301      	str	r3, [sp, #4]
 8004f56:	429e      	cmp	r6, r3
 8004f58:	d83c      	bhi.n	8004fd4 <__ssputs_r+0x8c>
 8004f5a:	2390      	movs	r3, #144	; 0x90
 8004f5c:	898a      	ldrh	r2, [r1, #12]
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	421a      	tst	r2, r3
 8004f62:	d034      	beq.n	8004fce <__ssputs_r+0x86>
 8004f64:	2503      	movs	r5, #3
 8004f66:	6909      	ldr	r1, [r1, #16]
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	1a5b      	subs	r3, r3, r1
 8004f6c:	9302      	str	r3, [sp, #8]
 8004f6e:	6963      	ldr	r3, [r4, #20]
 8004f70:	9802      	ldr	r0, [sp, #8]
 8004f72:	435d      	muls	r5, r3
 8004f74:	0feb      	lsrs	r3, r5, #31
 8004f76:	195d      	adds	r5, r3, r5
 8004f78:	9b01      	ldr	r3, [sp, #4]
 8004f7a:	106d      	asrs	r5, r5, #1
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	181b      	adds	r3, r3, r0
 8004f80:	42ab      	cmp	r3, r5
 8004f82:	d900      	bls.n	8004f86 <__ssputs_r+0x3e>
 8004f84:	001d      	movs	r5, r3
 8004f86:	0553      	lsls	r3, r2, #21
 8004f88:	d532      	bpl.n	8004ff0 <__ssputs_r+0xa8>
 8004f8a:	0029      	movs	r1, r5
 8004f8c:	0038      	movs	r0, r7
 8004f8e:	f000 fb19 	bl	80055c4 <_malloc_r>
 8004f92:	1e06      	subs	r6, r0, #0
 8004f94:	d109      	bne.n	8004faa <__ssputs_r+0x62>
 8004f96:	230c      	movs	r3, #12
 8004f98:	603b      	str	r3, [r7, #0]
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	89a2      	ldrh	r2, [r4, #12]
 8004fa0:	4240      	negs	r0, r0
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	b005      	add	sp, #20
 8004fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004faa:	9a02      	ldr	r2, [sp, #8]
 8004fac:	6921      	ldr	r1, [r4, #16]
 8004fae:	f7ff ff8b 	bl	8004ec8 <memcpy>
 8004fb2:	89a3      	ldrh	r3, [r4, #12]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	; (8005008 <__ssputs_r+0xc0>)
 8004fb6:	401a      	ands	r2, r3
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	81a3      	strh	r3, [r4, #12]
 8004fbe:	9b02      	ldr	r3, [sp, #8]
 8004fc0:	6126      	str	r6, [r4, #16]
 8004fc2:	18f6      	adds	r6, r6, r3
 8004fc4:	6026      	str	r6, [r4, #0]
 8004fc6:	6165      	str	r5, [r4, #20]
 8004fc8:	9e01      	ldr	r6, [sp, #4]
 8004fca:	1aed      	subs	r5, r5, r3
 8004fcc:	60a5      	str	r5, [r4, #8]
 8004fce:	9b01      	ldr	r3, [sp, #4]
 8004fd0:	429e      	cmp	r6, r3
 8004fd2:	d900      	bls.n	8004fd6 <__ssputs_r+0x8e>
 8004fd4:	9e01      	ldr	r6, [sp, #4]
 8004fd6:	0032      	movs	r2, r6
 8004fd8:	9903      	ldr	r1, [sp, #12]
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	f000 fa95 	bl	800550a <memmove>
 8004fe0:	68a3      	ldr	r3, [r4, #8]
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	1b9b      	subs	r3, r3, r6
 8004fe6:	60a3      	str	r3, [r4, #8]
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	199e      	adds	r6, r3, r6
 8004fec:	6026      	str	r6, [r4, #0]
 8004fee:	e7da      	b.n	8004fa6 <__ssputs_r+0x5e>
 8004ff0:	002a      	movs	r2, r5
 8004ff2:	0038      	movs	r0, r7
 8004ff4:	f000 fb44 	bl	8005680 <_realloc_r>
 8004ff8:	1e06      	subs	r6, r0, #0
 8004ffa:	d1e0      	bne.n	8004fbe <__ssputs_r+0x76>
 8004ffc:	6921      	ldr	r1, [r4, #16]
 8004ffe:	0038      	movs	r0, r7
 8005000:	f000 fa96 	bl	8005530 <_free_r>
 8005004:	e7c7      	b.n	8004f96 <__ssputs_r+0x4e>
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	fffffb7f 	.word	0xfffffb7f

0800500c <_svfiprintf_r>:
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500e:	b0a1      	sub	sp, #132	; 0x84
 8005010:	9003      	str	r0, [sp, #12]
 8005012:	001d      	movs	r5, r3
 8005014:	898b      	ldrh	r3, [r1, #12]
 8005016:	000f      	movs	r7, r1
 8005018:	0016      	movs	r6, r2
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	d511      	bpl.n	8005042 <_svfiprintf_r+0x36>
 800501e:	690b      	ldr	r3, [r1, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10e      	bne.n	8005042 <_svfiprintf_r+0x36>
 8005024:	2140      	movs	r1, #64	; 0x40
 8005026:	f000 facd 	bl	80055c4 <_malloc_r>
 800502a:	6038      	str	r0, [r7, #0]
 800502c:	6138      	str	r0, [r7, #16]
 800502e:	2800      	cmp	r0, #0
 8005030:	d105      	bne.n	800503e <_svfiprintf_r+0x32>
 8005032:	230c      	movs	r3, #12
 8005034:	9a03      	ldr	r2, [sp, #12]
 8005036:	3801      	subs	r0, #1
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	b021      	add	sp, #132	; 0x84
 800503c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503e:	2340      	movs	r3, #64	; 0x40
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	2300      	movs	r3, #0
 8005044:	ac08      	add	r4, sp, #32
 8005046:	6163      	str	r3, [r4, #20]
 8005048:	3320      	adds	r3, #32
 800504a:	7663      	strb	r3, [r4, #25]
 800504c:	3310      	adds	r3, #16
 800504e:	76a3      	strb	r3, [r4, #26]
 8005050:	9507      	str	r5, [sp, #28]
 8005052:	0035      	movs	r5, r6
 8005054:	782b      	ldrb	r3, [r5, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <_svfiprintf_r+0x52>
 800505a:	2b25      	cmp	r3, #37	; 0x25
 800505c:	d146      	bne.n	80050ec <_svfiprintf_r+0xe0>
 800505e:	1bab      	subs	r3, r5, r6
 8005060:	9305      	str	r3, [sp, #20]
 8005062:	d00c      	beq.n	800507e <_svfiprintf_r+0x72>
 8005064:	0032      	movs	r2, r6
 8005066:	0039      	movs	r1, r7
 8005068:	9803      	ldr	r0, [sp, #12]
 800506a:	f7ff ff6d 	bl	8004f48 <__ssputs_r>
 800506e:	1c43      	adds	r3, r0, #1
 8005070:	d100      	bne.n	8005074 <_svfiprintf_r+0x68>
 8005072:	e0ae      	b.n	80051d2 <_svfiprintf_r+0x1c6>
 8005074:	6962      	ldr	r2, [r4, #20]
 8005076:	9b05      	ldr	r3, [sp, #20]
 8005078:	4694      	mov	ip, r2
 800507a:	4463      	add	r3, ip
 800507c:	6163      	str	r3, [r4, #20]
 800507e:	782b      	ldrb	r3, [r5, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d100      	bne.n	8005086 <_svfiprintf_r+0x7a>
 8005084:	e0a5      	b.n	80051d2 <_svfiprintf_r+0x1c6>
 8005086:	2201      	movs	r2, #1
 8005088:	2300      	movs	r3, #0
 800508a:	4252      	negs	r2, r2
 800508c:	6062      	str	r2, [r4, #4]
 800508e:	a904      	add	r1, sp, #16
 8005090:	3254      	adds	r2, #84	; 0x54
 8005092:	1852      	adds	r2, r2, r1
 8005094:	1c6e      	adds	r6, r5, #1
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	60e3      	str	r3, [r4, #12]
 800509a:	60a3      	str	r3, [r4, #8]
 800509c:	7013      	strb	r3, [r2, #0]
 800509e:	65a3      	str	r3, [r4, #88]	; 0x58
 80050a0:	7831      	ldrb	r1, [r6, #0]
 80050a2:	2205      	movs	r2, #5
 80050a4:	4853      	ldr	r0, [pc, #332]	; (80051f4 <_svfiprintf_r+0x1e8>)
 80050a6:	f000 fa25 	bl	80054f4 <memchr>
 80050aa:	1c75      	adds	r5, r6, #1
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d11f      	bne.n	80050f0 <_svfiprintf_r+0xe4>
 80050b0:	6822      	ldr	r2, [r4, #0]
 80050b2:	06d3      	lsls	r3, r2, #27
 80050b4:	d504      	bpl.n	80050c0 <_svfiprintf_r+0xb4>
 80050b6:	2353      	movs	r3, #83	; 0x53
 80050b8:	a904      	add	r1, sp, #16
 80050ba:	185b      	adds	r3, r3, r1
 80050bc:	2120      	movs	r1, #32
 80050be:	7019      	strb	r1, [r3, #0]
 80050c0:	0713      	lsls	r3, r2, #28
 80050c2:	d504      	bpl.n	80050ce <_svfiprintf_r+0xc2>
 80050c4:	2353      	movs	r3, #83	; 0x53
 80050c6:	a904      	add	r1, sp, #16
 80050c8:	185b      	adds	r3, r3, r1
 80050ca:	212b      	movs	r1, #43	; 0x2b
 80050cc:	7019      	strb	r1, [r3, #0]
 80050ce:	7833      	ldrb	r3, [r6, #0]
 80050d0:	2b2a      	cmp	r3, #42	; 0x2a
 80050d2:	d016      	beq.n	8005102 <_svfiprintf_r+0xf6>
 80050d4:	0035      	movs	r5, r6
 80050d6:	2100      	movs	r1, #0
 80050d8:	200a      	movs	r0, #10
 80050da:	68e3      	ldr	r3, [r4, #12]
 80050dc:	782a      	ldrb	r2, [r5, #0]
 80050de:	1c6e      	adds	r6, r5, #1
 80050e0:	3a30      	subs	r2, #48	; 0x30
 80050e2:	2a09      	cmp	r2, #9
 80050e4:	d94e      	bls.n	8005184 <_svfiprintf_r+0x178>
 80050e6:	2900      	cmp	r1, #0
 80050e8:	d018      	beq.n	800511c <_svfiprintf_r+0x110>
 80050ea:	e010      	b.n	800510e <_svfiprintf_r+0x102>
 80050ec:	3501      	adds	r5, #1
 80050ee:	e7b1      	b.n	8005054 <_svfiprintf_r+0x48>
 80050f0:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <_svfiprintf_r+0x1e8>)
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	1ac0      	subs	r0, r0, r3
 80050f6:	2301      	movs	r3, #1
 80050f8:	4083      	lsls	r3, r0
 80050fa:	4313      	orrs	r3, r2
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	002e      	movs	r6, r5
 8005100:	e7ce      	b.n	80050a0 <_svfiprintf_r+0x94>
 8005102:	9b07      	ldr	r3, [sp, #28]
 8005104:	1d19      	adds	r1, r3, #4
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	9107      	str	r1, [sp, #28]
 800510a:	2b00      	cmp	r3, #0
 800510c:	db01      	blt.n	8005112 <_svfiprintf_r+0x106>
 800510e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005110:	e004      	b.n	800511c <_svfiprintf_r+0x110>
 8005112:	425b      	negs	r3, r3
 8005114:	60e3      	str	r3, [r4, #12]
 8005116:	2302      	movs	r3, #2
 8005118:	4313      	orrs	r3, r2
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	782b      	ldrb	r3, [r5, #0]
 800511e:	2b2e      	cmp	r3, #46	; 0x2e
 8005120:	d10a      	bne.n	8005138 <_svfiprintf_r+0x12c>
 8005122:	786b      	ldrb	r3, [r5, #1]
 8005124:	2b2a      	cmp	r3, #42	; 0x2a
 8005126:	d135      	bne.n	8005194 <_svfiprintf_r+0x188>
 8005128:	9b07      	ldr	r3, [sp, #28]
 800512a:	3502      	adds	r5, #2
 800512c:	1d1a      	adds	r2, r3, #4
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	9207      	str	r2, [sp, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	db2b      	blt.n	800518e <_svfiprintf_r+0x182>
 8005136:	9309      	str	r3, [sp, #36]	; 0x24
 8005138:	4e2f      	ldr	r6, [pc, #188]	; (80051f8 <_svfiprintf_r+0x1ec>)
 800513a:	7829      	ldrb	r1, [r5, #0]
 800513c:	2203      	movs	r2, #3
 800513e:	0030      	movs	r0, r6
 8005140:	f000 f9d8 	bl	80054f4 <memchr>
 8005144:	2800      	cmp	r0, #0
 8005146:	d006      	beq.n	8005156 <_svfiprintf_r+0x14a>
 8005148:	2340      	movs	r3, #64	; 0x40
 800514a:	1b80      	subs	r0, r0, r6
 800514c:	4083      	lsls	r3, r0
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	3501      	adds	r5, #1
 8005152:	4313      	orrs	r3, r2
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	7829      	ldrb	r1, [r5, #0]
 8005158:	2206      	movs	r2, #6
 800515a:	4828      	ldr	r0, [pc, #160]	; (80051fc <_svfiprintf_r+0x1f0>)
 800515c:	1c6e      	adds	r6, r5, #1
 800515e:	7621      	strb	r1, [r4, #24]
 8005160:	f000 f9c8 	bl	80054f4 <memchr>
 8005164:	2800      	cmp	r0, #0
 8005166:	d03c      	beq.n	80051e2 <_svfiprintf_r+0x1d6>
 8005168:	4b25      	ldr	r3, [pc, #148]	; (8005200 <_svfiprintf_r+0x1f4>)
 800516a:	2b00      	cmp	r3, #0
 800516c:	d125      	bne.n	80051ba <_svfiprintf_r+0x1ae>
 800516e:	2207      	movs	r2, #7
 8005170:	9b07      	ldr	r3, [sp, #28]
 8005172:	3307      	adds	r3, #7
 8005174:	4393      	bics	r3, r2
 8005176:	3308      	adds	r3, #8
 8005178:	9307      	str	r3, [sp, #28]
 800517a:	6963      	ldr	r3, [r4, #20]
 800517c:	9a04      	ldr	r2, [sp, #16]
 800517e:	189b      	adds	r3, r3, r2
 8005180:	6163      	str	r3, [r4, #20]
 8005182:	e766      	b.n	8005052 <_svfiprintf_r+0x46>
 8005184:	4343      	muls	r3, r0
 8005186:	2101      	movs	r1, #1
 8005188:	189b      	adds	r3, r3, r2
 800518a:	0035      	movs	r5, r6
 800518c:	e7a6      	b.n	80050dc <_svfiprintf_r+0xd0>
 800518e:	2301      	movs	r3, #1
 8005190:	425b      	negs	r3, r3
 8005192:	e7d0      	b.n	8005136 <_svfiprintf_r+0x12a>
 8005194:	2300      	movs	r3, #0
 8005196:	200a      	movs	r0, #10
 8005198:	001a      	movs	r2, r3
 800519a:	3501      	adds	r5, #1
 800519c:	6063      	str	r3, [r4, #4]
 800519e:	7829      	ldrb	r1, [r5, #0]
 80051a0:	1c6e      	adds	r6, r5, #1
 80051a2:	3930      	subs	r1, #48	; 0x30
 80051a4:	2909      	cmp	r1, #9
 80051a6:	d903      	bls.n	80051b0 <_svfiprintf_r+0x1a4>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0c5      	beq.n	8005138 <_svfiprintf_r+0x12c>
 80051ac:	9209      	str	r2, [sp, #36]	; 0x24
 80051ae:	e7c3      	b.n	8005138 <_svfiprintf_r+0x12c>
 80051b0:	4342      	muls	r2, r0
 80051b2:	2301      	movs	r3, #1
 80051b4:	1852      	adds	r2, r2, r1
 80051b6:	0035      	movs	r5, r6
 80051b8:	e7f1      	b.n	800519e <_svfiprintf_r+0x192>
 80051ba:	ab07      	add	r3, sp, #28
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	003a      	movs	r2, r7
 80051c0:	4b10      	ldr	r3, [pc, #64]	; (8005204 <_svfiprintf_r+0x1f8>)
 80051c2:	0021      	movs	r1, r4
 80051c4:	9803      	ldr	r0, [sp, #12]
 80051c6:	e000      	b.n	80051ca <_svfiprintf_r+0x1be>
 80051c8:	bf00      	nop
 80051ca:	9004      	str	r0, [sp, #16]
 80051cc:	9b04      	ldr	r3, [sp, #16]
 80051ce:	3301      	adds	r3, #1
 80051d0:	d1d3      	bne.n	800517a <_svfiprintf_r+0x16e>
 80051d2:	89bb      	ldrh	r3, [r7, #12]
 80051d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80051d6:	065b      	lsls	r3, r3, #25
 80051d8:	d400      	bmi.n	80051dc <_svfiprintf_r+0x1d0>
 80051da:	e72e      	b.n	800503a <_svfiprintf_r+0x2e>
 80051dc:	2001      	movs	r0, #1
 80051de:	4240      	negs	r0, r0
 80051e0:	e72b      	b.n	800503a <_svfiprintf_r+0x2e>
 80051e2:	ab07      	add	r3, sp, #28
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	003a      	movs	r2, r7
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <_svfiprintf_r+0x1f8>)
 80051ea:	0021      	movs	r1, r4
 80051ec:	9803      	ldr	r0, [sp, #12]
 80051ee:	f000 f879 	bl	80052e4 <_printf_i>
 80051f2:	e7ea      	b.n	80051ca <_svfiprintf_r+0x1be>
 80051f4:	0800593c 	.word	0x0800593c
 80051f8:	08005942 	.word	0x08005942
 80051fc:	08005946 	.word	0x08005946
 8005200:	00000000 	.word	0x00000000
 8005204:	08004f49 	.word	0x08004f49

08005208 <_printf_common>:
 8005208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800520a:	0015      	movs	r5, r2
 800520c:	9301      	str	r3, [sp, #4]
 800520e:	688a      	ldr	r2, [r1, #8]
 8005210:	690b      	ldr	r3, [r1, #16]
 8005212:	9000      	str	r0, [sp, #0]
 8005214:	000c      	movs	r4, r1
 8005216:	4293      	cmp	r3, r2
 8005218:	da00      	bge.n	800521c <_printf_common+0x14>
 800521a:	0013      	movs	r3, r2
 800521c:	0022      	movs	r2, r4
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	3243      	adds	r2, #67	; 0x43
 8005222:	7812      	ldrb	r2, [r2, #0]
 8005224:	2a00      	cmp	r2, #0
 8005226:	d001      	beq.n	800522c <_printf_common+0x24>
 8005228:	3301      	adds	r3, #1
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	069b      	lsls	r3, r3, #26
 8005230:	d502      	bpl.n	8005238 <_printf_common+0x30>
 8005232:	682b      	ldr	r3, [r5, #0]
 8005234:	3302      	adds	r3, #2
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	2706      	movs	r7, #6
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	401f      	ands	r7, r3
 800523e:	d027      	beq.n	8005290 <_printf_common+0x88>
 8005240:	0023      	movs	r3, r4
 8005242:	3343      	adds	r3, #67	; 0x43
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	1e5a      	subs	r2, r3, #1
 8005248:	4193      	sbcs	r3, r2
 800524a:	6822      	ldr	r2, [r4, #0]
 800524c:	0692      	lsls	r2, r2, #26
 800524e:	d430      	bmi.n	80052b2 <_printf_common+0xaa>
 8005250:	0022      	movs	r2, r4
 8005252:	9901      	ldr	r1, [sp, #4]
 8005254:	3243      	adds	r2, #67	; 0x43
 8005256:	9800      	ldr	r0, [sp, #0]
 8005258:	9e08      	ldr	r6, [sp, #32]
 800525a:	47b0      	blx	r6
 800525c:	1c43      	adds	r3, r0, #1
 800525e:	d025      	beq.n	80052ac <_printf_common+0xa4>
 8005260:	2306      	movs	r3, #6
 8005262:	6820      	ldr	r0, [r4, #0]
 8005264:	682a      	ldr	r2, [r5, #0]
 8005266:	68e1      	ldr	r1, [r4, #12]
 8005268:	4003      	ands	r3, r0
 800526a:	2500      	movs	r5, #0
 800526c:	2b04      	cmp	r3, #4
 800526e:	d103      	bne.n	8005278 <_printf_common+0x70>
 8005270:	1a8d      	subs	r5, r1, r2
 8005272:	43eb      	mvns	r3, r5
 8005274:	17db      	asrs	r3, r3, #31
 8005276:	401d      	ands	r5, r3
 8005278:	68a3      	ldr	r3, [r4, #8]
 800527a:	6922      	ldr	r2, [r4, #16]
 800527c:	4293      	cmp	r3, r2
 800527e:	dd01      	ble.n	8005284 <_printf_common+0x7c>
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	18ed      	adds	r5, r5, r3
 8005284:	2700      	movs	r7, #0
 8005286:	42bd      	cmp	r5, r7
 8005288:	d120      	bne.n	80052cc <_printf_common+0xc4>
 800528a:	2000      	movs	r0, #0
 800528c:	e010      	b.n	80052b0 <_printf_common+0xa8>
 800528e:	3701      	adds	r7, #1
 8005290:	68e3      	ldr	r3, [r4, #12]
 8005292:	682a      	ldr	r2, [r5, #0]
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	42bb      	cmp	r3, r7
 8005298:	ddd2      	ble.n	8005240 <_printf_common+0x38>
 800529a:	0022      	movs	r2, r4
 800529c:	2301      	movs	r3, #1
 800529e:	3219      	adds	r2, #25
 80052a0:	9901      	ldr	r1, [sp, #4]
 80052a2:	9800      	ldr	r0, [sp, #0]
 80052a4:	9e08      	ldr	r6, [sp, #32]
 80052a6:	47b0      	blx	r6
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d1f0      	bne.n	800528e <_printf_common+0x86>
 80052ac:	2001      	movs	r0, #1
 80052ae:	4240      	negs	r0, r0
 80052b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052b2:	2030      	movs	r0, #48	; 0x30
 80052b4:	18e1      	adds	r1, r4, r3
 80052b6:	3143      	adds	r1, #67	; 0x43
 80052b8:	7008      	strb	r0, [r1, #0]
 80052ba:	0021      	movs	r1, r4
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	3145      	adds	r1, #69	; 0x45
 80052c0:	7809      	ldrb	r1, [r1, #0]
 80052c2:	18a2      	adds	r2, r4, r2
 80052c4:	3243      	adds	r2, #67	; 0x43
 80052c6:	3302      	adds	r3, #2
 80052c8:	7011      	strb	r1, [r2, #0]
 80052ca:	e7c1      	b.n	8005250 <_printf_common+0x48>
 80052cc:	0022      	movs	r2, r4
 80052ce:	2301      	movs	r3, #1
 80052d0:	321a      	adds	r2, #26
 80052d2:	9901      	ldr	r1, [sp, #4]
 80052d4:	9800      	ldr	r0, [sp, #0]
 80052d6:	9e08      	ldr	r6, [sp, #32]
 80052d8:	47b0      	blx	r6
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	d0e6      	beq.n	80052ac <_printf_common+0xa4>
 80052de:	3701      	adds	r7, #1
 80052e0:	e7d1      	b.n	8005286 <_printf_common+0x7e>
	...

080052e4 <_printf_i>:
 80052e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e6:	b089      	sub	sp, #36	; 0x24
 80052e8:	9204      	str	r2, [sp, #16]
 80052ea:	000a      	movs	r2, r1
 80052ec:	3243      	adds	r2, #67	; 0x43
 80052ee:	9305      	str	r3, [sp, #20]
 80052f0:	9003      	str	r0, [sp, #12]
 80052f2:	9202      	str	r2, [sp, #8]
 80052f4:	7e0a      	ldrb	r2, [r1, #24]
 80052f6:	000c      	movs	r4, r1
 80052f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052fa:	2a6e      	cmp	r2, #110	; 0x6e
 80052fc:	d100      	bne.n	8005300 <_printf_i+0x1c>
 80052fe:	e086      	b.n	800540e <_printf_i+0x12a>
 8005300:	d81f      	bhi.n	8005342 <_printf_i+0x5e>
 8005302:	2a63      	cmp	r2, #99	; 0x63
 8005304:	d033      	beq.n	800536e <_printf_i+0x8a>
 8005306:	d808      	bhi.n	800531a <_printf_i+0x36>
 8005308:	2a00      	cmp	r2, #0
 800530a:	d100      	bne.n	800530e <_printf_i+0x2a>
 800530c:	e08c      	b.n	8005428 <_printf_i+0x144>
 800530e:	2a58      	cmp	r2, #88	; 0x58
 8005310:	d04d      	beq.n	80053ae <_printf_i+0xca>
 8005312:	0025      	movs	r5, r4
 8005314:	3542      	adds	r5, #66	; 0x42
 8005316:	702a      	strb	r2, [r5, #0]
 8005318:	e030      	b.n	800537c <_printf_i+0x98>
 800531a:	2a64      	cmp	r2, #100	; 0x64
 800531c:	d001      	beq.n	8005322 <_printf_i+0x3e>
 800531e:	2a69      	cmp	r2, #105	; 0x69
 8005320:	d1f7      	bne.n	8005312 <_printf_i+0x2e>
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	6825      	ldr	r5, [r4, #0]
 8005326:	1d0a      	adds	r2, r1, #4
 8005328:	0628      	lsls	r0, r5, #24
 800532a:	d529      	bpl.n	8005380 <_printf_i+0x9c>
 800532c:	6808      	ldr	r0, [r1, #0]
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	2800      	cmp	r0, #0
 8005332:	da03      	bge.n	800533c <_printf_i+0x58>
 8005334:	232d      	movs	r3, #45	; 0x2d
 8005336:	9a02      	ldr	r2, [sp, #8]
 8005338:	4240      	negs	r0, r0
 800533a:	7013      	strb	r3, [r2, #0]
 800533c:	4e6b      	ldr	r6, [pc, #428]	; (80054ec <_printf_i+0x208>)
 800533e:	270a      	movs	r7, #10
 8005340:	e04f      	b.n	80053e2 <_printf_i+0xfe>
 8005342:	2a73      	cmp	r2, #115	; 0x73
 8005344:	d074      	beq.n	8005430 <_printf_i+0x14c>
 8005346:	d808      	bhi.n	800535a <_printf_i+0x76>
 8005348:	2a6f      	cmp	r2, #111	; 0x6f
 800534a:	d01f      	beq.n	800538c <_printf_i+0xa8>
 800534c:	2a70      	cmp	r2, #112	; 0x70
 800534e:	d1e0      	bne.n	8005312 <_printf_i+0x2e>
 8005350:	2220      	movs	r2, #32
 8005352:	6809      	ldr	r1, [r1, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	6022      	str	r2, [r4, #0]
 8005358:	e003      	b.n	8005362 <_printf_i+0x7e>
 800535a:	2a75      	cmp	r2, #117	; 0x75
 800535c:	d016      	beq.n	800538c <_printf_i+0xa8>
 800535e:	2a78      	cmp	r2, #120	; 0x78
 8005360:	d1d7      	bne.n	8005312 <_printf_i+0x2e>
 8005362:	0022      	movs	r2, r4
 8005364:	2178      	movs	r1, #120	; 0x78
 8005366:	3245      	adds	r2, #69	; 0x45
 8005368:	7011      	strb	r1, [r2, #0]
 800536a:	4e61      	ldr	r6, [pc, #388]	; (80054f0 <_printf_i+0x20c>)
 800536c:	e022      	b.n	80053b4 <_printf_i+0xd0>
 800536e:	0025      	movs	r5, r4
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	3542      	adds	r5, #66	; 0x42
 8005374:	1d11      	adds	r1, r2, #4
 8005376:	6019      	str	r1, [r3, #0]
 8005378:	6813      	ldr	r3, [r2, #0]
 800537a:	702b      	strb	r3, [r5, #0]
 800537c:	2301      	movs	r3, #1
 800537e:	e065      	b.n	800544c <_printf_i+0x168>
 8005380:	6808      	ldr	r0, [r1, #0]
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	0669      	lsls	r1, r5, #25
 8005386:	d5d3      	bpl.n	8005330 <_printf_i+0x4c>
 8005388:	b200      	sxth	r0, r0
 800538a:	e7d1      	b.n	8005330 <_printf_i+0x4c>
 800538c:	6819      	ldr	r1, [r3, #0]
 800538e:	6825      	ldr	r5, [r4, #0]
 8005390:	1d08      	adds	r0, r1, #4
 8005392:	6018      	str	r0, [r3, #0]
 8005394:	6808      	ldr	r0, [r1, #0]
 8005396:	062e      	lsls	r6, r5, #24
 8005398:	d505      	bpl.n	80053a6 <_printf_i+0xc2>
 800539a:	4e54      	ldr	r6, [pc, #336]	; (80054ec <_printf_i+0x208>)
 800539c:	2708      	movs	r7, #8
 800539e:	2a6f      	cmp	r2, #111	; 0x6f
 80053a0:	d01b      	beq.n	80053da <_printf_i+0xf6>
 80053a2:	270a      	movs	r7, #10
 80053a4:	e019      	b.n	80053da <_printf_i+0xf6>
 80053a6:	066d      	lsls	r5, r5, #25
 80053a8:	d5f7      	bpl.n	800539a <_printf_i+0xb6>
 80053aa:	b280      	uxth	r0, r0
 80053ac:	e7f5      	b.n	800539a <_printf_i+0xb6>
 80053ae:	3145      	adds	r1, #69	; 0x45
 80053b0:	4e4e      	ldr	r6, [pc, #312]	; (80054ec <_printf_i+0x208>)
 80053b2:	700a      	strb	r2, [r1, #0]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	6822      	ldr	r2, [r4, #0]
 80053b8:	1d01      	adds	r1, r0, #4
 80053ba:	6800      	ldr	r0, [r0, #0]
 80053bc:	6019      	str	r1, [r3, #0]
 80053be:	0615      	lsls	r5, r2, #24
 80053c0:	d521      	bpl.n	8005406 <_printf_i+0x122>
 80053c2:	07d3      	lsls	r3, r2, #31
 80053c4:	d502      	bpl.n	80053cc <_printf_i+0xe8>
 80053c6:	2320      	movs	r3, #32
 80053c8:	431a      	orrs	r2, r3
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	2710      	movs	r7, #16
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d103      	bne.n	80053da <_printf_i+0xf6>
 80053d2:	2320      	movs	r3, #32
 80053d4:	6822      	ldr	r2, [r4, #0]
 80053d6:	439a      	bics	r2, r3
 80053d8:	6022      	str	r2, [r4, #0]
 80053da:	0023      	movs	r3, r4
 80053dc:	2200      	movs	r2, #0
 80053de:	3343      	adds	r3, #67	; 0x43
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	6863      	ldr	r3, [r4, #4]
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	db58      	blt.n	800549c <_printf_i+0x1b8>
 80053ea:	2204      	movs	r2, #4
 80053ec:	6821      	ldr	r1, [r4, #0]
 80053ee:	4391      	bics	r1, r2
 80053f0:	6021      	str	r1, [r4, #0]
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d154      	bne.n	80054a0 <_printf_i+0x1bc>
 80053f6:	9d02      	ldr	r5, [sp, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d05a      	beq.n	80054b2 <_printf_i+0x1ce>
 80053fc:	0025      	movs	r5, r4
 80053fe:	7833      	ldrb	r3, [r6, #0]
 8005400:	3542      	adds	r5, #66	; 0x42
 8005402:	702b      	strb	r3, [r5, #0]
 8005404:	e055      	b.n	80054b2 <_printf_i+0x1ce>
 8005406:	0655      	lsls	r5, r2, #25
 8005408:	d5db      	bpl.n	80053c2 <_printf_i+0xde>
 800540a:	b280      	uxth	r0, r0
 800540c:	e7d9      	b.n	80053c2 <_printf_i+0xde>
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	680d      	ldr	r5, [r1, #0]
 8005412:	1d10      	adds	r0, r2, #4
 8005414:	6949      	ldr	r1, [r1, #20]
 8005416:	6018      	str	r0, [r3, #0]
 8005418:	6813      	ldr	r3, [r2, #0]
 800541a:	062e      	lsls	r6, r5, #24
 800541c:	d501      	bpl.n	8005422 <_printf_i+0x13e>
 800541e:	6019      	str	r1, [r3, #0]
 8005420:	e002      	b.n	8005428 <_printf_i+0x144>
 8005422:	066d      	lsls	r5, r5, #25
 8005424:	d5fb      	bpl.n	800541e <_printf_i+0x13a>
 8005426:	8019      	strh	r1, [r3, #0]
 8005428:	2300      	movs	r3, #0
 800542a:	9d02      	ldr	r5, [sp, #8]
 800542c:	6123      	str	r3, [r4, #16]
 800542e:	e04f      	b.n	80054d0 <_printf_i+0x1ec>
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	1d11      	adds	r1, r2, #4
 8005434:	6019      	str	r1, [r3, #0]
 8005436:	6815      	ldr	r5, [r2, #0]
 8005438:	2100      	movs	r1, #0
 800543a:	6862      	ldr	r2, [r4, #4]
 800543c:	0028      	movs	r0, r5
 800543e:	f000 f859 	bl	80054f4 <memchr>
 8005442:	2800      	cmp	r0, #0
 8005444:	d001      	beq.n	800544a <_printf_i+0x166>
 8005446:	1b40      	subs	r0, r0, r5
 8005448:	6060      	str	r0, [r4, #4]
 800544a:	6863      	ldr	r3, [r4, #4]
 800544c:	6123      	str	r3, [r4, #16]
 800544e:	2300      	movs	r3, #0
 8005450:	9a02      	ldr	r2, [sp, #8]
 8005452:	7013      	strb	r3, [r2, #0]
 8005454:	e03c      	b.n	80054d0 <_printf_i+0x1ec>
 8005456:	6923      	ldr	r3, [r4, #16]
 8005458:	002a      	movs	r2, r5
 800545a:	9904      	ldr	r1, [sp, #16]
 800545c:	9803      	ldr	r0, [sp, #12]
 800545e:	9d05      	ldr	r5, [sp, #20]
 8005460:	47a8      	blx	r5
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	d03e      	beq.n	80054e4 <_printf_i+0x200>
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	079b      	lsls	r3, r3, #30
 800546a:	d415      	bmi.n	8005498 <_printf_i+0x1b4>
 800546c:	9b07      	ldr	r3, [sp, #28]
 800546e:	68e0      	ldr	r0, [r4, #12]
 8005470:	4298      	cmp	r0, r3
 8005472:	da39      	bge.n	80054e8 <_printf_i+0x204>
 8005474:	0018      	movs	r0, r3
 8005476:	e037      	b.n	80054e8 <_printf_i+0x204>
 8005478:	0022      	movs	r2, r4
 800547a:	2301      	movs	r3, #1
 800547c:	3219      	adds	r2, #25
 800547e:	9904      	ldr	r1, [sp, #16]
 8005480:	9803      	ldr	r0, [sp, #12]
 8005482:	9e05      	ldr	r6, [sp, #20]
 8005484:	47b0      	blx	r6
 8005486:	1c43      	adds	r3, r0, #1
 8005488:	d02c      	beq.n	80054e4 <_printf_i+0x200>
 800548a:	3501      	adds	r5, #1
 800548c:	68e3      	ldr	r3, [r4, #12]
 800548e:	9a07      	ldr	r2, [sp, #28]
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	42ab      	cmp	r3, r5
 8005494:	dcf0      	bgt.n	8005478 <_printf_i+0x194>
 8005496:	e7e9      	b.n	800546c <_printf_i+0x188>
 8005498:	2500      	movs	r5, #0
 800549a:	e7f7      	b.n	800548c <_printf_i+0x1a8>
 800549c:	2800      	cmp	r0, #0
 800549e:	d0ad      	beq.n	80053fc <_printf_i+0x118>
 80054a0:	9d02      	ldr	r5, [sp, #8]
 80054a2:	0039      	movs	r1, r7
 80054a4:	f7fa febe 	bl	8000224 <__aeabi_uidivmod>
 80054a8:	5c73      	ldrb	r3, [r6, r1]
 80054aa:	3d01      	subs	r5, #1
 80054ac:	702b      	strb	r3, [r5, #0]
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d1f7      	bne.n	80054a2 <_printf_i+0x1be>
 80054b2:	2f08      	cmp	r7, #8
 80054b4:	d109      	bne.n	80054ca <_printf_i+0x1e6>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	07db      	lsls	r3, r3, #31
 80054ba:	d506      	bpl.n	80054ca <_printf_i+0x1e6>
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	6922      	ldr	r2, [r4, #16]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	dc02      	bgt.n	80054ca <_printf_i+0x1e6>
 80054c4:	2330      	movs	r3, #48	; 0x30
 80054c6:	3d01      	subs	r5, #1
 80054c8:	702b      	strb	r3, [r5, #0]
 80054ca:	9b02      	ldr	r3, [sp, #8]
 80054cc:	1b5b      	subs	r3, r3, r5
 80054ce:	6123      	str	r3, [r4, #16]
 80054d0:	9b05      	ldr	r3, [sp, #20]
 80054d2:	aa07      	add	r2, sp, #28
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	0021      	movs	r1, r4
 80054d8:	9b04      	ldr	r3, [sp, #16]
 80054da:	9803      	ldr	r0, [sp, #12]
 80054dc:	f7ff fe94 	bl	8005208 <_printf_common>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	d1b8      	bne.n	8005456 <_printf_i+0x172>
 80054e4:	2001      	movs	r0, #1
 80054e6:	4240      	negs	r0, r0
 80054e8:	b009      	add	sp, #36	; 0x24
 80054ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ec:	0800594d 	.word	0x0800594d
 80054f0:	0800595e 	.word	0x0800595e

080054f4 <memchr>:
 80054f4:	b2c9      	uxtb	r1, r1
 80054f6:	1882      	adds	r2, r0, r2
 80054f8:	4290      	cmp	r0, r2
 80054fa:	d101      	bne.n	8005500 <memchr+0xc>
 80054fc:	2000      	movs	r0, #0
 80054fe:	4770      	bx	lr
 8005500:	7803      	ldrb	r3, [r0, #0]
 8005502:	428b      	cmp	r3, r1
 8005504:	d0fb      	beq.n	80054fe <memchr+0xa>
 8005506:	3001      	adds	r0, #1
 8005508:	e7f6      	b.n	80054f8 <memchr+0x4>

0800550a <memmove>:
 800550a:	b510      	push	{r4, lr}
 800550c:	4288      	cmp	r0, r1
 800550e:	d902      	bls.n	8005516 <memmove+0xc>
 8005510:	188b      	adds	r3, r1, r2
 8005512:	4298      	cmp	r0, r3
 8005514:	d303      	bcc.n	800551e <memmove+0x14>
 8005516:	2300      	movs	r3, #0
 8005518:	e007      	b.n	800552a <memmove+0x20>
 800551a:	5c8b      	ldrb	r3, [r1, r2]
 800551c:	5483      	strb	r3, [r0, r2]
 800551e:	3a01      	subs	r2, #1
 8005520:	d2fb      	bcs.n	800551a <memmove+0x10>
 8005522:	bd10      	pop	{r4, pc}
 8005524:	5ccc      	ldrb	r4, [r1, r3]
 8005526:	54c4      	strb	r4, [r0, r3]
 8005528:	3301      	adds	r3, #1
 800552a:	429a      	cmp	r2, r3
 800552c:	d1fa      	bne.n	8005524 <memmove+0x1a>
 800552e:	e7f8      	b.n	8005522 <memmove+0x18>

08005530 <_free_r>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	0005      	movs	r5, r0
 8005534:	2900      	cmp	r1, #0
 8005536:	d010      	beq.n	800555a <_free_r+0x2a>
 8005538:	1f0c      	subs	r4, r1, #4
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	da00      	bge.n	8005542 <_free_r+0x12>
 8005540:	18e4      	adds	r4, r4, r3
 8005542:	0028      	movs	r0, r5
 8005544:	f000 f8d4 	bl	80056f0 <__malloc_lock>
 8005548:	4a1d      	ldr	r2, [pc, #116]	; (80055c0 <_free_r+0x90>)
 800554a:	6813      	ldr	r3, [r2, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <_free_r+0x2c>
 8005550:	6063      	str	r3, [r4, #4]
 8005552:	6014      	str	r4, [r2, #0]
 8005554:	0028      	movs	r0, r5
 8005556:	f000 f8cc 	bl	80056f2 <__malloc_unlock>
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	42a3      	cmp	r3, r4
 800555e:	d909      	bls.n	8005574 <_free_r+0x44>
 8005560:	6821      	ldr	r1, [r4, #0]
 8005562:	1860      	adds	r0, r4, r1
 8005564:	4283      	cmp	r3, r0
 8005566:	d1f3      	bne.n	8005550 <_free_r+0x20>
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	1841      	adds	r1, r0, r1
 800556e:	6021      	str	r1, [r4, #0]
 8005570:	e7ee      	b.n	8005550 <_free_r+0x20>
 8005572:	0013      	movs	r3, r2
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	2a00      	cmp	r2, #0
 8005578:	d001      	beq.n	800557e <_free_r+0x4e>
 800557a:	42a2      	cmp	r2, r4
 800557c:	d9f9      	bls.n	8005572 <_free_r+0x42>
 800557e:	6819      	ldr	r1, [r3, #0]
 8005580:	1858      	adds	r0, r3, r1
 8005582:	42a0      	cmp	r0, r4
 8005584:	d10b      	bne.n	800559e <_free_r+0x6e>
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	1809      	adds	r1, r1, r0
 800558a:	1858      	adds	r0, r3, r1
 800558c:	6019      	str	r1, [r3, #0]
 800558e:	4282      	cmp	r2, r0
 8005590:	d1e0      	bne.n	8005554 <_free_r+0x24>
 8005592:	6810      	ldr	r0, [r2, #0]
 8005594:	6852      	ldr	r2, [r2, #4]
 8005596:	1841      	adds	r1, r0, r1
 8005598:	6019      	str	r1, [r3, #0]
 800559a:	605a      	str	r2, [r3, #4]
 800559c:	e7da      	b.n	8005554 <_free_r+0x24>
 800559e:	42a0      	cmp	r0, r4
 80055a0:	d902      	bls.n	80055a8 <_free_r+0x78>
 80055a2:	230c      	movs	r3, #12
 80055a4:	602b      	str	r3, [r5, #0]
 80055a6:	e7d5      	b.n	8005554 <_free_r+0x24>
 80055a8:	6821      	ldr	r1, [r4, #0]
 80055aa:	1860      	adds	r0, r4, r1
 80055ac:	4282      	cmp	r2, r0
 80055ae:	d103      	bne.n	80055b8 <_free_r+0x88>
 80055b0:	6810      	ldr	r0, [r2, #0]
 80055b2:	6852      	ldr	r2, [r2, #4]
 80055b4:	1841      	adds	r1, r0, r1
 80055b6:	6021      	str	r1, [r4, #0]
 80055b8:	6062      	str	r2, [r4, #4]
 80055ba:	605c      	str	r4, [r3, #4]
 80055bc:	e7ca      	b.n	8005554 <_free_r+0x24>
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	200001e8 	.word	0x200001e8

080055c4 <_malloc_r>:
 80055c4:	2303      	movs	r3, #3
 80055c6:	b570      	push	{r4, r5, r6, lr}
 80055c8:	1ccd      	adds	r5, r1, #3
 80055ca:	439d      	bics	r5, r3
 80055cc:	3508      	adds	r5, #8
 80055ce:	0006      	movs	r6, r0
 80055d0:	2d0c      	cmp	r5, #12
 80055d2:	d21e      	bcs.n	8005612 <_malloc_r+0x4e>
 80055d4:	250c      	movs	r5, #12
 80055d6:	42a9      	cmp	r1, r5
 80055d8:	d81d      	bhi.n	8005616 <_malloc_r+0x52>
 80055da:	0030      	movs	r0, r6
 80055dc:	f000 f888 	bl	80056f0 <__malloc_lock>
 80055e0:	4a25      	ldr	r2, [pc, #148]	; (8005678 <_malloc_r+0xb4>)
 80055e2:	6814      	ldr	r4, [r2, #0]
 80055e4:	0021      	movs	r1, r4
 80055e6:	2900      	cmp	r1, #0
 80055e8:	d119      	bne.n	800561e <_malloc_r+0x5a>
 80055ea:	4c24      	ldr	r4, [pc, #144]	; (800567c <_malloc_r+0xb8>)
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <_malloc_r+0x36>
 80055f2:	0030      	movs	r0, r6
 80055f4:	f000 f86a 	bl	80056cc <_sbrk_r>
 80055f8:	6020      	str	r0, [r4, #0]
 80055fa:	0029      	movs	r1, r5
 80055fc:	0030      	movs	r0, r6
 80055fe:	f000 f865 	bl	80056cc <_sbrk_r>
 8005602:	1c43      	adds	r3, r0, #1
 8005604:	d12b      	bne.n	800565e <_malloc_r+0x9a>
 8005606:	230c      	movs	r3, #12
 8005608:	0030      	movs	r0, r6
 800560a:	6033      	str	r3, [r6, #0]
 800560c:	f000 f871 	bl	80056f2 <__malloc_unlock>
 8005610:	e003      	b.n	800561a <_malloc_r+0x56>
 8005612:	2d00      	cmp	r5, #0
 8005614:	dadf      	bge.n	80055d6 <_malloc_r+0x12>
 8005616:	230c      	movs	r3, #12
 8005618:	6033      	str	r3, [r6, #0]
 800561a:	2000      	movs	r0, #0
 800561c:	bd70      	pop	{r4, r5, r6, pc}
 800561e:	680b      	ldr	r3, [r1, #0]
 8005620:	1b5b      	subs	r3, r3, r5
 8005622:	d419      	bmi.n	8005658 <_malloc_r+0x94>
 8005624:	2b0b      	cmp	r3, #11
 8005626:	d903      	bls.n	8005630 <_malloc_r+0x6c>
 8005628:	600b      	str	r3, [r1, #0]
 800562a:	18cc      	adds	r4, r1, r3
 800562c:	6025      	str	r5, [r4, #0]
 800562e:	e003      	b.n	8005638 <_malloc_r+0x74>
 8005630:	684b      	ldr	r3, [r1, #4]
 8005632:	428c      	cmp	r4, r1
 8005634:	d10d      	bne.n	8005652 <_malloc_r+0x8e>
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	0030      	movs	r0, r6
 800563a:	f000 f85a 	bl	80056f2 <__malloc_unlock>
 800563e:	0020      	movs	r0, r4
 8005640:	2207      	movs	r2, #7
 8005642:	300b      	adds	r0, #11
 8005644:	1d23      	adds	r3, r4, #4
 8005646:	4390      	bics	r0, r2
 8005648:	1ac3      	subs	r3, r0, r3
 800564a:	d0e7      	beq.n	800561c <_malloc_r+0x58>
 800564c:	425a      	negs	r2, r3
 800564e:	50e2      	str	r2, [r4, r3]
 8005650:	e7e4      	b.n	800561c <_malloc_r+0x58>
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	000c      	movs	r4, r1
 8005656:	e7ef      	b.n	8005638 <_malloc_r+0x74>
 8005658:	000c      	movs	r4, r1
 800565a:	6849      	ldr	r1, [r1, #4]
 800565c:	e7c3      	b.n	80055e6 <_malloc_r+0x22>
 800565e:	2303      	movs	r3, #3
 8005660:	1cc4      	adds	r4, r0, #3
 8005662:	439c      	bics	r4, r3
 8005664:	42a0      	cmp	r0, r4
 8005666:	d0e1      	beq.n	800562c <_malloc_r+0x68>
 8005668:	1a21      	subs	r1, r4, r0
 800566a:	0030      	movs	r0, r6
 800566c:	f000 f82e 	bl	80056cc <_sbrk_r>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d1db      	bne.n	800562c <_malloc_r+0x68>
 8005674:	e7c7      	b.n	8005606 <_malloc_r+0x42>
 8005676:	46c0      	nop			; (mov r8, r8)
 8005678:	200001e8 	.word	0x200001e8
 800567c:	200001ec 	.word	0x200001ec

08005680 <_realloc_r>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	0007      	movs	r7, r0
 8005684:	000d      	movs	r5, r1
 8005686:	0016      	movs	r6, r2
 8005688:	2900      	cmp	r1, #0
 800568a:	d105      	bne.n	8005698 <_realloc_r+0x18>
 800568c:	0011      	movs	r1, r2
 800568e:	f7ff ff99 	bl	80055c4 <_malloc_r>
 8005692:	0004      	movs	r4, r0
 8005694:	0020      	movs	r0, r4
 8005696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005698:	2a00      	cmp	r2, #0
 800569a:	d103      	bne.n	80056a4 <_realloc_r+0x24>
 800569c:	f7ff ff48 	bl	8005530 <_free_r>
 80056a0:	0034      	movs	r4, r6
 80056a2:	e7f7      	b.n	8005694 <_realloc_r+0x14>
 80056a4:	f000 f826 	bl	80056f4 <_malloc_usable_size_r>
 80056a8:	002c      	movs	r4, r5
 80056aa:	42b0      	cmp	r0, r6
 80056ac:	d2f2      	bcs.n	8005694 <_realloc_r+0x14>
 80056ae:	0031      	movs	r1, r6
 80056b0:	0038      	movs	r0, r7
 80056b2:	f7ff ff87 	bl	80055c4 <_malloc_r>
 80056b6:	1e04      	subs	r4, r0, #0
 80056b8:	d0ec      	beq.n	8005694 <_realloc_r+0x14>
 80056ba:	0029      	movs	r1, r5
 80056bc:	0032      	movs	r2, r6
 80056be:	f7ff fc03 	bl	8004ec8 <memcpy>
 80056c2:	0029      	movs	r1, r5
 80056c4:	0038      	movs	r0, r7
 80056c6:	f7ff ff33 	bl	8005530 <_free_r>
 80056ca:	e7e3      	b.n	8005694 <_realloc_r+0x14>

080056cc <_sbrk_r>:
 80056cc:	2300      	movs	r3, #0
 80056ce:	b570      	push	{r4, r5, r6, lr}
 80056d0:	4c06      	ldr	r4, [pc, #24]	; (80056ec <_sbrk_r+0x20>)
 80056d2:	0005      	movs	r5, r0
 80056d4:	0008      	movs	r0, r1
 80056d6:	6023      	str	r3, [r4, #0]
 80056d8:	f7fc fbfe 	bl	8001ed8 <_sbrk>
 80056dc:	1c43      	adds	r3, r0, #1
 80056de:	d103      	bne.n	80056e8 <_sbrk_r+0x1c>
 80056e0:	6823      	ldr	r3, [r4, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d000      	beq.n	80056e8 <_sbrk_r+0x1c>
 80056e6:	602b      	str	r3, [r5, #0]
 80056e8:	bd70      	pop	{r4, r5, r6, pc}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	20000400 	.word	0x20000400

080056f0 <__malloc_lock>:
 80056f0:	4770      	bx	lr

080056f2 <__malloc_unlock>:
 80056f2:	4770      	bx	lr

080056f4 <_malloc_usable_size_r>:
 80056f4:	1f0b      	subs	r3, r1, #4
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	1f18      	subs	r0, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	da01      	bge.n	8005702 <_malloc_usable_size_r+0xe>
 80056fe:	580b      	ldr	r3, [r1, r0]
 8005700:	18c0      	adds	r0, r0, r3
 8005702:	4770      	bx	lr

08005704 <fmin>:
 8005704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005706:	0004      	movs	r4, r0
 8005708:	000d      	movs	r5, r1
 800570a:	0016      	movs	r6, r2
 800570c:	001f      	movs	r7, r3
 800570e:	f000 f815 	bl	800573c <__fpclassifyd>
 8005712:	2800      	cmp	r0, #0
 8005714:	d00d      	beq.n	8005732 <fmin+0x2e>
 8005716:	0030      	movs	r0, r6
 8005718:	0039      	movs	r1, r7
 800571a:	f000 f80f 	bl	800573c <__fpclassifyd>
 800571e:	2800      	cmp	r0, #0
 8005720:	d009      	beq.n	8005736 <fmin+0x32>
 8005722:	0032      	movs	r2, r6
 8005724:	003b      	movs	r3, r7
 8005726:	0020      	movs	r0, r4
 8005728:	0029      	movs	r1, r5
 800572a:	f7fa fd97 	bl	800025c <__aeabi_dcmplt>
 800572e:	2800      	cmp	r0, #0
 8005730:	d101      	bne.n	8005736 <fmin+0x32>
 8005732:	0034      	movs	r4, r6
 8005734:	003d      	movs	r5, r7
 8005736:	0029      	movs	r1, r5
 8005738:	0020      	movs	r0, r4
 800573a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800573c <__fpclassifyd>:
 800573c:	b530      	push	{r4, r5, lr}
 800573e:	0005      	movs	r5, r0
 8005740:	2302      	movs	r3, #2
 8005742:	430d      	orrs	r5, r1
 8005744:	d018      	beq.n	8005778 <__fpclassifyd+0x3c>
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	061b      	lsls	r3, r3, #24
 800574a:	4299      	cmp	r1, r3
 800574c:	d102      	bne.n	8005754 <__fpclassifyd+0x18>
 800574e:	2302      	movs	r3, #2
 8005750:	2800      	cmp	r0, #0
 8005752:	d011      	beq.n	8005778 <__fpclassifyd+0x3c>
 8005754:	4b09      	ldr	r3, [pc, #36]	; (800577c <__fpclassifyd+0x40>)
 8005756:	0049      	lsls	r1, r1, #1
 8005758:	0849      	lsrs	r1, r1, #1
 800575a:	4a09      	ldr	r2, [pc, #36]	; (8005780 <__fpclassifyd+0x44>)
 800575c:	18cc      	adds	r4, r1, r3
 800575e:	2304      	movs	r3, #4
 8005760:	4294      	cmp	r4, r2
 8005762:	d909      	bls.n	8005778 <__fpclassifyd+0x3c>
 8005764:	4a07      	ldr	r2, [pc, #28]	; (8005784 <__fpclassifyd+0x48>)
 8005766:	3b01      	subs	r3, #1
 8005768:	4291      	cmp	r1, r2
 800576a:	d905      	bls.n	8005778 <__fpclassifyd+0x3c>
 800576c:	4a06      	ldr	r2, [pc, #24]	; (8005788 <__fpclassifyd+0x4c>)
 800576e:	2300      	movs	r3, #0
 8005770:	4291      	cmp	r1, r2
 8005772:	d101      	bne.n	8005778 <__fpclassifyd+0x3c>
 8005774:	4243      	negs	r3, r0
 8005776:	4143      	adcs	r3, r0
 8005778:	0018      	movs	r0, r3
 800577a:	bd30      	pop	{r4, r5, pc}
 800577c:	fff00000 	.word	0xfff00000
 8005780:	7fdfffff 	.word	0x7fdfffff
 8005784:	000fffff 	.word	0x000fffff
 8005788:	7ff00000 	.word	0x7ff00000

0800578c <_init>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr

08005798 <_fini>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr
