
Alarm_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000014c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800020c  0800020c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800020c  0800020c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800020c  0800020c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800020c  0800020c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800020c  0800020c  0001020c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000210  08000210  00010210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000214  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000218  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000218  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c73  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000492  00000000  00000000  00020c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000178  00000000  00000000  00021138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000130  00000000  00000000  000212b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017035  00000000  00000000  000213e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001c69  00000000  00000000  00038415  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086db9  00000000  00000000  0003a07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0e37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003c8  00000000  00000000  000c0eb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080001f4 	.word	0x080001f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080001f4 	.word	0x080001f4

08000108 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
  while (1)
 800010c:	e7fe      	b.n	800010c <NMI_Handler+0x4>

0800010e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800010e:	b580      	push	{r7, lr}
 8000110:	af00      	add	r7, sp, #0
  while (1)
 8000112:	e7fe      	b.n	8000112 <HardFault_Handler+0x4>

08000114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000114:	b580      	push	{r7, lr}
 8000116:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000118:	f000 f836 	bl	8000188 <HAL_IncTick>
}
 800011c:	46c0      	nop			; (mov r8, r8)
 800011e:	46bd      	mov	sp, r7
 8000120:	bd80      	pop	{r7, pc}

08000122 <main>:
#include "main.h"

int main(void)
{
 8000122:	b580      	push	{r7, lr}
 8000124:	af00      	add	r7, sp, #0

  while (1)
 8000126:	e7fe      	b.n	8000126 <main+0x4>

08000128 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000128:	b580      	push	{r7, lr}
 800012a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800012c:	46c0      	nop			; (mov r8, r8)
 800012e:	46bd      	mov	sp, r7
 8000130:	bd80      	pop	{r7, pc}
	...

08000134 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000134:	480d      	ldr	r0, [pc, #52]	; (800016c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000136:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000138:	480d      	ldr	r0, [pc, #52]	; (8000170 <LoopForever+0x6>)
  ldr r1, =_edata
 800013a:	490e      	ldr	r1, [pc, #56]	; (8000174 <LoopForever+0xa>)
  ldr r2, =_sidata
 800013c:	4a0e      	ldr	r2, [pc, #56]	; (8000178 <LoopForever+0xe>)
  movs r3, #0
 800013e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000140:	e002      	b.n	8000148 <LoopCopyDataInit>

08000142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000146:	3304      	adds	r3, #4

08000148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800014a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800014c:	d3f9      	bcc.n	8000142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800014e:	4a0b      	ldr	r2, [pc, #44]	; (800017c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000150:	4c0b      	ldr	r4, [pc, #44]	; (8000180 <LoopForever+0x16>)
  movs r3, #0
 8000152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000154:	e001      	b.n	800015a <LoopFillZerobss>

08000156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000158:	3204      	adds	r2, #4

0800015a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800015a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800015c:	d3fb      	bcc.n	8000156 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800015e:	f7ff ffe3 	bl	8000128 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000162:	f000 f823 	bl	80001ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000166:	f7ff ffdc 	bl	8000122 <main>

0800016a <LoopForever>:

LoopForever:
    b LoopForever
 800016a:	e7fe      	b.n	800016a <LoopForever>
  ldr   r0, =_estack
 800016c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000174:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000178:	08000214 	.word	0x08000214
  ldr r2, =_sbss
 800017c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000180:	20000024 	.word	0x20000024

08000184 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000184:	e7fe      	b.n	8000184 <ADC1_COMP_IRQHandler>
	...

08000188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800018c:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <HAL_IncTick+0x1c>)
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	001a      	movs	r2, r3
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <HAL_IncTick+0x20>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	18d2      	adds	r2, r2, r3
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <HAL_IncTick+0x20>)
 800019a:	601a      	str	r2, [r3, #0]
}
 800019c:	46c0      	nop			; (mov r8, r8)
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	46c0      	nop			; (mov r8, r8)
 80001a4:	20000000 	.word	0x20000000
 80001a8:	20000020 	.word	0x20000020

080001ac <__libc_init_array>:
 80001ac:	b570      	push	{r4, r5, r6, lr}
 80001ae:	2600      	movs	r6, #0
 80001b0:	4d0c      	ldr	r5, [pc, #48]	; (80001e4 <__libc_init_array+0x38>)
 80001b2:	4c0d      	ldr	r4, [pc, #52]	; (80001e8 <__libc_init_array+0x3c>)
 80001b4:	1b64      	subs	r4, r4, r5
 80001b6:	10a4      	asrs	r4, r4, #2
 80001b8:	42a6      	cmp	r6, r4
 80001ba:	d109      	bne.n	80001d0 <__libc_init_array+0x24>
 80001bc:	2600      	movs	r6, #0
 80001be:	f000 f819 	bl	80001f4 <_init>
 80001c2:	4d0a      	ldr	r5, [pc, #40]	; (80001ec <__libc_init_array+0x40>)
 80001c4:	4c0a      	ldr	r4, [pc, #40]	; (80001f0 <__libc_init_array+0x44>)
 80001c6:	1b64      	subs	r4, r4, r5
 80001c8:	10a4      	asrs	r4, r4, #2
 80001ca:	42a6      	cmp	r6, r4
 80001cc:	d105      	bne.n	80001da <__libc_init_array+0x2e>
 80001ce:	bd70      	pop	{r4, r5, r6, pc}
 80001d0:	00b3      	lsls	r3, r6, #2
 80001d2:	58eb      	ldr	r3, [r5, r3]
 80001d4:	4798      	blx	r3
 80001d6:	3601      	adds	r6, #1
 80001d8:	e7ee      	b.n	80001b8 <__libc_init_array+0xc>
 80001da:	00b3      	lsls	r3, r6, #2
 80001dc:	58eb      	ldr	r3, [r5, r3]
 80001de:	4798      	blx	r3
 80001e0:	3601      	adds	r6, #1
 80001e2:	e7f2      	b.n	80001ca <__libc_init_array+0x1e>
 80001e4:	0800020c 	.word	0x0800020c
 80001e8:	0800020c 	.word	0x0800020c
 80001ec:	0800020c 	.word	0x0800020c
 80001f0:	08000210 	.word	0x08000210

080001f4 <_init>:
 80001f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001f6:	46c0      	nop			; (mov r8, r8)
 80001f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80001fa:	bc08      	pop	{r3}
 80001fc:	469e      	mov	lr, r3
 80001fe:	4770      	bx	lr

08000200 <_fini>:
 8000200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000202:	46c0      	nop			; (mov r8, r8)
 8000204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000206:	bc08      	pop	{r3}
 8000208:	469e      	mov	lr, r3
 800020a:	4770      	bx	lr
